<?xml version="1.0" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<svg version="1.1" width="1200" height="662" onload="init(evt)" viewBox="0 0 1200 662" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<!-- Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples. -->
<!-- NOTES:  -->
<defs>
	<linearGradient id="background" y1="0" y2="1" x1="0" x2="0" >
		<stop stop-color="#eeeeee" offset="5%" />
		<stop stop-color="#eeeeb0" offset="95%" />
	</linearGradient>
</defs>
<style type="text/css">
	text { font-family:Verdana; font-size:12px; fill:rgb(0,0,0); }
	#search, #ignorecase { opacity:0.1; cursor:pointer; }
	#search:hover, #search.show, #ignorecase:hover, #ignorecase.show { opacity:1; }
	#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
	#title { text-anchor:middle; font-size:17px}
	#unzoom { cursor:pointer; }
	#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
	.hide { display:none; }
	.parent { opacity:0.5; }
</style>
<script type="text/ecmascript">
<![CDATA[
	"use strict";
	var details, searchbtn, unzoombtn, matchedtxt, svg, searching, currentSearchTerm, ignorecase, ignorecaseBtn;
	function init(evt) {
		details = document.getElementById("details").firstChild;
		searchbtn = document.getElementById("search");
		ignorecaseBtn = document.getElementById("ignorecase");
		unzoombtn = document.getElementById("unzoom");
		matchedtxt = document.getElementById("matched");
		svg = document.getElementsByTagName("svg")[0];
		searching = 0;
		currentSearchTerm = null;

		// use GET parameters to restore a flamegraphs state.
		var params = get_params();
		if (params.x && params.y)
			zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
                if (params.s) search(params.s);
	}

	// event listeners
	window.addEventListener("click", function(e) {
		var target = find_group(e.target);
		if (target) {
			if (target.nodeName == "a") {
				if (e.ctrlKey === false) return;
				e.preventDefault();
			}
			if (target.classList.contains("parent")) unzoom();
			zoom(target);
			if (!document.querySelector('.parent')) {
				clearzoom();
				return;
			}

			// set parameters for zoom state
			var el = target.querySelector("rect");
			if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
				var params = get_params()
				params.x = el.attributes._orig_x.value;
				params.y = el.attributes.y.value;
				history.replaceState(null, null, parse_params(params));
			}
		}
		else if (e.target.id == "unzoom") clearzoom();
		else if (e.target.id == "search") search_prompt();
		else if (e.target.id == "ignorecase") toggle_ignorecase();
	}, false)

	// mouse-over for info
	// show
	window.addEventListener("mouseover", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = "Function: " + g_to_text(target);
	}, false)

	// clear
	window.addEventListener("mouseout", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = ' ';
	}, false)

	// ctrl-F for search
	// ctrl-I to toggle case-sensitive search
	window.addEventListener("keydown",function (e) {
		if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
			e.preventDefault();
			search_prompt();
		}
		else if (e.ctrlKey && e.keyCode === 73) {
			e.preventDefault();
			toggle_ignorecase();
		}
	}, false)

	// functions
	function get_params() {
		var params = {};
		var paramsarr = window.location.search.substr(1).split('&');
		for (var i = 0; i < paramsarr.length; ++i) {
			var tmp = paramsarr[i].split("=");
			if (!tmp[0] || !tmp[1]) continue;
			params[tmp[0]]  = decodeURIComponent(tmp[1]);
		}
		return params;
	}
	function parse_params(params) {
		var uri = "?";
		for (var key in params) {
			uri += key + '=' + encodeURIComponent(params[key]) + '&';
		}
		if (uri.slice(-1) == "&")
			uri = uri.substring(0, uri.length - 1);
		if (uri == '?')
			uri = window.location.href.split('?')[0];
		return uri;
	}
	function find_child(node, selector) {
		var children = node.querySelectorAll(selector);
		if (children.length) return children[0];
	}
	function find_group(node) {
		var parent = node.parentElement;
		if (!parent) return;
		if (parent.id == "frames") return node;
		return find_group(parent);
	}
	function orig_save(e, attr, val) {
		if (e.attributes["_orig_" + attr] != undefined) return;
		if (e.attributes[attr] == undefined) return;
		if (val == undefined) val = e.attributes[attr].value;
		e.setAttribute("_orig_" + attr, val);
	}
	function orig_load(e, attr) {
		if (e.attributes["_orig_"+attr] == undefined) return;
		e.attributes[attr].value = e.attributes["_orig_" + attr].value;
		e.removeAttribute("_orig_"+attr);
	}
	function g_to_text(e) {
		var text = find_child(e, "title").firstChild.nodeValue;
		return (text)
	}
	function g_to_func(e) {
		var func = g_to_text(e);
		// if there's any manipulation we want to do to the function
		// name before it's searched, do it here before returning.
		return (func);
	}
	function update_text(e) {
		var r = find_child(e, "rect");
		var t = find_child(e, "text");
		var w = parseFloat(r.attributes.width.value) -3;
		var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
		t.attributes.x.value = parseFloat(r.attributes.x.value) + 3;

		// Smaller than this size won't fit anything
		if (w < 2 * 12 * 0.59) {
			t.textContent = "";
			return;
		}

		t.textContent = txt;
		// Fit in full text width
		if (/^ *$/.test(txt) || t.getSubStringLength(0, txt.length) < w)
			return;

		for (var x = txt.length - 2; x > 0; x--) {
			if (t.getSubStringLength(0, x + 2) <= w) {
				t.textContent = txt.substring(0, x) + "..";
				return;
			}
		}
		t.textContent = "";
	}

	// zoom
	function zoom_reset(e) {
		if (e.attributes != undefined) {
			orig_load(e, "x");
			orig_load(e, "width");
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_reset(c[i]);
		}
	}
	function zoom_child(e, x, ratio) {
		if (e.attributes != undefined) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = (parseFloat(e.attributes.x.value) - x - 10) * ratio + 10;
				if (e.tagName == "text")
					e.attributes.x.value = find_child(e.parentNode, "rect[x]").attributes.x.value + 3;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseFloat(e.attributes.width.value) * ratio;
			}
		}

		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_child(c[i], x - 10, ratio);
		}
	}
	function zoom_parent(e) {
		if (e.attributes) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = 10;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseInt(svg.width.baseVal.value) - (10 * 2);
			}
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_parent(c[i]);
		}
	}
	function zoom(node) {
		var attr = find_child(node, "rect").attributes;
		var width = parseFloat(attr.width.value);
		var xmin = parseFloat(attr.x.value);
		var xmax = parseFloat(xmin + width);
		var ymin = parseFloat(attr.y.value);
		var ratio = (svg.width.baseVal.value - 2 * 10) / width;

		// XXX: Workaround for JavaScript float issues (fix me)
		var fudge = 0.0001;

		unzoombtn.classList.remove("hide");

		var el = document.getElementById("frames").children;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var a = find_child(e, "rect").attributes;
			var ex = parseFloat(a.x.value);
			var ew = parseFloat(a.width.value);
			var upstack;
			// Is it an ancestor
			if (0 == 0) {
				upstack = parseFloat(a.y.value) > ymin;
			} else {
				upstack = parseFloat(a.y.value) < ymin;
			}
			if (upstack) {
				// Direct ancestor
				if (ex <= xmin && (ex+ew+fudge) >= xmax) {
					e.classList.add("parent");
					zoom_parent(e);
					update_text(e);
				}
				// not in current path
				else
					e.classList.add("hide");
			}
			// Children maybe
			else {
				// no common path
				if (ex < xmin || ex + fudge >= xmax) {
					e.classList.add("hide");
				}
				else {
					zoom_child(e, xmin, ratio);
					update_text(e);
				}
			}
		}
		search();
	}
	function unzoom() {
		unzoombtn.classList.add("hide");
		var el = document.getElementById("frames").children;
		for(var i = 0; i < el.length; i++) {
			el[i].classList.remove("parent");
			el[i].classList.remove("hide");
			zoom_reset(el[i]);
			update_text(el[i]);
		}
		search();
	}
	function clearzoom() {
		unzoom();

		// remove zoom state
		var params = get_params();
		if (params.x) delete params.x;
		if (params.y) delete params.y;
		history.replaceState(null, null, parse_params(params));
	}

	// search
	function toggle_ignorecase() {
		ignorecase = !ignorecase;
		if (ignorecase) {
			ignorecaseBtn.classList.add("show");
		} else {
			ignorecaseBtn.classList.remove("show");
		}
		reset_search();
		search();
	}
	function reset_search() {
		var el = document.querySelectorAll("#frames rect");
		for (var i = 0; i < el.length; i++) {
			orig_load(el[i], "fill")
		}
		var params = get_params();
		delete params.s;
		history.replaceState(null, null, parse_params(params));
	}
	function search_prompt() {
		if (!searching) {
			var term = prompt("Enter a search term (regexp " +
			    "allowed, eg: ^ext4_)"
			    + (ignorecase ? ", ignoring case" : "")
			    + "\nPress Ctrl-i to toggle case sensitivity", "");
			if (term != null) search(term);
		} else {
			reset_search();
			searching = 0;
			currentSearchTerm = null;
			searchbtn.classList.remove("show");
			searchbtn.firstChild.nodeValue = "Search"
			matchedtxt.classList.add("hide");
			matchedtxt.firstChild.nodeValue = ""
		}
	}
	function search(term) {
		if (term) currentSearchTerm = term;

		var re = new RegExp(currentSearchTerm, ignorecase ? 'i' : '');
		var el = document.getElementById("frames").children;
		var matches = new Object();
		var maxwidth = 0;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var func = g_to_func(e);
			var rect = find_child(e, "rect");
			if (func == null || rect == null)
				continue;

			// Save max width. Only works as we have a root frame
			var w = parseFloat(rect.attributes.width.value);
			if (w > maxwidth)
				maxwidth = w;

			if (func.match(re)) {
				// highlight
				var x = parseFloat(rect.attributes.x.value);
				orig_save(rect, "fill");
				rect.attributes.fill.value = "rgb(230,0,230)";

				// remember matches
				if (matches[x] == undefined) {
					matches[x] = w;
				} else {
					if (w > matches[x]) {
						// overwrite with parent
						matches[x] = w;
					}
				}
				searching = 1;
			}
		}
		if (!searching)
			return;
		var params = get_params();
		params.s = currentSearchTerm;
		history.replaceState(null, null, parse_params(params));

		searchbtn.classList.add("show");
		searchbtn.firstChild.nodeValue = "Reset Search";

		// calculate percent matched, excluding vertical overlap
		var count = 0;
		var lastx = -1;
		var lastw = 0;
		var keys = Array();
		for (k in matches) {
			if (matches.hasOwnProperty(k))
				keys.push(k);
		}
		// sort the matched frames by their x location
		// ascending, then width descending
		keys.sort(function(a, b){
			return a - b;
		});
		// Step through frames saving only the biggest bottom-up frames
		// thanks to the sort order. This relies on the tree property
		// where children are always smaller than their parents.
		var fudge = 0.0001;	// JavaScript floating point
		for (var k in keys) {
			var x = parseFloat(keys[k]);
			var w = matches[keys[k]];
			if (x >= lastx + lastw - fudge) {
				count += w;
				lastx = x;
				lastw = w;
			}
		}
		// display matched percent
		matchedtxt.classList.remove("hide");
		var pct = 100 * count / maxwidth;
		if (pct != 100) pct = pct.toFixed(1)
		matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
	}
]]>
</script>
<rect x="0.0" y="0" width="1200.0" height="662.0" fill="url(#background)"  />
<text id="title" x="600.00" y="24" >Flame Graph</text>
<text id="details" x="10.00" y="645" > </text>
<text id="unzoom" x="10.00" y="24" class="hide">Reset Zoom</text>
<text id="search" x="1090.00" y="24" >Search</text>
<text id="ignorecase" x="1174.00" y="24" >ic</text>
<text id="matched" x="1090.00" y="645" > </text>
<g id="frames">
<g >
<title>std::_Hashtable&lt;int, int, std::allocator&lt;int&gt;, std::__detail::_Identity, std::equal_to&lt;int&gt;, std::hash&lt;int&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, true, true&gt; &gt;::_M_find_before_node (1 samples, 0.03%)</title><rect x="1072.7" y="437" width="0.4" height="15.0" fill="rgb(249,109,25)" rx="2" ry="2" />
<text  x="1075.68" y="447.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_code_base&lt;int, std::pair&lt;int const, double&gt;, std::__detail::_Select1st, std::hash&lt;int&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, false&gt;::_M_hash_code (3 samples, 0.10%)</title><rect x="780.7" y="405" width="1.2" height="15.0" fill="rgb(242,213,44)" rx="2" ry="2" />
<text  x="783.72" y="415.5" ></text>
</g>
<g >
<title>malloc_consolidate (9 samples, 0.29%)</title><rect x="505.8" y="341" width="3.5" height="15.0" fill="rgb(206,136,44)" rx="2" ry="2" />
<text  x="508.84" y="351.5" ></text>
</g>
<g >
<title>xhci_queue_isoc_tx (1 samples, 0.03%)</title><rect x="956.9" y="245" width="0.4" height="15.0" fill="rgb(234,29,36)" rx="2" ry="2" />
<text  x="959.89" y="255.5" ></text>
</g>
<g >
<title>zap_pte_range.isra.0 (1 samples, 0.03%)</title><rect x="1188.1" y="421" width="0.4" height="15.0" fill="rgb(213,183,19)" rx="2" ry="2" />
<text  x="1191.10" y="431.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;int, std::pair&lt;int const, double&gt;, std::allocator&lt;std::pair&lt;int const, double&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;int&gt;, std::hash&lt;int&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_Scoped_node::_Scoped_node&lt;std::piecewise_construct_t const&amp;, std::tuple&lt;int const&amp;&gt;, std::tuple&lt;&gt; &gt; (24 samples, 0.77%)</title><rect x="823.2" y="469" width="9.2" height="15.0" fill="rgb(254,211,16)" rx="2" ry="2" />
<text  x="826.24" y="479.5" ></text>
</g>
<g >
<title>irq_exit_rcu (1 samples, 0.03%)</title><rect x="799.7" y="389" width="0.4" height="15.0" fill="rgb(238,157,1)" rx="2" ry="2" />
<text  x="802.70" y="399.5" ></text>
</g>
<g >
<title>std::allocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;int const, double&gt;, false&gt; &gt;::allocate (1 samples, 0.03%)</title><rect x="68.8" y="293" width="0.4" height="15.0" fill="rgb(207,158,35)" rx="2" ry="2" />
<text  x="71.85" y="303.5" ></text>
</g>
<g >
<title>irqentry_exit (4 samples, 0.13%)</title><rect x="59.7" y="261" width="1.6" height="15.0" fill="rgb(242,6,33)" rx="2" ry="2" />
<text  x="62.74" y="271.5" ></text>
</g>
<g >
<title>std::__detail::_Mod_range_hashing::operator (3 samples, 0.10%)</title><rect x="94.3" y="405" width="1.1" height="15.0" fill="rgb(252,178,23)" rx="2" ry="2" />
<text  x="97.29" y="415.5" ></text>
</g>
<g >
<title>common_interrupt (1 samples, 0.03%)</title><rect x="419.7" y="309" width="0.3" height="15.0" fill="rgb(247,132,41)" rx="2" ry="2" />
<text  x="422.66" y="319.5" ></text>
</g>
<g >
<title>operator delete (1 samples, 0.03%)</title><rect x="1182.4" y="229" width="0.4" height="15.0" fill="rgb(253,40,54)" rx="2" ry="2" />
<text  x="1185.41" y="239.5" ></text>
</g>
<g >
<title>__gnu_cxx::__ops::_Iter_comp_iter&lt;com::github::coderodde::pathfinders::util::HeapNodeComparator&lt;int, double&gt; &gt;::operator (51 samples, 1.64%)</title><rect x="733.3" y="437" width="19.3" height="15.0" fill="rgb(220,197,49)" rx="2" ry="2" />
<text  x="736.26" y="447.5" ></text>
</g>
<g >
<title>_int_free (258 samples, 8.30%)</title><rect x="315.3" y="357" width="97.9" height="15.0" fill="rgb(241,38,13)" rx="2" ry="2" />
<text  x="318.25" y="367.5" >_int_free</text>
</g>
<g >
<title>operator new (47 samples, 1.51%)</title><rect x="936.0" y="389" width="17.8" height="15.0" fill="rgb(217,92,44)" rx="2" ry="2" />
<text  x="939.00" y="399.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_code_base&lt;int, int, std::__detail::_Identity, std::hash&lt;int&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, false&gt;::_M_hash_code (15 samples, 0.48%)</title><rect x="1067.0" y="469" width="5.7" height="15.0" fill="rgb(206,174,16)" rx="2" ry="2" />
<text  x="1069.99" y="479.5" ></text>
</g>
<g >
<title>_int_free (4 samples, 0.13%)</title><rect x="1109.5" y="357" width="1.5" height="15.0" fill="rgb(211,151,35)" rx="2" ry="2" />
<text  x="1112.51" y="367.5" ></text>
</g>
<g >
<title>snd_complete_urb (1 samples, 0.03%)</title><rect x="772.7" y="181" width="0.4" height="15.0" fill="rgb(222,148,25)" rx="2" ry="2" />
<text  x="775.75" y="191.5" ></text>
</g>
<g >
<title>snd_complete_urb (1 samples, 0.03%)</title><rect x="1046.5" y="293" width="0.4" height="15.0" fill="rgb(215,4,51)" rx="2" ry="2" />
<text  x="1049.49" y="303.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;int, std::pair&lt;int const, double&gt;, std::allocator&lt;std::pair&lt;int const, double&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;int&gt;, std::hash&lt;int&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_insert_bucket_begin (1 samples, 0.03%)</title><rect x="790.2" y="453" width="0.4" height="15.0" fill="rgb(219,111,38)" rx="2" ry="2" />
<text  x="793.21" y="463.5" ></text>
</g>
<g >
<title>operator new (14 samples, 0.45%)</title><rect x="21.4" y="565" width="5.3" height="15.0" fill="rgb(226,168,46)" rx="2" ry="2" />
<text  x="24.39" y="575.5" ></text>
</g>
<g >
<title>std::pair&lt;int const, std::unordered_map&lt;int, double, std::hash&lt;int&gt;, std::equal_to&lt;int&gt;, std::allocator&lt;std::pair&lt;int const, double&gt; &gt; &gt; &gt;::~pair (65 samples, 2.09%)</title><rect x="1158.1" y="389" width="24.7" height="15.0" fill="rgb(247,84,46)" rx="2" ry="2" />
<text  x="1161.11" y="399.5" >s..</text>
</g>
<g >
<title>com::github::coderodde::directed_graph::DirectedGraph&lt;int&gt;::~DirectedGraph (1 samples, 0.03%)</title><rect x="81.8" y="517" width="0.3" height="15.0" fill="rgb(217,74,18)" rx="2" ry="2" />
<text  x="84.76" y="527.5" ></text>
</g>
<g >
<title>std::allocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;int const, int*&gt;, false&gt; &gt;::deallocate (7 samples, 0.23%)</title><rect x="544.6" y="389" width="2.6" height="15.0" fill="rgb(248,95,44)" rx="2" ry="2" />
<text  x="547.57" y="399.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;int, int, std::allocator&lt;int&gt;, std::__detail::_Identity, std::equal_to&lt;int&gt;, std::hash&lt;int&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, true, true&gt; &gt;::_Hashtable (9 samples, 0.29%)</title><rect x="59.7" y="373" width="3.5" height="15.0" fill="rgb(212,139,1)" rx="2" ry="2" />
<text  x="62.74" y="383.5" ></text>
</g>
<g >
<title>usb_giveback_urb_bh (1 samples, 0.03%)</title><rect x="799.7" y="325" width="0.4" height="15.0" fill="rgb(233,117,15)" rx="2" ry="2" />
<text  x="802.70" y="335.5" ></text>
</g>
<g >
<title>__gnu_cxx::new_allocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;int const, std::unordered_map&lt;int, double, std::hash&lt;int&gt;, std::equal_to&lt;int&gt;, std::allocator&lt;std::pair&lt;int const, double&gt; &gt; &gt; &gt;, false&gt; &gt;::deallocate (5 samples, 0.16%)</title><rect x="1156.2" y="373" width="1.9" height="15.0" fill="rgb(223,212,43)" rx="2" ry="2" />
<text  x="1159.21" y="383.5" ></text>
</g>
<g >
<title>__common_interrupt (1 samples, 0.03%)</title><rect x="958.0" y="357" width="0.4" height="15.0" fill="rgb(228,80,3)" rx="2" ry="2" />
<text  x="961.02" y="367.5" ></text>
</g>
<g >
<title>std::allocator_traits&lt;std::allocator&lt;std::chrono::duration&lt;long, std::ratio&lt;1l, 1000000000l&gt; &gt; &gt; &gt;::allocate (13 samples, 0.42%)</title><rect x="1182.8" y="485" width="4.9" height="15.0" fill="rgb(218,164,8)" rx="2" ry="2" />
<text  x="1185.79" y="495.5" ></text>
</g>
<g >
<title>__common_interrupt (1 samples, 0.03%)</title><rect x="858.2" y="389" width="0.4" height="15.0" fill="rgb(250,124,28)" rx="2" ry="2" />
<text  x="861.17" y="399.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;int, std::pair&lt;int const, double&gt;, std::allocator&lt;std::pair&lt;int const, double&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;int&gt;, std::hash&lt;int&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_find_before_node (2 samples, 0.06%)</title><rect x="522.5" y="437" width="0.8" height="15.0" fill="rgb(217,129,17)" rx="2" ry="2" />
<text  x="525.55" y="447.5" ></text>
</g>
<g >
<title>operator new (105 samples, 3.38%)</title><rect x="628.5" y="501" width="39.8" height="15.0" fill="rgb(242,82,2)" rx="2" ry="2" />
<text  x="631.47" y="511.5" >ope..</text>
</g>
<g >
<title>std::construct_at&lt;int, int const&amp;&gt; (5 samples, 0.16%)</title><rect x="61.3" y="293" width="1.9" height="15.0" fill="rgb(209,32,6)" rx="2" ry="2" />
<text  x="64.25" y="303.5" ></text>
</g>
<g >
<title>_int_free (1 samples, 0.03%)</title><rect x="832.4" y="469" width="0.3" height="15.0" fill="rgb(237,79,0)" rx="2" ry="2" />
<text  x="835.36" y="479.5" ></text>
</g>
<g >
<title>std::__adjust_heap&lt;__gnu_cxx::__normal_iterator&lt;com::github::coderodde::pathfinders::util::HeapNode&lt;int, double&gt;**, std::vector&lt;com::github::coderodde::pathfinders::util::HeapNode&lt;int, double&gt;*, std::allocator&lt;com::github::coderodde::pathfinders::util::HeapNode&lt;int, double&gt;*&gt; &gt; &gt;, long, com::github::coderodde::pathfinders::util::HeapNode&lt;int, double&gt;*, __gnu_cxx::__ops::_Iter_comp_iter&lt;com::github::coderodde::pathfinders::util::HeapNodeComparator&lt;int, double&gt; &gt; &gt; (226 samples, 7.27%)</title><rect x="668.3" y="453" width="85.8" height="15.0" fill="rgb(232,46,16)" rx="2" ry="2" />
<text  x="671.34" y="463.5" >std::__adj..</text>
</g>
<g >
<title>__GI___libc_free (2 samples, 0.06%)</title><rect x="1158.9" y="245" width="0.7" height="15.0" fill="rgb(231,151,29)" rx="2" ry="2" />
<text  x="1161.87" y="255.5" ></text>
</g>
<g >
<title>usb_giveback_urb_bh (1 samples, 0.03%)</title><rect x="526.3" y="309" width="0.4" height="15.0" fill="rgb(238,226,23)" rx="2" ry="2" />
<text  x="529.34" y="319.5" ></text>
</g>
<g >
<title>__gnu_cxx::new_allocator&lt;std::__detail::_Hash_node_base*&gt;::deallocate (24 samples, 0.77%)</title><rect x="420.0" y="245" width="9.2" height="15.0" fill="rgb(246,113,21)" rx="2" ry="2" />
<text  x="423.04" y="255.5" ></text>
</g>
<g >
<title>asm_exc_page_fault (1 samples, 0.03%)</title><rect x="68.1" y="341" width="0.4" height="15.0" fill="rgb(218,213,28)" rx="2" ry="2" />
<text  x="71.09" y="351.5" ></text>
</g>
<g >
<title>handle_irq_event_percpu (1 samples, 0.03%)</title><rect x="858.2" y="341" width="0.4" height="15.0" fill="rgb(217,87,11)" rx="2" ry="2" />
<text  x="861.17" y="351.5" ></text>
</g>
<g >
<title>std::allocator&lt;std::__detail::_Hash_node_base*&gt;::allocate (30 samples, 0.97%)</title><rect x="904.9" y="373" width="11.4" height="15.0" fill="rgb(243,139,5)" rx="2" ry="2" />
<text  x="907.87" y="383.5" ></text>
</g>
<g >
<title>std::allocator_traits&lt;std::allocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;int const, std::unordered_set&lt;int, std::hash&lt;int&gt;, std::equal_to&lt;int&gt;, std::allocator&lt;int&gt; &gt; &gt;, false&gt; &gt; &gt;::destroy&lt;std::pair&lt;int const, std::unordered_set&lt;int, std::hash&lt;int&gt;, std::equal_to&lt;int&gt;, std::allocator&lt;int&gt; &gt; &gt; &gt; (6 samples, 0.19%)</title><rect x="44.9" y="517" width="2.3" height="15.0" fill="rgb(220,206,25)" rx="2" ry="2" />
<text  x="47.93" y="527.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;int, std::pair&lt;int const, double&gt;, std::allocator&lt;std::pair&lt;int const, double&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;int&gt;, std::hash&lt;int&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::clear (1 samples, 0.03%)</title><rect x="82.5" y="341" width="0.4" height="15.0" fill="rgb(224,207,4)" rx="2" ry="2" />
<text  x="85.52" y="351.5" ></text>
</g>
<g >
<title>_int_malloc (1 samples, 0.03%)</title><rect x="68.8" y="229" width="0.4" height="15.0" fill="rgb(205,117,17)" rx="2" ry="2" />
<text  x="71.85" y="239.5" ></text>
</g>
<g >
<title>std::allocator&lt;std::__detail::_Hash_node_base*&gt;::deallocate (1 samples, 0.03%)</title><rect x="82.1" y="405" width="0.4" height="15.0" fill="rgb(242,228,13)" rx="2" ry="2" />
<text  x="85.14" y="415.5" ></text>
</g>
<g >
<title>__handle_irq_event_percpu (1 samples, 0.03%)</title><rect x="139.8" y="213" width="0.4" height="15.0" fill="rgb(250,117,26)" rx="2" ry="2" />
<text  x="142.85" y="223.5" ></text>
</g>
<g >
<title>__GI___libc_malloc (16 samples, 0.51%)</title><rect x="585.6" y="309" width="6.0" height="15.0" fill="rgb(223,113,29)" rx="2" ry="2" />
<text  x="588.57" y="319.5" ></text>
</g>
<g >
<title>__gnu_cxx::new_allocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;int const, double&gt;, false&gt; &gt;::allocate (24 samples, 0.77%)</title><rect x="823.2" y="405" width="9.2" height="15.0" fill="rgb(213,110,41)" rx="2" ry="2" />
<text  x="826.24" y="415.5" ></text>
</g>
<g >
<title>std::allocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;int const, std::unordered_map&lt;int, double, std::hash&lt;int&gt;, std::equal_to&lt;int&gt;, std::allocator&lt;std::pair&lt;int const, double&gt; &gt; &gt; &gt;, false&gt; &gt;::allocate (16 samples, 0.51%)</title><rect x="585.6" y="357" width="6.0" height="15.0" fill="rgb(243,153,30)" rx="2" ry="2" />
<text  x="588.57" y="367.5" ></text>
</g>
<g >
<title>_int_malloc (21 samples, 0.68%)</title><rect x="1077.2" y="293" width="8.0" height="15.0" fill="rgb(249,111,30)" rx="2" ry="2" />
<text  x="1080.24" y="303.5" ></text>
</g>
<g >
<title>do_anonymous_page (1 samples, 0.03%)</title><rect x="67.7" y="261" width="0.4" height="15.0" fill="rgb(227,144,22)" rx="2" ry="2" />
<text  x="70.71" y="271.5" ></text>
</g>
<g >
<title>xhci_queue_isoc_tx (1 samples, 0.03%)</title><rect x="772.7" y="101" width="0.4" height="15.0" fill="rgb(233,85,34)" rx="2" ry="2" />
<text  x="775.75" y="111.5" ></text>
</g>
<g >
<title>__GI___libc_free (1 samples, 0.03%)</title><rect x="86.7" y="501" width="0.4" height="15.0" fill="rgb(232,148,0)" rx="2" ry="2" />
<text  x="89.69" y="511.5" ></text>
</g>
<g >
<title>std::__detail::_AllocNode&lt;std::allocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;int const, double&gt;, false&gt; &gt; &gt;::operator (62 samples, 1.99%)</title><rect x="604.6" y="277" width="23.5" height="15.0" fill="rgb(231,22,6)" rx="2" ry="2" />
<text  x="607.56" y="287.5" >s..</text>
</g>
<g >
<title>std::unordered_map&lt;int, double, std::hash&lt;int&gt;, std::equal_to&lt;int&gt;, std::allocator&lt;std::pair&lt;int const, double&gt; &gt; &gt;::contains (22 samples, 0.71%)</title><rect x="514.2" y="485" width="8.3" height="15.0" fill="rgb(205,73,9)" rx="2" ry="2" />
<text  x="517.20" y="495.5" ></text>
</g>
<g >
<title>tick_sched_handle.isra.0 (1 samples, 0.03%)</title><rect x="180.5" y="85" width="0.3" height="15.0" fill="rgb(250,94,23)" rx="2" ry="2" />
<text  x="183.47" y="95.5" ></text>
</g>
<g >
<title>irq_exit_rcu (1 samples, 0.03%)</title><rect x="1046.5" y="389" width="0.4" height="15.0" fill="rgb(228,81,50)" rx="2" ry="2" />
<text  x="1049.49" y="399.5" ></text>
</g>
<g >
<title>__usb_hcd_giveback_urb (1 samples, 0.03%)</title><rect x="526.3" y="293" width="0.4" height="15.0" fill="rgb(220,122,6)" rx="2" ry="2" />
<text  x="529.34" y="303.5" ></text>
</g>
<g >
<title>__GI___libc_malloc (13 samples, 0.42%)</title><rect x="580.3" y="309" width="4.9" height="15.0" fill="rgb(235,107,1)" rx="2" ry="2" />
<text  x="583.26" y="319.5" ></text>
</g>
<g >
<title>malloc_consolidate (1 samples, 0.03%)</title><rect x="81.8" y="357" width="0.3" height="15.0" fill="rgb(217,68,50)" rx="2" ry="2" />
<text  x="84.76" y="367.5" ></text>
</g>
<g >
<title>alloc_pages_vma (1 samples, 0.03%)</title><rect x="68.1" y="245" width="0.4" height="15.0" fill="rgb(248,187,21)" rx="2" ry="2" />
<text  x="71.09" y="255.5" ></text>
</g>
<g >
<title>std::__detail::_Hashtable_alloc&lt;std::allocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;int const, std::unordered_set&lt;int, std::hash&lt;int&gt;, std::equal_to&lt;int&gt;, std::allocator&lt;int&gt; &gt; &gt;, false&gt; &gt; &gt;::_M_allocate_buckets (13 samples, 0.42%)</title><rect x="89.4" y="421" width="4.9" height="15.0" fill="rgb(223,97,15)" rx="2" ry="2" />
<text  x="92.35" y="431.5" ></text>
</g>
<g >
<title>std::__detail::_Hashtable_alloc&lt;std::allocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;int const, int*&gt;, false&gt; &gt; &gt;::_M_deallocate_buckets (71 samples, 2.28%)</title><rect x="975.5" y="437" width="26.9" height="15.0" fill="rgb(233,228,25)" rx="2" ry="2" />
<text  x="978.49" y="447.5" >s..</text>
</g>
<g >
<title>std::unordered_map&lt;int, std::unordered_map&lt;int, double, std::hash&lt;int&gt;, std::equal_to&lt;int&gt;, std::allocator&lt;std::pair&lt;int const, double&gt; &gt; &gt;, std::hash&lt;int&gt;, std::equal_to&lt;int&gt;, std::allocator&lt;std::pair&lt;int const, std::unordered_map&lt;int, double, std::hash&lt;int&gt;, std::equal_to&lt;int&gt;, std::allocator&lt;std::pair&lt;int const, double&gt; &gt; &gt; &gt; &gt; &gt;::operator[] (6 samples, 0.19%)</title><rect x="532.4" y="485" width="2.3" height="15.0" fill="rgb(209,131,20)" rx="2" ry="2" />
<text  x="535.42" y="495.5" ></text>
</g>
<g >
<title>__gnu_cxx::new_allocator&lt;std::__detail::_Hash_node_base*&gt;::deallocate (1 samples, 0.03%)</title><rect x="82.1" y="389" width="0.4" height="15.0" fill="rgb(214,85,40)" rx="2" ry="2" />
<text  x="85.14" y="399.5" ></text>
</g>
<g >
<title>std::__detail::_Mod_range_hashing::operator (1 samples, 0.03%)</title><rect x="773.9" y="437" width="0.4" height="15.0" fill="rgb(214,166,53)" rx="2" ry="2" />
<text  x="776.89" y="447.5" ></text>
</g>
<g >
<title>alloc_perturb (1 samples, 0.03%)</title><rect x="662.3" y="453" width="0.3" height="15.0" fill="rgb(228,229,52)" rx="2" ry="2" />
<text  x="665.27" y="463.5" ></text>
</g>
<g >
<title>std::__detail::_Hashtable_alloc&lt;std::allocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;int const, std::unordered_set&lt;int, std::hash&lt;int&gt;, std::equal_to&lt;int&gt;, std::allocator&lt;int&gt; &gt; &gt;, false&gt; &gt; &gt;::_M_allocate_node&lt;std::pair&lt;int const, std::unordered_set&lt;int, std::hash&lt;int&gt;, std::equal_to&lt;int&gt;, std::allocator&lt;int&gt; &gt; &gt; const&amp;&gt; (1 samples, 0.03%)</title><rect x="27.5" y="565" width="0.3" height="15.0" fill="rgb(249,188,9)" rx="2" ry="2" />
<text  x="30.46" y="575.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;int, int, std::allocator&lt;int&gt;, std::__detail::_Identity, std::equal_to&lt;int&gt;, std::hash&lt;int&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, true, true&gt; &gt;::_M_assign&lt;std::_Hashtable&lt;int, int, std::allocator&lt;int&gt;, std::__detail::_Identity, std::equal_to&lt;int&gt;, std::hash&lt;int&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, true, true&gt; &gt; const&amp;, std::__detail::_AllocNode&lt;std::allocator&lt;std::__detail::_Hash_node&lt;int, false&gt; &gt; &gt; &gt; (343 samples, 11.04%)</title><rect x="137.9" y="325" width="130.3" height="15.0" fill="rgb(246,26,48)" rx="2" ry="2" />
<text  x="140.95" y="335.5" >std::_Hashtable&lt;..</text>
</g>
<g >
<title>com::github::coderodde::directed_graph::DirectedGraphWeightFunction&lt;int, double&gt;::DirectedGraphWeightFunction (5 samples, 0.16%)</title><rect x="68.1" y="533" width="1.9" height="15.0" fill="rgb(240,206,34)" rx="2" ry="2" />
<text  x="71.09" y="543.5" ></text>
</g>
<g >
<title>common_interrupt (1 samples, 0.03%)</title><rect x="956.9" y="437" width="0.4" height="15.0" fill="rgb(247,154,6)" rx="2" ry="2" />
<text  x="959.89" y="447.5" ></text>
</g>
<g >
<title>tasklet_action_common.isra.0 (1 samples, 0.03%)</title><rect x="419.7" y="245" width="0.3" height="15.0" fill="rgb(207,172,13)" rx="2" ry="2" />
<text  x="422.66" y="255.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_code_base&lt;int, int, std::__detail::_Identity, std::hash&lt;int&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, false&gt;::_M_bucket_index (1 samples, 0.03%)</title><rect x="268.2" y="421" width="0.4" height="15.0" fill="rgb(240,28,20)" rx="2" ry="2" />
<text  x="271.17" y="431.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;int, std::pair&lt;int const, std::unordered_map&lt;int, double, std::hash&lt;int&gt;, std::equal_to&lt;int&gt;, std::allocator&lt;std::pair&lt;int const, double&gt; &gt; &gt; &gt;, std::allocator&lt;std::pair&lt;int const, std::unordered_map&lt;int, double, std::hash&lt;int&gt;, std::equal_to&lt;int&gt;, std::allocator&lt;std::pair&lt;int const, double&gt; &gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;int&gt;, std::hash&lt;int&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::clear (76 samples, 2.45%)</title><rect x="1153.9" y="469" width="28.9" height="15.0" fill="rgb(240,51,19)" rx="2" ry="2" />
<text  x="1156.93" y="479.5" >st..</text>
</g>
<g >
<title>std::unordered_map&lt;int, int*, std::hash&lt;int&gt;, std::equal_to&lt;int&gt;, std::allocator&lt;std::pair&lt;int const, int*&gt; &gt; &gt;::operator[] (160 samples, 5.15%)</title><rect x="893.1" y="501" width="60.7" height="15.0" fill="rgb(245,197,48)" rx="2" ry="2" />
<text  x="896.10" y="511.5" >std::u..</text>
</g>
<g >
<title>tasklet_action_common.isra.0 (1 samples, 0.03%)</title><rect x="799.7" y="341" width="0.4" height="15.0" fill="rgb(241,41,21)" rx="2" ry="2" />
<text  x="802.70" y="351.5" ></text>
</g>
<g >
<title>irq_exit_rcu (1 samples, 0.03%)</title><rect x="958.4" y="357" width="0.4" height="15.0" fill="rgb(224,158,11)" rx="2" ry="2" />
<text  x="961.40" y="367.5" ></text>
</g>
<g >
<title>_int_free (4 samples, 0.13%)</title><rect x="856.3" y="357" width="1.5" height="15.0" fill="rgb(229,31,21)" rx="2" ry="2" />
<text  x="859.27" y="367.5" ></text>
</g>
<g >
<title>std::__detail::_Hashtable_alloc&lt;std::allocator&lt;std::__detail::_Hash_node&lt;int, false&gt; &gt; &gt;::_M_allocate_node&lt;int const&amp;&gt; (2 samples, 0.06%)</title><rect x="26.7" y="533" width="0.8" height="15.0" fill="rgb(208,59,7)" rx="2" ry="2" />
<text  x="29.71" y="543.5" ></text>
</g>
<g >
<title>unlink_chunk (2 samples, 0.06%)</title><rect x="134.9" y="309" width="0.8" height="15.0" fill="rgb(208,3,1)" rx="2" ry="2" />
<text  x="137.91" y="319.5" ></text>
</g>
<g >
<title>com::github::coderodde::directed_graph::DirectedGraph&lt;int&gt;::DirectedGraph (1 samples, 0.03%)</title><rect x="59.4" y="517" width="0.3" height="15.0" fill="rgb(237,30,37)" rx="2" ry="2" />
<text  x="62.36" y="527.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;int, std::pair&lt;int const, int*&gt;, std::allocator&lt;std::pair&lt;int const, int*&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;int&gt;, std::hash&lt;int&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::find (92 samples, 2.96%)</title><rect x="858.2" y="485" width="34.9" height="15.0" fill="rgb(218,208,27)" rx="2" ry="2" />
<text  x="861.17" y="495.5" >st..</text>
</g>
<g >
<title>__usb_hcd_giveback_urb (1 samples, 0.03%)</title><rect x="1187.3" y="245" width="0.4" height="15.0" fill="rgb(229,164,9)" rx="2" ry="2" />
<text  x="1190.34" y="255.5" ></text>
</g>
<g >
<title>__GI___libc_free (1 samples, 0.03%)</title><rect x="1156.6" y="357" width="0.4" height="15.0" fill="rgb(253,102,3)" rx="2" ry="2" />
<text  x="1159.59" y="367.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;int, std::pair&lt;int const, std::unordered_set&lt;int, std::hash&lt;int&gt;, std::equal_to&lt;int&gt;, std::allocator&lt;int&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;int const, std::unordered_set&lt;int, std::hash&lt;int&gt;, std::equal_to&lt;int&gt;, std::allocator&lt;int&gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;int&gt;, std::hash&lt;int&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_allocate_buckets (13 samples, 0.42%)</title><rect x="89.4" y="437" width="4.9" height="15.0" fill="rgb(245,158,5)" rx="2" ry="2" />
<text  x="92.35" y="447.5" ></text>
</g>
<g >
<title>__usb_hcd_giveback_urb (1 samples, 0.03%)</title><rect x="412.8" y="197" width="0.4" height="15.0" fill="rgb(234,155,16)" rx="2" ry="2" />
<text  x="415.82" y="207.5" ></text>
</g>
<g >
<title>std::allocator_traits&lt;std::allocator&lt;std::__detail::_Hash_node&lt;int, false&gt; &gt; &gt;::construct&lt;int, int const&amp;&gt; (5 samples, 0.16%)</title><rect x="61.3" y="309" width="1.9" height="15.0" fill="rgb(242,70,44)" rx="2" ry="2" />
<text  x="64.25" y="319.5" ></text>
</g>
<g >
<title>unmap_vmas (1 samples, 0.03%)</title><rect x="1188.1" y="469" width="0.4" height="15.0" fill="rgb(240,60,30)" rx="2" ry="2" />
<text  x="1191.10" y="479.5" ></text>
</g>
<g >
<title>__gnu_cxx::new_allocator&lt;std::__detail::_Hash_node_base*&gt;::deallocate (113 samples, 3.64%)</title><rect x="1111.0" y="389" width="42.9" height="15.0" fill="rgb(222,10,13)" rx="2" ry="2" />
<text  x="1114.03" y="399.5" >__gn..</text>
</g>
<g >
<title>std::allocator_traits&lt;std::allocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;int const, std::unordered_set&lt;int, std::hash&lt;int&gt;, std::equal_to&lt;int&gt;, std::allocator&lt;int&gt; &gt; &gt;, false&gt; &gt; &gt;::deallocate (16 samples, 0.51%)</title><rect x="414.0" y="389" width="6.0" height="15.0" fill="rgb(206,61,51)" rx="2" ry="2" />
<text  x="416.96" y="399.5" ></text>
</g>
<g >
<title>xhci_irq (1 samples, 0.03%)</title><rect x="1182.0" y="85" width="0.4" height="15.0" fill="rgb(237,33,10)" rx="2" ry="2" />
<text  x="1185.03" y="95.5" ></text>
</g>
<g >
<title>std::allocator&lt;std::__detail::_Hash_node&lt;int, false&gt; &gt;::allocate (2 samples, 0.06%)</title><rect x="1089.8" y="405" width="0.7" height="15.0" fill="rgb(238,158,54)" rx="2" ry="2" />
<text  x="1092.77" y="415.5" ></text>
</g>
<g >
<title>__softirqentry_text_start (1 samples, 0.03%)</title><rect x="419.7" y="277" width="0.3" height="15.0" fill="rgb(235,104,48)" rx="2" ry="2" />
<text  x="422.66" y="287.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;int, std::pair&lt;int const, int*&gt;, std::allocator&lt;std::pair&lt;int const, int*&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;int&gt;, std::hash&lt;int&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::clear (38 samples, 1.22%)</title><rect x="1002.4" y="469" width="14.5" height="15.0" fill="rgb(249,169,38)" rx="2" ry="2" />
<text  x="1005.45" y="479.5" ></text>
</g>
<g >
<title>operator new (13 samples, 0.42%)</title><rect x="89.4" y="357" width="4.9" height="15.0" fill="rgb(205,24,53)" rx="2" ry="2" />
<text  x="92.35" y="367.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;int, std::pair&lt;int const, EuclideanCoordinates&gt;, std::allocator&lt;std::pair&lt;int const, EuclideanCoordinates&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;int&gt;, std::hash&lt;int&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_find_before_node (4 samples, 0.13%)</title><rect x="71.5" y="485" width="1.5" height="15.0" fill="rgb(210,63,4)" rx="2" ry="2" />
<text  x="74.51" y="495.5" ></text>
</g>
<g >
<title>std::unordered_map&lt;int, double, std::hash&lt;int&gt;, std::equal_to&lt;int&gt;, std::allocator&lt;std::pair&lt;int const, double&gt; &gt; &gt;::~unordered_map (1 samples, 0.03%)</title><rect x="82.5" y="373" width="0.4" height="15.0" fill="rgb(251,11,7)" rx="2" ry="2" />
<text  x="85.52" y="383.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;int, std::pair&lt;int const, int*&gt;, std::allocator&lt;std::pair&lt;int const, int*&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;int&gt;, std::hash&lt;int&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_Scoped_node::_Scoped_node&lt;std::piecewise_construct_t const&amp;, std::tuple&lt;int const&amp;&gt;, std::tuple&lt;&gt; &gt; (48 samples, 1.54%)</title><rect x="935.6" y="469" width="18.2" height="15.0" fill="rgb(229,61,52)" rx="2" ry="2" />
<text  x="938.62" y="479.5" ></text>
</g>
<g >
<title>snd_complete_urb (1 samples, 0.03%)</title><rect x="412.8" y="181" width="0.4" height="15.0" fill="rgb(250,84,51)" rx="2" ry="2" />
<text  x="415.82" y="191.5" ></text>
</g>
<g >
<title>main (2,913 samples, 93.73%)</title><rect x="81.8" y="549" width="1105.9" height="15.0" fill="rgb(250,15,3)" rx="2" ry="2" />
<text  x="84.76" y="559.5" >main</text>
</g>
<g >
<title>std::_Hashtable&lt;int, int, std::allocator&lt;int&gt;, std::__detail::_Identity, std::equal_to&lt;int&gt;, std::hash&lt;int&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, true, true&gt; &gt;::_M_bucket_index (1 samples, 0.03%)</title><rect x="1073.4" y="421" width="0.4" height="15.0" fill="rgb(230,124,48)" rx="2" ry="2" />
<text  x="1076.44" y="431.5" ></text>
</g>
<g >
<title>std::allocator_traits&lt;std::allocator&lt;std::__detail::_Hash_node_base*&gt; &gt;::allocate (13 samples, 0.42%)</title><rect x="580.3" y="373" width="4.9" height="15.0" fill="rgb(248,127,21)" rx="2" ry="2" />
<text  x="583.26" y="383.5" ></text>
</g>
<g >
<title>__usb_hcd_giveback_urb (1 samples, 0.03%)</title><rect x="958.4" y="277" width="0.4" height="15.0" fill="rgb(253,75,23)" rx="2" ry="2" />
<text  x="961.40" y="287.5" ></text>
</g>
<g >
<title>__GI___libc_malloc (107 samples, 3.44%)</title><rect x="96.2" y="341" width="40.6" height="15.0" fill="rgb(220,46,29)" rx="2" ry="2" />
<text  x="99.18" y="351.5" >__G..</text>
</g>
<g >
<title>std::_Hashtable&lt;int, std::pair&lt;int const, double&gt;, std::allocator&lt;std::pair&lt;int const, double&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;int&gt;, std::hash&lt;int&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_find_node (2 samples, 0.06%)</title><rect x="522.5" y="453" width="0.8" height="15.0" fill="rgb(252,87,19)" rx="2" ry="2" />
<text  x="525.55" y="463.5" ></text>
</g>
<g >
<title>asm_common_interrupt (1 samples, 0.03%)</title><rect x="1046.5" y="421" width="0.4" height="15.0" fill="rgb(216,111,4)" rx="2" ry="2" />
<text  x="1049.49" y="431.5" ></text>
</g>
<g >
<title>std::allocator&lt;std::__detail::_Hash_node&lt;int, false&gt; &gt;::allocate (1 samples, 0.03%)</title><rect x="67.7" y="421" width="0.4" height="15.0" fill="rgb(221,88,0)" rx="2" ry="2" />
<text  x="70.71" y="431.5" ></text>
</g>
<g >
<title>asm_common_interrupt (1 samples, 0.03%)</title><rect x="858.2" y="421" width="0.4" height="15.0" fill="rgb(232,208,31)" rx="2" ry="2" />
<text  x="861.17" y="431.5" ></text>
</g>
<g >
<title>_int_free (1 samples, 0.03%)</title><rect x="82.1" y="373" width="0.4" height="15.0" fill="rgb(223,171,16)" rx="2" ry="2" />
<text  x="85.14" y="383.5" ></text>
</g>
<g >
<title>intel_pmu_enable_all (4 samples, 0.13%)</title><rect x="59.7" y="117" width="1.6" height="15.0" fill="rgb(244,23,23)" rx="2" ry="2" />
<text  x="62.74" y="127.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;int, std::pair&lt;int const, EuclideanCoordinates&gt;, std::allocator&lt;std::pair&lt;int const, EuclideanCoordinates&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;int&gt;, std::hash&lt;int&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_rehash_aux (1 samples, 0.03%)</title><rect x="73.0" y="469" width="0.4" height="15.0" fill="rgb(246,92,50)" rx="2" ry="2" />
<text  x="76.02" y="479.5" ></text>
</g>
<g >
<title>snd_complete_urb (1 samples, 0.03%)</title><rect x="260.6" y="53" width="0.4" height="15.0" fill="rgb(226,82,20)" rx="2" ry="2" />
<text  x="263.58" y="63.5" ></text>
</g>
<g >
<title>std::_Vector_base&lt;std::chrono::duration&lt;long, std::ratio&lt;1l, 1000000000l&gt; &gt;, std::allocator&lt;std::chrono::duration&lt;long, std::ratio&lt;1l, 1000000000l&gt; &gt; &gt; &gt;::_M_allocate (13 samples, 0.42%)</title><rect x="1182.8" y="501" width="4.9" height="15.0" fill="rgb(237,191,10)" rx="2" ry="2" />
<text  x="1185.79" y="511.5" ></text>
</g>
<g >
<title>demo (3,104 samples, 99.87%)</title><rect x="10.0" y="597" width="1178.5" height="15.0" fill="rgb(237,115,46)" rx="2" ry="2" />
<text  x="13.00" y="607.5" >demo</text>
</g>
<g >
<title>std::__detail::_Hash_code_base&lt;int, int, std::__detail::_Identity, std::hash&lt;int&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, false&gt;::_M_hash_code (22 samples, 0.71%)</title><rect x="1036.2" y="405" width="8.4" height="15.0" fill="rgb(231,69,37)" rx="2" ry="2" />
<text  x="1039.24" y="415.5" ></text>
</g>
<g >
<title>__gnu_cxx::__ops::_Iter_comp_iter&lt;com::github::coderodde::pathfinders::util::HeapNodeComparator&lt;int, double&gt; &gt;::operator (15 samples, 0.48%)</title><rect x="568.9" y="421" width="5.7" height="15.0" fill="rgb(215,54,51)" rx="2" ry="2" />
<text  x="571.87" y="431.5" ></text>
</g>
<g >
<title>std::allocator&lt;std::__detail::_Hash_node_base*&gt;::allocate (33 samples, 1.06%)</title><rect x="800.1" y="373" width="12.5" height="15.0" fill="rgb(222,165,16)" rx="2" ry="2" />
<text  x="803.08" y="383.5" ></text>
</g>
<g >
<title>std::unordered_map&lt;int, double, std::hash&lt;int&gt;, std::equal_to&lt;int&gt;, std::allocator&lt;std::pair&lt;int const, double&gt; &gt; &gt;::unordered_map (97 samples, 3.12%)</title><rect x="591.6" y="325" width="36.9" height="15.0" fill="rgb(248,59,27)" rx="2" ry="2" />
<text  x="594.65" y="335.5" >std..</text>
</g>
<g >
<title>std::__detail::_Hashtable_alloc&lt;std::allocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;int const, double&gt;, false&gt; &gt; &gt;::_M_deallocate_node (34 samples, 1.09%)</title><rect x="1169.9" y="309" width="12.9" height="15.0" fill="rgb(227,143,27)" rx="2" ry="2" />
<text  x="1172.88" y="319.5" ></text>
</g>
<g >
<title>std::allocator_traits&lt;std::allocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;int const, double&gt;, false&gt; &gt; &gt;::allocate (1 samples, 0.03%)</title><rect x="48.0" y="517" width="0.3" height="15.0" fill="rgb(244,219,20)" rx="2" ry="2" />
<text  x="50.97" y="527.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;int, int, std::allocator&lt;int&gt;, std::__detail::_Identity, std::equal_to&lt;int&gt;, std::hash&lt;int&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, true, true&gt; &gt;::_M_bucket_index (10 samples, 0.32%)</title><rect x="1017.3" y="469" width="3.7" height="15.0" fill="rgb(212,97,47)" rx="2" ry="2" />
<text  x="1020.25" y="479.5" ></text>
</g>
<g >
<title>__gnu_cxx::new_allocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;int const, double&gt;, false&gt; &gt;::deallocate (34 samples, 1.09%)</title><rect x="1169.9" y="245" width="12.9" height="15.0" fill="rgb(250,200,23)" rx="2" ry="2" />
<text  x="1172.88" y="255.5" ></text>
</g>
<g >
<title>operator delete (1 samples, 0.03%)</title><rect x="857.8" y="357" width="0.4" height="15.0" fill="rgb(247,71,46)" rx="2" ry="2" />
<text  x="860.79" y="367.5" ></text>
</g>
<g >
<title>std::__detail::_Map_base&lt;int, std::pair&lt;int const, std::unordered_set&lt;int, std::hash&lt;int&gt;, std::equal_to&lt;int&gt;, std::allocator&lt;int&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;int const, std::unordered_set&lt;int, std::hash&lt;int&gt;, std::equal_to&lt;int&gt;, std::allocator&lt;int&gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;int&gt;, std::hash&lt;int&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt;, true&gt;::operator[] (3 samples, 0.10%)</title><rect x="63.2" y="501" width="1.1" height="15.0" fill="rgb(240,54,44)" rx="2" ry="2" />
<text  x="66.15" y="511.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;int, std::pair&lt;int const, std::unordered_set&lt;int, std::hash&lt;int&gt;, std::equal_to&lt;int&gt;, std::allocator&lt;int&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;int const, std::unordered_set&lt;int, std::hash&lt;int&gt;, std::equal_to&lt;int&gt;, std::allocator&lt;int&gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;int&gt;, std::hash&lt;int&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_find_before_node (86 samples, 2.77%)</title><rect x="282.6" y="437" width="32.7" height="15.0" fill="rgb(209,44,23)" rx="2" ry="2" />
<text  x="285.60" y="447.5" >st..</text>
</g>
<g >
<title>std::unordered_set&lt;int, std::hash&lt;int&gt;, std::equal_to&lt;int&gt;, std::allocator&lt;int&gt; &gt;::~unordered_set (226 samples, 7.27%)</title><rect x="420.0" y="357" width="85.8" height="15.0" fill="rgb(247,22,47)" rx="2" ry="2" />
<text  x="423.04" y="367.5" >std::unord..</text>
</g>
<g >
<title>std::__detail::_Map_base&lt;int, std::pair&lt;int const, std::unordered_map&lt;int, double, std::hash&lt;int&gt;, std::equal_to&lt;int&gt;, std::allocator&lt;std::pair&lt;int const, double&gt; &gt; &gt; &gt;, std::allocator&lt;std::pair&lt;int const, std::unordered_map&lt;int, double, std::hash&lt;int&gt;, std::equal_to&lt;int&gt;, std::allocator&lt;std::pair&lt;int const, double&gt; &gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;int&gt;, std::hash&lt;int&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt;, true&gt;::operator[] (1 samples, 0.03%)</title><rect x="81.4" y="565" width="0.4" height="15.0" fill="rgb(239,186,53)" rx="2" ry="2" />
<text  x="84.38" y="575.5" ></text>
</g>
<g >
<title>perf_pmu_enable.part.0 (1 samples, 0.03%)</title><rect x="579.9" y="245" width="0.4" height="15.0" fill="rgb(238,13,46)" rx="2" ry="2" />
<text  x="582.88" y="255.5" ></text>
</g>
<g >
<title>checked_request2size (1 samples, 0.03%)</title><rect x="261.0" y="181" width="0.3" height="15.0" fill="rgb(220,209,35)" rx="2" ry="2" />
<text  x="263.96" y="191.5" ></text>
</g>
<g >
<title>usb_giveback_urb_bh (1 samples, 0.03%)</title><rect x="134.2" y="213" width="0.3" height="15.0" fill="rgb(249,177,21)" rx="2" ry="2" />
<text  x="137.15" y="223.5" ></text>
</g>
<g >
<title>_int_malloc (191 samples, 6.15%)</title><rect x="191.5" y="197" width="72.5" height="15.0" fill="rgb(247,209,11)" rx="2" ry="2" />
<text  x="194.48" y="207.5" >_int_mal..</text>
</g>
<g >
<title>std::_Hashtable&lt;int, std::pair&lt;int const, double&gt;, std::allocator&lt;std::pair&lt;int const, double&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;int&gt;, std::hash&lt;int&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_deallocate_buckets (28 samples, 0.90%)</title><rect x="832.7" y="469" width="10.7" height="15.0" fill="rgb(205,227,32)" rx="2" ry="2" />
<text  x="835.73" y="479.5" ></text>
</g>
<g >
<title>snd_complete_urb (1 samples, 0.03%)</title><rect x="829.7" y="213" width="0.4" height="15.0" fill="rgb(247,196,25)" rx="2" ry="2" />
<text  x="832.70" y="223.5" ></text>
</g>
<g >
<title>com::github::coderodde::directed_graph::DirectedGraphWeightFunction&lt;int, double&gt;::getWeight (1 samples, 0.03%)</title><rect x="36.6" y="565" width="0.4" height="15.0" fill="rgb(213,74,49)" rx="2" ry="2" />
<text  x="39.58" y="575.5" ></text>
</g>
<g >
<title>std::equal_to&lt;int&gt;::operator (1 samples, 0.03%)</title><rect x="72.6" y="453" width="0.4" height="15.0" fill="rgb(240,222,16)" rx="2" ry="2" />
<text  x="75.64" y="463.5" ></text>
</g>
<g >
<title>__softirqentry_text_start (1 samples, 0.03%)</title><rect x="526.3" y="357" width="0.4" height="15.0" fill="rgb(232,115,29)" rx="2" ry="2" />
<text  x="529.34" y="367.5" ></text>
</g>
<g >
<title>tasklet_action_common.isra.0 (1 samples, 0.03%)</title><rect x="526.3" y="325" width="0.4" height="15.0" fill="rgb(238,158,45)" rx="2" ry="2" />
<text  x="529.34" y="335.5" ></text>
</g>
<g >
<title>operator new (2 samples, 0.06%)</title><rect x="1089.8" y="373" width="0.7" height="15.0" fill="rgb(215,224,46)" rx="2" ry="2" />
<text  x="1092.77" y="383.5" ></text>
</g>
<g >
<title>__gnu_cxx::new_allocator&lt;std::__detail::_Hash_node_base*&gt;::deallocate (9 samples, 0.29%)</title><rect x="1158.1" y="261" width="3.4" height="15.0" fill="rgb(248,134,44)" rx="2" ry="2" />
<text  x="1161.11" y="271.5" ></text>
</g>
<g >
<title>std::__detail::_Hashtable_alloc&lt;std::allocator&lt;std::__detail::_Hash_node&lt;int, false&gt; &gt; &gt;::_M_deallocate_node (6 samples, 0.19%)</title><rect x="44.9" y="405" width="2.3" height="15.0" fill="rgb(218,167,36)" rx="2" ry="2" />
<text  x="47.93" y="415.5" ></text>
</g>
<g >
<title>__softirqentry_text_start (1 samples, 0.03%)</title><rect x="412.8" y="261" width="0.4" height="15.0" fill="rgb(233,141,34)" rx="2" ry="2" />
<text  x="415.82" y="271.5" ></text>
</g>
<g >
<title>std::__detail::_Hashtable_alloc&lt;std::allocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;int const, std::unordered_set&lt;int, std::hash&lt;int&gt;, std::equal_to&lt;int&gt;, std::allocator&lt;int&gt; &gt; &gt;, false&gt; &gt; &gt;::_M_deallocate_node_ptr (16 samples, 0.51%)</title><rect x="414.0" y="405" width="6.0" height="15.0" fill="rgb(228,150,27)" rx="2" ry="2" />
<text  x="416.96" y="415.5" ></text>
</g>
<g >
<title>std::allocator&lt;std::__detail::_Hash_node_base*&gt;::allocate (1 samples, 0.03%)</title><rect x="68.5" y="293" width="0.3" height="15.0" fill="rgb(250,64,2)" rx="2" ry="2" />
<text  x="71.47" y="303.5" ></text>
</g>
<g >
<title>tcache_put (3 samples, 0.10%)</title><rect x="261.7" y="181" width="1.2" height="15.0" fill="rgb(209,196,44)" rx="2" ry="2" />
<text  x="264.72" y="191.5" ></text>
</g>
<g >
<title>usb_submit_urb (1 samples, 0.03%)</title><rect x="772.7" y="165" width="0.4" height="15.0" fill="rgb(244,128,11)" rx="2" ry="2" />
<text  x="775.75" y="175.5" ></text>
</g>
<g >
<title>usb_giveback_urb_bh (1 samples, 0.03%)</title><rect x="419.7" y="229" width="0.3" height="15.0" fill="rgb(227,185,33)" rx="2" ry="2" />
<text  x="422.66" y="239.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;int, std::pair&lt;int const, std::unordered_set&lt;int, std::hash&lt;int&gt;, std::equal_to&lt;int&gt;, std::allocator&lt;int&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;int const, std::unordered_set&lt;int, std::hash&lt;int&gt;, std::equal_to&lt;int&gt;, std::allocator&lt;int&gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;int&gt;, std::hash&lt;int&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_deallocate_buckets (1 samples, 0.03%)</title><rect x="81.8" y="453" width="0.3" height="15.0" fill="rgb(251,45,41)" rx="2" ry="2" />
<text  x="84.76" y="463.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;int, std::pair&lt;int const, double&gt;, std::allocator&lt;std::pair&lt;int const, double&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;int&gt;, std::hash&lt;int&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::clear (2 samples, 0.06%)</title><rect x="48.7" y="437" width="0.8" height="15.0" fill="rgb(221,79,6)" rx="2" ry="2" />
<text  x="51.73" y="447.5" ></text>
</g>
<g >
<title>std::__detail::_Hashtable_alloc&lt;std::allocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;int const, std::unordered_map&lt;int, double, std::hash&lt;int&gt;, std::equal_to&lt;int&gt;, std::allocator&lt;std::pair&lt;int const, double&gt; &gt; &gt; &gt;, false&gt; &gt; &gt;::_M_allocate_buckets (13 samples, 0.42%)</title><rect x="580.3" y="389" width="4.9" height="15.0" fill="rgb(248,127,35)" rx="2" ry="2" />
<text  x="583.26" y="399.5" ></text>
</g>
<g >
<title>__usb_hcd_giveback_urb (1 samples, 0.03%)</title><rect x="1046.5" y="309" width="0.4" height="15.0" fill="rgb(228,142,34)" rx="2" ry="2" />
<text  x="1049.49" y="319.5" ></text>
</g>
<g >
<title>sync_regs (1 samples, 0.03%)</title><rect x="505.5" y="213" width="0.3" height="15.0" fill="rgb(246,68,34)" rx="2" ry="2" />
<text  x="508.46" y="223.5" ></text>
</g>
<g >
<title>std::allocator_traits&lt;std::allocator&lt;std::__detail::_Hash_node&lt;int, false&gt; &gt; &gt;::allocate (2 samples, 0.06%)</title><rect x="26.7" y="517" width="0.8" height="15.0" fill="rgb(252,123,6)" rx="2" ry="2" />
<text  x="29.71" y="527.5" ></text>
</g>
<g >
<title>std::priority_queue&lt;com::github::coderodde::pathfinders::util::HeapNode&lt;int, double&gt;*, std::vector&lt;com::github::coderodde::pathfinders::util::HeapNode&lt;int, double&gt;*, std::allocator&lt;com::github::coderodde::pathfinders::util::HeapNode&lt;int, double&gt;*&gt; &gt;, com::github::coderodde::pathfinders::util::HeapNodeComparator&lt;int, double&gt; &gt;::push (50 samples, 1.61%)</title><rect x="754.1" y="501" width="19.0" height="15.0" fill="rgb(209,10,20)" rx="2" ry="2" />
<text  x="757.14" y="511.5" ></text>
</g>
<g >
<title>com::github::coderodde::pathfinders::util::Path&lt;int, double&gt;::Path (141 samples, 4.54%)</title><rect x="574.9" y="485" width="53.6" height="15.0" fill="rgb(221,82,47)" rx="2" ry="2" />
<text  x="577.94" y="495.5" >com::..</text>
</g>
<g >
<title>std::__detail::_Map_base&lt;int, std::pair&lt;int const, double&gt;, std::allocator&lt;std::pair&lt;int const, double&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;int&gt;, std::hash&lt;int&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt;, true&gt;::operator[] (1 samples, 0.03%)</title><rect x="48.0" y="565" width="0.3" height="15.0" fill="rgb(222,217,16)" rx="2" ry="2" />
<text  x="50.97" y="575.5" ></text>
</g>
<g >
<title>malloc_consolidate (13 samples, 0.42%)</title><rect x="1182.8" y="389" width="4.9" height="15.0" fill="rgb(226,94,25)" rx="2" ry="2" />
<text  x="1185.79" y="399.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_node&lt;std::pair&lt;int const, int*&gt;, false&gt;::_Hash_node (1 samples, 0.03%)</title><rect x="935.6" y="437" width="0.4" height="15.0" fill="rgb(245,217,17)" rx="2" ry="2" />
<text  x="938.62" y="447.5" ></text>
</g>
<g >
<title>[demo] (1 samples, 0.03%)</title><rect x="85.9" y="501" width="0.4" height="15.0" fill="rgb(227,19,48)" rx="2" ry="2" />
<text  x="88.93" y="511.5" ></text>
</g>
<g >
<title>std::__detail::_Hashtable_alloc&lt;std::allocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;int const, std::unordered_set&lt;int, std::hash&lt;int&gt;, std::equal_to&lt;int&gt;, std::allocator&lt;int&gt; &gt; &gt;, false&gt; &gt; &gt;::_M_deallocate_buckets (1 samples, 0.03%)</title><rect x="81.8" y="437" width="0.3" height="15.0" fill="rgb(208,212,7)" rx="2" ry="2" />
<text  x="84.76" y="447.5" ></text>
</g>
<g >
<title>__softirqentry_text_start (1 samples, 0.03%)</title><rect x="799.7" y="373" width="0.4" height="15.0" fill="rgb(222,120,38)" rx="2" ry="2" />
<text  x="802.70" y="383.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;int, std::pair&lt;int const, std::unordered_map&lt;int, double, std::hash&lt;int&gt;, std::equal_to&lt;int&gt;, std::allocator&lt;std::pair&lt;int const, double&gt; &gt; &gt; &gt;, std::allocator&lt;std::pair&lt;int const, std::unordered_map&lt;int, double, std::hash&lt;int&gt;, std::equal_to&lt;int&gt;, std::allocator&lt;std::pair&lt;int const, double&gt; &gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;int&gt;, std::hash&lt;int&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_deallocate_buckets (113 samples, 3.64%)</title><rect x="1111.0" y="469" width="42.9" height="15.0" fill="rgb(229,90,33)" rx="2" ry="2" />
<text  x="1114.03" y="479.5" >std:..</text>
</g>
<g >
<title>std::vector&lt;com::github::coderodde::pathfinders::util::HeapNode&lt;int, double&gt;*, std::allocator&lt;com::github::coderodde::pathfinders::util::HeapNode&lt;int, double&gt;*&gt; &gt;::begin (1 samples, 0.03%)</title><rect x="548.7" y="453" width="0.4" height="15.0" fill="rgb(211,141,40)" rx="2" ry="2" />
<text  x="551.75" y="463.5" ></text>
</g>
<g >
<title>std::__detail::_Hashtable_alloc&lt;std::allocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;int const, int*&gt;, false&gt; &gt; &gt;::_M_deallocate_node (12 samples, 0.39%)</title><rect x="1012.3" y="437" width="4.6" height="15.0" fill="rgb(254,157,11)" rx="2" ry="2" />
<text  x="1015.32" y="447.5" ></text>
</g>
<g >
<title>usb_submit_urb (1 samples, 0.03%)</title><rect x="956.9" y="309" width="0.4" height="15.0" fill="rgb(214,48,18)" rx="2" ry="2" />
<text  x="959.89" y="319.5" ></text>
</g>
<g >
<title>task_work_run (1 samples, 0.03%)</title><rect x="1187.7" y="501" width="0.4" height="15.0" fill="rgb(217,178,30)" rx="2" ry="2" />
<text  x="1190.72" y="511.5" ></text>
</g>
<g >
<title>__GI___libc_malloc (23 samples, 0.74%)</title><rect x="10.0" y="565" width="8.7" height="15.0" fill="rgb(251,157,48)" rx="2" ry="2" />
<text  x="13.00" y="575.5" ></text>
</g>
<g >
<title>std::allocator_traits&lt;std::allocator&lt;std::__detail::_Hash_node_base*&gt; &gt;::deallocate (21 samples, 0.68%)</title><rect x="1090.5" y="421" width="8.0" height="15.0" fill="rgb(243,96,28)" rx="2" ry="2" />
<text  x="1093.53" y="431.5" ></text>
</g>
<g >
<title>common_interrupt (1 samples, 0.03%)</title><rect x="526.3" y="389" width="0.4" height="15.0" fill="rgb(218,91,0)" rx="2" ry="2" />
<text  x="529.34" y="399.5" ></text>
</g>
<g >
<title>__memset_avx2_unaligned_erms (3 samples, 0.10%)</title><rect x="1161.5" y="325" width="1.2" height="15.0" fill="rgb(210,3,16)" rx="2" ry="2" />
<text  x="1164.53" y="335.5" ></text>
</g>
<g >
<title>_int_malloc (15 samples, 0.48%)</title><rect x="53.7" y="565" width="5.7" height="15.0" fill="rgb(223,173,28)" rx="2" ry="2" />
<text  x="56.66" y="575.5" ></text>
</g>
<g >
<title>usb_giveback_urb_bh (2 samples, 0.06%)</title><rect x="392.3" y="229" width="0.8" height="15.0" fill="rgb(220,214,5)" rx="2" ry="2" />
<text  x="395.32" y="239.5" ></text>
</g>
<g >
<title>std::construct_at&lt;int, int const&amp;&gt; (4 samples, 0.13%)</title><rect x="265.5" y="261" width="1.5" height="15.0" fill="rgb(243,112,4)" rx="2" ry="2" />
<text  x="268.51" y="271.5" ></text>
</g>
<g >
<title>asm_common_interrupt (2 samples, 0.06%)</title><rect x="958.0" y="389" width="0.8" height="15.0" fill="rgb(230,154,9)" rx="2" ry="2" />
<text  x="961.02" y="399.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_code_base&lt;int, std::pair&lt;int const, double&gt;, std::__detail::_Select1st, std::hash&lt;int&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, false&gt;::_M_bucket_index (1 samples, 0.03%)</title><rect x="773.9" y="453" width="0.4" height="15.0" fill="rgb(245,92,3)" rx="2" ry="2" />
<text  x="776.89" y="463.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;int, int, std::allocator&lt;int&gt;, std::__detail::_Identity, std::equal_to&lt;int&gt;, std::hash&lt;int&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, true, true&gt; &gt;::_M_find_before_node (120 samples, 3.86%)</title><rect x="1021.4" y="453" width="45.6" height="15.0" fill="rgb(230,40,8)" rx="2" ry="2" />
<text  x="1024.43" y="463.5" >std:..</text>
</g>
<g >
<title>usb_hcd_submit_urb (1 samples, 0.03%)</title><rect x="772.7" y="149" width="0.4" height="15.0" fill="rgb(213,184,30)" rx="2" ry="2" />
<text  x="775.75" y="159.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;int, std::pair&lt;int const, double&gt;, std::allocator&lt;std::pair&lt;int const, double&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;int&gt;, std::hash&lt;int&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_assign&lt;std::_Hashtable&lt;int, std::pair&lt;int const, double&gt;, std::allocator&lt;std::pair&lt;int const, double&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;int&gt;, std::hash&lt;int&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt; const&amp;, std::__detail::_AllocNode&lt;std::allocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;int const, double&gt;, false&gt; &gt; &gt; &gt; (96 samples, 3.09%)</title><rect x="592.0" y="293" width="36.5" height="15.0" fill="rgb(207,228,25)" rx="2" ry="2" />
<text  x="595.03" y="303.5" >std..</text>
</g>
<g >
<title>std::__detail::_Hashtable_base&lt;int, std::pair&lt;int const, double&gt;, std::__detail::_Select1st, std::equal_to&lt;int&gt;, std::hash&lt;int&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_equals (22 samples, 0.71%)</title><rect x="781.9" y="437" width="8.3" height="15.0" fill="rgb(250,127,35)" rx="2" ry="2" />
<text  x="784.86" y="447.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_node&lt;std::pair&lt;int const, double&gt;, false&gt;::_M_next (18 samples, 0.58%)</title><rect x="1163.0" y="309" width="6.9" height="15.0" fill="rgb(229,196,1)" rx="2" ry="2" />
<text  x="1166.04" y="319.5" ></text>
</g>
<g >
<title>[libstdc++.so.6.0.29] (2 samples, 0.06%)</title><rect x="547.2" y="485" width="0.8" height="15.0" fill="rgb(245,130,25)" rx="2" ry="2" />
<text  x="550.23" y="495.5" ></text>
</g>
<g >
<title>std::__detail::_AllocNode&lt;std::allocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;int const, std::unordered_set&lt;int, std::hash&lt;int&gt;, std::equal_to&lt;int&gt;, std::allocator&lt;int&gt; &gt; &gt;, false&gt; &gt; &gt;::operator (3 samples, 0.10%)</title><rect x="43.0" y="549" width="1.2" height="15.0" fill="rgb(251,146,22)" rx="2" ry="2" />
<text  x="46.03" y="559.5" ></text>
</g>
<g >
<title>begin_new_exec (4 samples, 0.13%)</title><rect x="1188.5" y="469" width="1.5" height="15.0" fill="rgb(247,155,33)" rx="2" ry="2" />
<text  x="1191.48" y="479.5" ></text>
</g>
<g >
<title>unlink_chunk (48 samples, 1.54%)</title><rect x="1135.7" y="341" width="18.2" height="15.0" fill="rgb(232,154,48)" rx="2" ry="2" />
<text  x="1138.71" y="351.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_code_base&lt;int, int, std::__detail::_Identity, std::hash&lt;int&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, false&gt;::_M_bucket_index (1 samples, 0.03%)</title><rect x="1073.4" y="405" width="0.4" height="15.0" fill="rgb(222,75,46)" rx="2" ry="2" />
<text  x="1076.44" y="415.5" ></text>
</g>
<g >
<title>handle_edge_irq (1 samples, 0.03%)</title><rect x="1046.1" y="341" width="0.4" height="15.0" fill="rgb(209,94,23)" rx="2" ry="2" />
<text  x="1049.11" y="351.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;int, std::pair&lt;int const, std::unordered_map&lt;int, double, std::hash&lt;int&gt;, std::equal_to&lt;int&gt;, std::allocator&lt;std::pair&lt;int const, double&gt; &gt; &gt; &gt;, std::allocator&lt;std::pair&lt;int const, std::unordered_map&lt;int, double, std::hash&lt;int&gt;, std::equal_to&lt;int&gt;, std::allocator&lt;std::pair&lt;int const, double&gt; &gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;int&gt;, std::hash&lt;int&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_Hashtable (1 samples, 0.03%)</title><rect x="42.7" y="565" width="0.3" height="15.0" fill="rgb(233,170,3)" rx="2" ry="2" />
<text  x="45.65" y="575.5" ></text>
</g>
<g >
<title>std::__detail::_Hashtable_alloc&lt;std::allocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;int const, double&gt;, false&gt; &gt; &gt;::_M_deallocate_node_ptr (8 samples, 0.26%)</title><rect x="855.1" y="421" width="3.1" height="15.0" fill="rgb(236,203,2)" rx="2" ry="2" />
<text  x="858.14" y="431.5" ></text>
</g>
<g >
<title>std::__detail::_Mod_range_hashing::operator (4 samples, 0.13%)</title><rect x="916.3" y="405" width="1.5" height="15.0" fill="rgb(213,72,52)" rx="2" ry="2" />
<text  x="919.26" y="415.5" ></text>
</g>
<g >
<title>usb_hcd_get_frame_number (1 samples, 0.03%)</title><rect x="134.2" y="133" width="0.3" height="15.0" fill="rgb(238,219,36)" rx="2" ry="2" />
<text  x="137.15" y="143.5" ></text>
</g>
<g >
<title>[[stack]] (55 samples, 1.77%)</title><rect x="27.8" y="581" width="20.9" height="15.0" fill="rgb(237,99,43)" rx="2" ry="2" />
<text  x="30.84" y="591.5" ></text>
</g>
<g >
<title>[demo] (1 samples, 0.03%)</title><rect x="478.5" y="213" width="0.4" height="15.0" fill="rgb(212,95,13)" rx="2" ry="2" />
<text  x="481.51" y="223.5" ></text>
</g>
<g >
<title>tasklet_hi_action (1 samples, 0.03%)</title><rect x="956.9" y="389" width="0.4" height="15.0" fill="rgb(209,150,10)" rx="2" ry="2" />
<text  x="959.89" y="399.5" ></text>
</g>
<g >
<title>__memset_avx2_unaligned_erms (1 samples, 0.03%)</title><rect x="28.6" y="565" width="0.4" height="15.0" fill="rgb(233,110,19)" rx="2" ry="2" />
<text  x="31.60" y="575.5" ></text>
</g>
<g >
<title>perf_pmu_enable.part.0 (4 samples, 0.13%)</title><rect x="1188.5" y="421" width="1.5" height="15.0" fill="rgb(243,153,7)" rx="2" ry="2" />
<text  x="1191.48" y="431.5" ></text>
</g>
<g >
<title>asm_common_interrupt (1 samples, 0.03%)</title><rect x="829.7" y="341" width="0.4" height="15.0" fill="rgb(219,125,26)" rx="2" ry="2" />
<text  x="832.70" y="351.5" ></text>
</g>
<g >
<title>std::__detail::_AllocNode&lt;std::allocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;int const, double&gt;, false&gt; &gt; &gt;::operator (3 samples, 0.10%)</title><rect x="68.8" y="341" width="1.2" height="15.0" fill="rgb(213,24,38)" rx="2" ry="2" />
<text  x="71.85" y="351.5" ></text>
</g>
<g >
<title>_int_malloc (38 samples, 1.22%)</title><rect x="758.7" y="325" width="14.4" height="15.0" fill="rgb(252,101,19)" rx="2" ry="2" />
<text  x="761.70" y="335.5" ></text>
</g>
<g >
<title>tasklet_action_common.isra.0 (1 samples, 0.03%)</title><rect x="829.7" y="261" width="0.4" height="15.0" fill="rgb(237,229,27)" rx="2" ry="2" />
<text  x="832.70" y="271.5" ></text>
</g>
<g >
<title>std::allocator_traits&lt;std::allocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;int const, double&gt;, false&gt; &gt; &gt;::deallocate (34 samples, 1.09%)</title><rect x="1169.9" y="277" width="12.9" height="15.0" fill="rgb(233,78,35)" rx="2" ry="2" />
<text  x="1172.88" y="287.5" ></text>
</g>
<g >
<title>std::allocator_traits&lt;std::allocator&lt;std::__detail::_Hash_node&lt;int, false&gt; &gt; &gt;::deallocate (8 samples, 0.26%)</title><rect x="511.2" y="389" width="3.0" height="15.0" fill="rgb(220,167,48)" rx="2" ry="2" />
<text  x="514.16" y="399.5" ></text>
</g>
<g >
<title>xhci_irq (1 samples, 0.03%)</title><rect x="139.8" y="181" width="0.4" height="15.0" fill="rgb(230,224,2)" rx="2" ry="2" />
<text  x="142.85" y="191.5" ></text>
</g>
<g >
<title>__usb_hcd_giveback_urb (1 samples, 0.03%)</title><rect x="829.7" y="229" width="0.4" height="15.0" fill="rgb(228,24,52)" rx="2" ry="2" />
<text  x="832.70" y="239.5" ></text>
</g>
<g >
<title>xhci_queue_isoc_tx_prepare (1 samples, 0.03%)</title><rect x="958.4" y="197" width="0.4" height="15.0" fill="rgb(222,100,18)" rx="2" ry="2" />
<text  x="961.40" y="207.5" ></text>
</g>
<g >
<title>unlink_chunk (6 samples, 0.19%)</title><rect x="830.1" y="341" width="2.3" height="15.0" fill="rgb(218,114,7)" rx="2" ry="2" />
<text  x="833.08" y="351.5" ></text>
</g>
<g >
<title>usb_get_current_frame_number (1 samples, 0.03%)</title><rect x="134.2" y="149" width="0.3" height="15.0" fill="rgb(234,182,4)" rx="2" ry="2" />
<text  x="137.15" y="159.5" ></text>
</g>
<g >
<title>std::pop_heap&lt;__gnu_cxx::__normal_iterator&lt;com::github::coderodde::pathfinders::util::HeapNode&lt;int, double&gt;**, std::vector&lt;com::github::coderodde::pathfinders::util::HeapNode&lt;int, double&gt;*, std::allocator&lt;com::github::coderodde::pathfinders::util::HeapNode&lt;int, double&gt;*&gt; &gt; &gt;, com::github::coderodde::pathfinders::util::HeapNodeComparator&lt;int, double&gt; &gt; (226 samples, 7.27%)</title><rect x="668.3" y="485" width="85.8" height="15.0" fill="rgb(221,226,32)" rx="2" ry="2" />
<text  x="671.34" y="495.5" >std::pop_h..</text>
</g>
<g >
<title>std::__detail::_Mod_range_hashing::operator (1 samples, 0.03%)</title><rect x="604.2" y="213" width="0.4" height="15.0" fill="rgb(250,96,9)" rx="2" ry="2" />
<text  x="607.18" y="223.5" ></text>
</g>
<g >
<title>_raw_spin_lock (1 samples, 0.03%)</title><rect x="1046.1" y="261" width="0.4" height="15.0" fill="rgb(238,225,26)" rx="2" ry="2" />
<text  x="1049.11" y="271.5" ></text>
</g>
<g >
<title>__mod_lruvec_state (1 samples, 0.03%)</title><rect x="1188.1" y="373" width="0.4" height="15.0" fill="rgb(246,84,14)" rx="2" ry="2" />
<text  x="1191.10" y="383.5" ></text>
</g>
<g >
<title>tick_sched_timer (1 samples, 0.03%)</title><rect x="579.9" y="325" width="0.4" height="15.0" fill="rgb(245,136,18)" rx="2" ry="2" />
<text  x="582.88" y="335.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;int, std::pair&lt;int const, double&gt;, std::allocator&lt;std::pair&lt;int const, double&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;int&gt;, std::hash&lt;int&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_insert_unique_node (87 samples, 2.80%)</title><rect x="790.2" y="469" width="33.0" height="15.0" fill="rgb(210,19,9)" rx="2" ry="2" />
<text  x="793.21" y="479.5" >st..</text>
</g>
<g >
<title>__softirqentry_text_start (2 samples, 0.06%)</title><rect x="840.3" y="293" width="0.8" height="15.0" fill="rgb(228,143,1)" rx="2" ry="2" />
<text  x="843.33" y="303.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;int, std::pair&lt;int const, double&gt;, std::allocator&lt;std::pair&lt;int const, double&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;int&gt;, std::hash&lt;int&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_rehash (86 samples, 2.77%)</title><rect x="790.6" y="453" width="32.6" height="15.0" fill="rgb(243,200,45)" rx="2" ry="2" />
<text  x="793.59" y="463.5" >st..</text>
</g>
<g >
<title>operator new (2 samples, 0.06%)</title><rect x="41.9" y="565" width="0.8" height="15.0" fill="rgb(232,197,46)" rx="2" ry="2" />
<text  x="44.89" y="575.5" ></text>
</g>
<g >
<title>std::unordered_map&lt;int, std::unordered_map&lt;int, double, std::hash&lt;int&gt;, std::equal_to&lt;int&gt;, std::allocator&lt;std::pair&lt;int const, double&gt; &gt; &gt;, std::hash&lt;int&gt;, std::equal_to&lt;int&gt;, std::allocator&lt;std::pair&lt;int const, std::unordered_map&lt;int, double, std::hash&lt;int&gt;, std::equal_to&lt;int&gt;, std::allocator&lt;std::pair&lt;int const, double&gt; &gt; &gt; &gt; &gt; &gt;::contains (23 samples, 0.74%)</title><rect x="523.7" y="485" width="8.7" height="15.0" fill="rgb(220,190,8)" rx="2" ry="2" />
<text  x="526.69" y="495.5" ></text>
</g>
<g >
<title>std::__detail::_Mod_range_hashing::operator (1 samples, 0.03%)</title><rect x="268.2" y="405" width="0.4" height="15.0" fill="rgb(243,80,20)" rx="2" ry="2" />
<text  x="271.17" y="415.5" ></text>
</g>
<g >
<title>std::unordered_map&lt;int, std::unordered_map&lt;int, double, std::hash&lt;int&gt;, std::equal_to&lt;int&gt;, std::allocator&lt;std::pair&lt;int const, double&gt; &gt; &gt;, std::hash&lt;int&gt;, std::equal_to&lt;int&gt;, std::allocator&lt;std::pair&lt;int const, std::unordered_map&lt;int, double, std::hash&lt;int&gt;, std::equal_to&lt;int&gt;, std::allocator&lt;std::pair&lt;int const, double&gt; &gt; &gt; &gt; &gt; &gt;::operator[] (1 samples, 0.03%)</title><rect x="36.6" y="549" width="0.4" height="15.0" fill="rgb(245,169,47)" rx="2" ry="2" />
<text  x="39.58" y="559.5" ></text>
</g>
<g >
<title>std::__adjust_heap&lt;__gnu_cxx::__normal_iterator&lt;com::github::coderodde::pathfinders::util::HeapNode&lt;int, double&gt;**, std::vector&lt;com::github::coderodde::pathfinders::util::HeapNode&lt;int, double&gt;*, std::allocator&lt;com::github::coderodde::pathfinders::util::HeapNode&lt;int, double&gt;*&gt; &gt; &gt;, long, com::github::coderodde::pathfinders::util::HeapNode&lt;int, double&gt;*, __gnu_cxx::__ops::_Iter_comp_iter&lt;com::github::coderodde::pathfinders::util::HeapNodeComparator&lt;int, double&gt; &gt; &gt; (68 samples, 2.19%)</title><rect x="549.1" y="437" width="25.8" height="15.0" fill="rgb(254,40,43)" rx="2" ry="2" />
<text  x="552.12" y="447.5" >s..</text>
</g>
<g >
<title>std::_Hashtable&lt;int, int, std::allocator&lt;int&gt;, std::__detail::_Identity, std::equal_to&lt;int&gt;, std::hash&lt;int&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, true, true&gt; &gt;::_M_find_node (121 samples, 3.89%)</title><rect x="1021.0" y="469" width="46.0" height="15.0" fill="rgb(225,177,12)" rx="2" ry="2" />
<text  x="1024.05" y="479.5" >std:..</text>
</g>
<g >
<title>std::_Hashtable&lt;int, std::pair&lt;int const, std::unordered_map&lt;int, double, std::hash&lt;int&gt;, std::equal_to&lt;int&gt;, std::allocator&lt;std::pair&lt;int const, double&gt; &gt; &gt; &gt;, std::allocator&lt;std::pair&lt;int const, std::unordered_map&lt;int, double, std::hash&lt;int&gt;, std::equal_to&lt;int&gt;, std::allocator&lt;std::pair&lt;int const, double&gt; &gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;int&gt;, std::hash&lt;int&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_find_before_node (5 samples, 0.16%)</title><rect x="532.8" y="437" width="1.9" height="15.0" fill="rgb(206,127,21)" rx="2" ry="2" />
<text  x="535.80" y="447.5" ></text>
</g>
<g >
<title>std::__detail::_Hashtable_alloc&lt;std::allocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;int const, double&gt;, false&gt; &gt; &gt;::_M_allocate_node&lt;std::pair&lt;int const, double&gt; const&amp;&gt; (3 samples, 0.10%)</title><rect x="68.8" y="325" width="1.2" height="15.0" fill="rgb(206,192,50)" rx="2" ry="2" />
<text  x="71.85" y="335.5" ></text>
</g>
<g >
<title>std::allocator_traits&lt;std::allocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;int const, std::unordered_map&lt;int, double, std::hash&lt;int&gt;, std::equal_to&lt;int&gt;, std::allocator&lt;std::pair&lt;int const, double&gt; &gt; &gt; &gt;, false&gt; &gt; &gt;::construct&lt;std::pair&lt;int const, std::unordered_map&lt;int, double, std::hash&lt;int&gt;, std::equal_to&lt;int&gt;, std::allocator&lt;std::pair&lt;int const, double&gt; &gt; &gt; &gt;, std::pair&lt;int const, std::unordered_map&lt;int, double, std::hash&lt;int&gt;, std::equal_to&lt;int&gt;, std::allocator&lt;std::pair&lt;int const, double&gt; &gt; &gt; &gt; const&amp;&gt; (4 samples, 0.13%)</title><rect x="68.5" y="437" width="1.5" height="15.0" fill="rgb(205,106,20)" rx="2" ry="2" />
<text  x="71.47" y="447.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;int, std::pair&lt;int const, double&gt;, std::allocator&lt;std::pair&lt;int const, double&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;int&gt;, std::hash&lt;int&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_bucket_index (1 samples, 0.03%)</title><rect x="773.9" y="469" width="0.4" height="15.0" fill="rgb(221,73,0)" rx="2" ry="2" />
<text  x="776.89" y="479.5" ></text>
</g>
<g >
<title>__gnu_cxx::new_allocator&lt;std::__detail::_Hash_node_base*&gt;::deallocate (9 samples, 0.29%)</title><rect x="505.8" y="373" width="3.5" height="15.0" fill="rgb(218,193,10)" rx="2" ry="2" />
<text  x="508.84" y="383.5" ></text>
</g>
<g >
<title>do_anonymous_page (1 samples, 0.03%)</title><rect x="68.1" y="261" width="0.4" height="15.0" fill="rgb(235,1,35)" rx="2" ry="2" />
<text  x="71.09" y="271.5" ></text>
</g>
<g >
<title>malloc_consolidate (1 samples, 0.03%)</title><rect x="82.1" y="357" width="0.4" height="15.0" fill="rgb(224,119,16)" rx="2" ry="2" />
<text  x="85.14" y="367.5" ></text>
</g>
<g >
<title>__x64_sys_exit_group (1 samples, 0.03%)</title><rect x="1188.1" y="549" width="0.4" height="15.0" fill="rgb(233,17,48)" rx="2" ry="2" />
<text  x="1191.10" y="559.5" ></text>
</g>
<g >
<title>std::unordered_map&lt;int, std::unordered_set&lt;int, std::hash&lt;int&gt;, std::equal_to&lt;int&gt;, std::allocator&lt;int&gt; &gt;, std::hash&lt;int&gt;, std::equal_to&lt;int&gt;, std::allocator&lt;std::pair&lt;int const, std::unordered_set&lt;int, std::hash&lt;int&gt;, std::equal_to&lt;int&gt;, std::allocator&lt;int&gt; &gt; &gt; &gt; &gt;::~unordered_map (1 samples, 0.03%)</title><rect x="81.8" y="501" width="0.3" height="15.0" fill="rgb(225,210,28)" rx="2" ry="2" />
<text  x="84.76" y="511.5" ></text>
</g>
<g >
<title>unlink_chunk (3 samples, 0.10%)</title><rect x="262.9" y="181" width="1.1" height="15.0" fill="rgb(251,147,30)" rx="2" ry="2" />
<text  x="265.86" y="191.5" ></text>
</g>
<g >
<title>usb_giveback_urb_bh (1 samples, 0.03%)</title><rect x="772.7" y="213" width="0.4" height="15.0" fill="rgb(212,78,52)" rx="2" ry="2" />
<text  x="775.75" y="223.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_code_base&lt;int, std::pair&lt;int const, double&gt;, std::__detail::_Select1st, std::hash&lt;int&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, false&gt;::_M_bucket_index (7 samples, 0.23%)</title><rect x="514.2" y="437" width="2.7" height="15.0" fill="rgb(211,197,27)" rx="2" ry="2" />
<text  x="517.20" y="447.5" ></text>
</g>
<g >
<title>handle_irq_event_percpu (1 samples, 0.03%)</title><rect x="139.8" y="229" width="0.4" height="15.0" fill="rgb(209,144,1)" rx="2" ry="2" />
<text  x="142.85" y="239.5" ></text>
</g>
<g >
<title>xhci_queue_isoc_tx_prepare (2 samples, 0.06%)</title><rect x="392.3" y="133" width="0.8" height="15.0" fill="rgb(223,50,42)" rx="2" ry="2" />
<text  x="395.32" y="143.5" ></text>
</g>
<g >
<title>std::allocator_traits&lt;std::allocator&lt;std::__detail::_Hash_node_base*&gt; &gt;::deallocate (9 samples, 0.29%)</title><rect x="1158.1" y="293" width="3.4" height="15.0" fill="rgb(220,177,23)" rx="2" ry="2" />
<text  x="1161.11" y="303.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_code_base&lt;int, std::pair&lt;int const, int*&gt;, std::__detail::_Select1st, std::hash&lt;int&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, false&gt;::_M_bucket_index (4 samples, 0.13%)</title><rect x="916.3" y="421" width="1.5" height="15.0" fill="rgb(220,56,41)" rx="2" ry="2" />
<text  x="919.26" y="431.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_code_base&lt;int, int, std::__detail::_Identity, std::hash&lt;int&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, false&gt;::_M_bucket_index (4 samples, 0.13%)</title><rect x="182.7" y="293" width="1.6" height="15.0" fill="rgb(221,220,7)" rx="2" ry="2" />
<text  x="185.75" y="303.5" ></text>
</g>
<g >
<title>irq_exit_rcu (2 samples, 0.06%)</title><rect x="392.3" y="293" width="0.8" height="15.0" fill="rgb(235,170,9)" rx="2" ry="2" />
<text  x="395.32" y="303.5" ></text>
</g>
<g >
<title>_int_free (5 samples, 0.16%)</title><rect x="544.9" y="357" width="1.9" height="15.0" fill="rgb(230,137,29)" rx="2" ry="2" />
<text  x="547.95" y="367.5" ></text>
</g>
<g >
<title>_int_malloc (2 samples, 0.06%)</title><rect x="20.6" y="565" width="0.8" height="15.0" fill="rgb(251,218,25)" rx="2" ry="2" />
<text  x="23.63" y="575.5" ></text>
</g>
<g >
<title>std::equal_to&lt;int&gt;::operator (38 samples, 1.22%)</title><rect x="878.7" y="421" width="14.4" height="15.0" fill="rgb(211,122,22)" rx="2" ry="2" />
<text  x="881.67" y="431.5" ></text>
</g>
<g >
<title>__gnu_cxx::new_allocator&lt;std::chrono::duration&lt;long, std::ratio&lt;1l, 1000000000l&gt; &gt; &gt;::allocate (38 samples, 1.22%)</title><rect x="758.7" y="373" width="14.4" height="15.0" fill="rgb(227,79,30)" rx="2" ry="2" />
<text  x="761.70" y="383.5" ></text>
</g>
<g >
<title>[libstdc++.so.6.0.29] (3 samples, 0.10%)</title><rect x="140.6" y="213" width="1.1" height="15.0" fill="rgb(233,197,37)" rx="2" ry="2" />
<text  x="143.60" y="223.5" ></text>
</g>
<g >
<title>std::allocator_traits&lt;std::allocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;int const, std::unordered_map&lt;int, double, std::hash&lt;int&gt;, std::equal_to&lt;int&gt;, std::allocator&lt;std::pair&lt;int const, double&gt; &gt; &gt; &gt;, false&gt; &gt; &gt;::destroy&lt;std::pair&lt;int const, std::unordered_map&lt;int, double, std::hash&lt;int&gt;, std::equal_to&lt;int&gt;, std::allocator&lt;std::pair&lt;int const, double&gt; &gt; &gt; &gt; &gt; (2 samples, 0.06%)</title><rect x="48.7" y="517" width="0.8" height="15.0" fill="rgb(216,15,17)" rx="2" ry="2" />
<text  x="51.73" y="527.5" ></text>
</g>
<g >
<title>std::allocator&lt;std::__detail::_Hash_node_base*&gt;::deallocate (28 samples, 0.90%)</title><rect x="832.7" y="405" width="10.7" height="15.0" fill="rgb(233,224,49)" rx="2" ry="2" />
<text  x="835.73" y="415.5" ></text>
</g>
<g >
<title>common_interrupt (1 samples, 0.03%)</title><rect x="1187.3" y="341" width="0.4" height="15.0" fill="rgb(208,20,19)" rx="2" ry="2" />
<text  x="1190.34" y="351.5" ></text>
</g>
<g >
<title>std::__detail::_Hashtable_alloc&lt;std::allocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;int const, std::unordered_set&lt;int, std::hash&lt;int&gt;, std::equal_to&lt;int&gt;, std::allocator&lt;int&gt; &gt; &gt;, false&gt; &gt; &gt;::_M_allocate_node&lt;std::pair&lt;int const, std::unordered_set&lt;int, std::hash&lt;int&gt;, std::equal_to&lt;int&gt;, std::allocator&lt;int&gt; &gt; &gt; const&amp;&gt; (455 samples, 14.64%)</title><rect x="95.4" y="421" width="172.8" height="15.0" fill="rgb(212,176,53)" rx="2" ry="2" />
<text  x="98.42" y="431.5" >std::__detail::_Hashta..</text>
</g>
<g >
<title>std::__detail::_Hashtable_alloc&lt;std::allocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;int const, std::unordered_set&lt;int, std::hash&lt;int&gt;, std::equal_to&lt;int&gt;, std::allocator&lt;int&gt; &gt; &gt;, false&gt; &gt; &gt;::_M_deallocate_buckets (258 samples, 8.30%)</title><rect x="315.3" y="421" width="97.9" height="15.0" fill="rgb(208,65,47)" rx="2" ry="2" />
<text  x="318.25" y="431.5" >std::__deta..</text>
</g>
<g >
<title>xhci_ring_ep_doorbell (1 samples, 0.03%)</title><rect x="392.7" y="101" width="0.4" height="15.0" fill="rgb(206,140,38)" rx="2" ry="2" />
<text  x="395.70" y="111.5" ></text>
</g>
<g >
<title>std::__detail::_Hashtable_base&lt;int, std::pair&lt;int const, std::unordered_map&lt;int, double, std::hash&lt;int&gt;, std::equal_to&lt;int&gt;, std::allocator&lt;std::pair&lt;int const, double&gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;int&gt;, std::hash&lt;int&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_equals (1 samples, 0.03%)</title><rect x="534.3" y="421" width="0.4" height="15.0" fill="rgb(235,180,7)" rx="2" ry="2" />
<text  x="537.32" y="431.5" ></text>
</g>
<g >
<title>std::__detail::_Hashtable_alloc&lt;std::allocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;int const, std::unordered_map&lt;int, double, std::hash&lt;int&gt;, std::equal_to&lt;int&gt;, std::allocator&lt;std::pair&lt;int const, double&gt; &gt; &gt; &gt;, false&gt; &gt; &gt;::_M_deallocate_node (70 samples, 2.25%)</title><rect x="1156.2" y="437" width="26.6" height="15.0" fill="rgb(206,145,8)" rx="2" ry="2" />
<text  x="1159.21" y="447.5" >s..</text>
</g>
<g >
<title>__common_interrupt (1 samples, 0.03%)</title><rect x="391.9" y="293" width="0.4" height="15.0" fill="rgb(221,51,37)" rx="2" ry="2" />
<text  x="394.94" y="303.5" ></text>
</g>
<g >
<title>common_interrupt (2 samples, 0.06%)</title><rect x="260.2" y="165" width="0.8" height="15.0" fill="rgb(251,128,44)" rx="2" ry="2" />
<text  x="263.20" y="175.5" ></text>
</g>
<g >
<title>[libstdc++.so.6.0.29] (1 samples, 0.03%)</title><rect x="268.6" y="341" width="0.3" height="15.0" fill="rgb(229,38,33)" rx="2" ry="2" />
<text  x="271.55" y="351.5" ></text>
</g>
<g >
<title>std::__detail::_Mod_range_hashing::operator (1 samples, 0.03%)</title><rect x="893.9" y="405" width="0.3" height="15.0" fill="rgb(217,42,10)" rx="2" ry="2" />
<text  x="896.86" y="415.5" ></text>
</g>
<g >
<title>std::allocator&lt;std::__detail::_Hash_node_base*&gt;::deallocate (71 samples, 2.28%)</title><rect x="975.5" y="405" width="26.9" height="15.0" fill="rgb(231,180,30)" rx="2" ry="2" />
<text  x="978.49" y="415.5" >s..</text>
</g>
<g >
<title>tasklet_hi_action (1 samples, 0.03%)</title><rect x="134.2" y="245" width="0.3" height="15.0" fill="rgb(221,11,22)" rx="2" ry="2" />
<text  x="137.15" y="255.5" ></text>
</g>
<g >
<title>std::allocator_traits&lt;std::allocator&lt;std::__detail::_Hash_node_base*&gt; &gt;::deallocate (1 samples, 0.03%)</title><rect x="81.8" y="421" width="0.3" height="15.0" fill="rgb(223,225,37)" rx="2" ry="2" />
<text  x="84.76" y="431.5" ></text>
</g>
<g >
<title>std::__detail::_AllocNode&lt;std::allocator&lt;std::__detail::_Hash_node&lt;int, false&gt; &gt; &gt;::operator (1 samples, 0.03%)</title><rect x="59.4" y="325" width="0.3" height="15.0" fill="rgb(213,153,16)" rx="2" ry="2" />
<text  x="62.36" y="335.5" ></text>
</g>
<g >
<title>std::__detail::_Hashtable_base&lt;int, std::pair&lt;int const, std::unordered_map&lt;int, double, std::hash&lt;int&gt;, std::equal_to&lt;int&gt;, std::allocator&lt;std::pair&lt;int const, double&gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;int&gt;, std::hash&lt;int&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_equals (17 samples, 0.55%)</title><rect x="526.0" y="421" width="6.4" height="15.0" fill="rgb(241,135,24)" rx="2" ry="2" />
<text  x="528.97" y="431.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_node&lt;std::pair&lt;int const, std::unordered_set&lt;int, std::hash&lt;int&gt;, std::equal_to&lt;int&gt;, std::allocator&lt;int&gt; &gt; &gt;, false&gt;::_M_next (2 samples, 0.06%)</title><rect x="413.2" y="421" width="0.8" height="15.0" fill="rgb(245,153,4)" rx="2" ry="2" />
<text  x="416.20" y="431.5" ></text>
</g>
<g >
<title>tasklet_action_common.isra.0 (2 samples, 0.06%)</title><rect x="840.3" y="261" width="0.8" height="15.0" fill="rgb(229,101,4)" rx="2" ry="2" />
<text  x="843.33" y="271.5" ></text>
</g>
<g >
<title>_int_free (7 samples, 0.23%)</title><rect x="541.9" y="485" width="2.7" height="15.0" fill="rgb(240,86,20)" rx="2" ry="2" />
<text  x="544.91" y="495.5" ></text>
</g>
<g >
<title>__sysvec_apic_timer_interrupt (1 samples, 0.03%)</title><rect x="579.9" y="373" width="0.4" height="15.0" fill="rgb(238,45,42)" rx="2" ry="2" />
<text  x="582.88" y="383.5" ></text>
</g>
<g >
<title>std::allocator&lt;std::chrono::duration&lt;long, std::ratio&lt;1l, 1000000000l&gt; &gt; &gt;::allocate (38 samples, 1.22%)</title><rect x="758.7" y="389" width="14.4" height="15.0" fill="rgb(250,48,18)" rx="2" ry="2" />
<text  x="761.70" y="399.5" ></text>
</g>
<g >
<title>_int_malloc (100 samples, 3.22%)</title><rect x="97.7" y="325" width="38.0" height="15.0" fill="rgb(208,146,17)" rx="2" ry="2" />
<text  x="100.70" y="335.5" >_in..</text>
</g>
<g >
<title>std::_Hashtable&lt;int, std::pair&lt;int const, std::unordered_map&lt;int, double, std::hash&lt;int&gt;, std::equal_to&lt;int&gt;, std::allocator&lt;std::pair&lt;int const, double&gt; &gt; &gt; &gt;, std::allocator&lt;std::pair&lt;int const, std::unordered_map&lt;int, double, std::hash&lt;int&gt;, std::equal_to&lt;int&gt;, std::allocator&lt;std::pair&lt;int const, double&gt; &gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;int&gt;, std::hash&lt;int&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_Hashtable (141 samples, 4.54%)</title><rect x="574.9" y="437" width="53.6" height="15.0" fill="rgb(215,93,44)" rx="2" ry="2" />
<text  x="577.94" y="447.5" >std::..</text>
</g>
<g >
<title>std::__detail::_Hashtable_alloc&lt;std::allocator&lt;std::__detail::_Hash_node&lt;int, false&gt; &gt; &gt;::_M_deallocate_node (7 samples, 0.23%)</title><rect x="1108.4" y="437" width="2.6" height="15.0" fill="rgb(227,51,39)" rx="2" ry="2" />
<text  x="1111.37" y="447.5" ></text>
</g>
<g >
<title>std::allocator_traits&lt;std::allocator&lt;std::__detail::_Hash_node_base*&gt; &gt;::allocate (1 samples, 0.03%)</title><rect x="68.5" y="309" width="0.3" height="15.0" fill="rgb(219,137,43)" rx="2" ry="2" />
<text  x="71.47" y="319.5" ></text>
</g>
<g >
<title>tasklet_action_common.isra.0 (1 samples, 0.03%)</title><rect x="772.7" y="229" width="0.4" height="15.0" fill="rgb(245,189,8)" rx="2" ry="2" />
<text  x="775.75" y="239.5" ></text>
</g>
<g >
<title>std::__detail::_Hashtable_alloc&lt;std::allocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;int const, double&gt;, false&gt; &gt; &gt;::_M_allocate_buckets (33 samples, 1.06%)</title><rect x="800.1" y="405" width="12.5" height="15.0" fill="rgb(227,12,23)" rx="2" ry="2" />
<text  x="803.08" y="415.5" ></text>
</g>
<g >
<title>operator new (7 samples, 0.23%)</title><rect x="73.4" y="565" width="2.7" height="15.0" fill="rgb(230,174,12)" rx="2" ry="2" />
<text  x="76.40" y="575.5" ></text>
</g>
<g >
<title>_int_free (71 samples, 2.28%)</title><rect x="975.5" y="373" width="26.9" height="15.0" fill="rgb(249,188,32)" rx="2" ry="2" />
<text  x="978.49" y="383.5" >_..</text>
</g>
<g >
<title>std::__detail::_Hashtable_alloc&lt;std::allocator&lt;std::__detail::_Hash_node&lt;int, false&gt; &gt; &gt;::_M_allocate_node&lt;int const&amp;&gt; (2 samples, 0.06%)</title><rect x="1089.8" y="437" width="0.7" height="15.0" fill="rgb(210,142,18)" rx="2" ry="2" />
<text  x="1092.77" y="447.5" ></text>
</g>
<g >
<title>__gnu_cxx::new_allocator&lt;std::__detail::_Hash_node&lt;int, false&gt; &gt;::allocate (37 samples, 1.19%)</title><rect x="268.6" y="373" width="14.0" height="15.0" fill="rgb(231,11,34)" rx="2" ry="2" />
<text  x="271.55" y="383.5" ></text>
</g>
<g >
<title>std::equal_to&lt;int&gt;::operator (53 samples, 1.71%)</title><rect x="1046.9" y="421" width="20.1" height="15.0" fill="rgb(240,50,1)" rx="2" ry="2" />
<text  x="1049.87" y="431.5" ></text>
</g>
<g >
<title>__handle_irq_event_percpu (1 samples, 0.03%)</title><rect x="1046.1" y="293" width="0.4" height="15.0" fill="rgb(243,59,9)" rx="2" ry="2" />
<text  x="1049.11" y="303.5" ></text>
</g>
<g >
<title>asm_common_interrupt (1 samples, 0.03%)</title><rect x="892.7" y="405" width="0.4" height="15.0" fill="rgb(214,173,9)" rx="2" ry="2" />
<text  x="895.72" y="415.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;int, int, std::allocator&lt;int&gt;, std::__detail::_Identity, std::equal_to&lt;int&gt;, std::hash&lt;int&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, true, true&gt; &gt;::_M_deallocate_buckets (9 samples, 0.29%)</title><rect x="505.8" y="437" width="3.5" height="15.0" fill="rgb(208,151,34)" rx="2" ry="2" />
<text  x="508.84" y="447.5" ></text>
</g>
<g >
<title>tasklet_hi_action (2 samples, 0.06%)</title><rect x="260.2" y="117" width="0.8" height="15.0" fill="rgb(215,104,15)" rx="2" ry="2" />
<text  x="263.20" y="127.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;int, int, std::allocator&lt;int&gt;, std::__detail::_Identity, std::equal_to&lt;int&gt;, std::hash&lt;int&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, true, true&gt; &gt;::_M_insert&lt;int const&amp;, std::__detail::_AllocNode&lt;std::allocator&lt;std::__detail::_Hash_node&lt;int, false&gt; &gt; &gt; &gt; (2 samples, 0.06%)</title><rect x="67.3" y="485" width="0.8" height="15.0" fill="rgb(231,146,36)" rx="2" ry="2" />
<text  x="70.33" y="495.5" ></text>
</g>
<g >
<title>__softirqentry_text_start (1 samples, 0.03%)</title><rect x="958.4" y="341" width="0.4" height="15.0" fill="rgb(211,82,41)" rx="2" ry="2" />
<text  x="961.40" y="351.5" ></text>
</g>
<g >
<title>[demo] (2 samples, 0.06%)</title><rect x="1169.9" y="229" width="0.7" height="15.0" fill="rgb(243,127,17)" rx="2" ry="2" />
<text  x="1172.88" y="239.5" ></text>
</g>
<g >
<title>std::allocator&lt;std::__detail::_Hash_node_base*&gt;::allocate (21 samples, 0.68%)</title><rect x="593.5" y="229" width="8.0" height="15.0" fill="rgb(242,158,53)" rx="2" ry="2" />
<text  x="596.55" y="239.5" ></text>
</g>
<g >
<title>std::equal_to&lt;int&gt;::operator (6 samples, 0.19%)</title><rect x="520.3" y="405" width="2.2" height="15.0" fill="rgb(243,208,2)" rx="2" ry="2" />
<text  x="523.27" y="415.5" ></text>
</g>
<g >
<title>_int_free (5 samples, 0.16%)</title><rect x="512.3" y="341" width="1.9" height="15.0" fill="rgb(253,28,32)" rx="2" ry="2" />
<text  x="515.30" y="351.5" ></text>
</g>
<g >
<title>std::__detail::_Hashtable_alloc&lt;std::allocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;int const, std::unordered_map&lt;int, double, std::hash&lt;int&gt;, std::equal_to&lt;int&gt;, std::allocator&lt;std::pair&lt;int const, double&gt; &gt; &gt; &gt;, false&gt; &gt; &gt;::_M_deallocate_node_ptr (5 samples, 0.16%)</title><rect x="1156.2" y="421" width="1.9" height="15.0" fill="rgb(248,140,31)" rx="2" ry="2" />
<text  x="1159.21" y="431.5" ></text>
</g>
<g >
<title>usb_giveback_urb_bh (2 samples, 0.06%)</title><rect x="260.2" y="85" width="0.8" height="15.0" fill="rgb(248,180,16)" rx="2" ry="2" />
<text  x="263.20" y="95.5" ></text>
</g>
<g >
<title>__gnu_cxx::__ops::_Iter_comp_val&lt;com::github::coderodde::pathfinders::util::HeapNodeComparator&lt;int, double&gt; &gt;::operator (1 samples, 0.03%)</title><rect x="574.6" y="405" width="0.3" height="15.0" fill="rgb(205,160,40)" rx="2" ry="2" />
<text  x="577.56" y="415.5" ></text>
</g>
<g >
<title>com::github::coderodde::directed_graph::DirectedGraph&lt;int&gt;::getChildNodesOf (86 samples, 2.77%)</title><rect x="282.6" y="501" width="32.7" height="15.0" fill="rgb(224,91,23)" rx="2" ry="2" />
<text  x="285.60" y="511.5" >co..</text>
</g>
<g >
<title>_int_free (2 samples, 0.06%)</title><rect x="974.7" y="469" width="0.8" height="15.0" fill="rgb(213,229,35)" rx="2" ry="2" />
<text  x="977.73" y="479.5" ></text>
</g>
<g >
<title>xhci_queue_isoc_tx (2 samples, 0.06%)</title><rect x="840.3" y="133" width="0.8" height="15.0" fill="rgb(212,164,54)" rx="2" ry="2" />
<text  x="843.33" y="143.5" ></text>
</g>
<g >
<title>std::__detail::_Map_base&lt;int, std::pair&lt;int const, int*&gt;, std::allocator&lt;std::pair&lt;int const, int*&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;int&gt;, std::hash&lt;int&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt;, true&gt;::operator[] (2 samples, 0.06%)</title><rect x="80.6" y="565" width="0.8" height="15.0" fill="rgb(208,103,50)" rx="2" ry="2" />
<text  x="83.62" y="575.5" ></text>
</g>
<g >
<title>std::__detail::_Hashtable_base&lt;int, std::pair&lt;int const, std::unordered_set&lt;int, std::hash&lt;int&gt;, std::equal_to&lt;int&gt;, std::allocator&lt;int&gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;int&gt;, std::hash&lt;int&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_equals (35 samples, 1.13%)</title><rect x="302.0" y="421" width="13.3" height="15.0" fill="rgb(251,181,39)" rx="2" ry="2" />
<text  x="304.96" y="431.5" ></text>
</g>
<g >
<title>std::hash&lt;int&gt;::operator (1 samples, 0.03%)</title><rect x="877.9" y="389" width="0.4" height="15.0" fill="rgb(243,190,23)" rx="2" ry="2" />
<text  x="880.92" y="399.5" ></text>
</g>
<g >
<title>std::allocator&lt;std::__detail::_Hash_node&lt;int, false&gt; &gt;::deallocate (72 samples, 2.32%)</title><rect x="478.5" y="245" width="27.3" height="15.0" fill="rgb(208,190,13)" rx="2" ry="2" />
<text  x="481.51" y="255.5" >s..</text>
</g>
<g >
<title>__gnu_cxx::new_allocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;int const, int*&gt;, false&gt; &gt;::allocate (12 samples, 0.39%)</title><rect x="958.8" y="389" width="4.5" height="15.0" fill="rgb(253,77,34)" rx="2" ry="2" />
<text  x="961.78" y="399.5" ></text>
</g>
<g >
<title>std::__detail::_Hashtable_alloc&lt;std::allocator&lt;std::__detail::_Hash_node&lt;int, false&gt; &gt; &gt;::_M_deallocate_node_ptr (72 samples, 2.32%)</title><rect x="478.5" y="277" width="27.3" height="15.0" fill="rgb(250,223,52)" rx="2" ry="2" />
<text  x="481.51" y="287.5" >s..</text>
</g>
<g >
<title>unlink_chunk (2 samples, 0.06%)</title><rect x="962.2" y="325" width="0.8" height="15.0" fill="rgb(248,187,41)" rx="2" ry="2" />
<text  x="965.20" y="335.5" ></text>
</g>
<g >
<title>__gnu_cxx::new_allocator&lt;std::__detail::_Hash_node_base*&gt;::deallocate (28 samples, 0.90%)</title><rect x="832.7" y="389" width="10.7" height="15.0" fill="rgb(218,227,48)" rx="2" ry="2" />
<text  x="835.73" y="399.5" ></text>
</g>
<g >
<title>asm_common_interrupt (1 samples, 0.03%)</title><rect x="419.7" y="325" width="0.3" height="15.0" fill="rgb(236,229,16)" rx="2" ry="2" />
<text  x="422.66" y="335.5" ></text>
</g>
<g >
<title>malloc_consolidate (11 samples, 0.35%)</title><rect x="581.0" y="277" width="4.2" height="15.0" fill="rgb(251,91,9)" rx="2" ry="2" />
<text  x="584.02" y="287.5" ></text>
</g>
<g >
<title>__gnu_cxx::new_allocator&lt;std::chrono::duration&lt;long, std::ratio&lt;1l, 1000000000l&gt; &gt; &gt;::allocate (13 samples, 0.42%)</title><rect x="1182.8" y="453" width="4.9" height="15.0" fill="rgb(245,164,34)" rx="2" ry="2" />
<text  x="1185.79" y="463.5" ></text>
</g>
<g >
<title>com::github::coderodde::directed_graph::DirectedGraph&lt;int&gt;::~DirectedGraph (524 samples, 16.86%)</title><rect x="315.3" y="501" width="198.9" height="15.0" fill="rgb(228,161,54)" rx="2" ry="2" />
<text  x="318.25" y="511.5" >com::github::coderodde::di..</text>
</g>
<g >
<title>std::_Hashtable&lt;int, std::pair&lt;int const, std::unordered_map&lt;int, double, std::hash&lt;int&gt;, std::equal_to&lt;int&gt;, std::allocator&lt;std::pair&lt;int const, double&gt; &gt; &gt; &gt;, std::allocator&lt;std::pair&lt;int const, std::unordered_map&lt;int, double, std::hash&lt;int&gt;, std::equal_to&lt;int&gt;, std::allocator&lt;std::pair&lt;int const, double&gt; &gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;int&gt;, std::hash&lt;int&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_deallocate_buckets (1 samples, 0.03%)</title><rect x="82.1" y="469" width="0.4" height="15.0" fill="rgb(225,150,45)" rx="2" ry="2" />
<text  x="85.14" y="479.5" ></text>
</g>
<g >
<title>std::__detail::_Hashtable_base&lt;int, int, std::__detail::_Identity, std::equal_to&lt;int&gt;, std::hash&lt;int&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Hashtable_traits&lt;false, true, true&gt; &gt;::_M_equals (1 samples, 0.03%)</title><rect x="66.9" y="453" width="0.4" height="15.0" fill="rgb(247,182,11)" rx="2" ry="2" />
<text  x="69.95" y="463.5" ></text>
</g>
<g >
<title>std::__detail::_Hashtable_alloc&lt;std::allocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;int const, std::unordered_map&lt;int, double, std::hash&lt;int&gt;, std::equal_to&lt;int&gt;, std::allocator&lt;std::pair&lt;int const, double&gt; &gt; &gt; &gt;, false&gt; &gt; &gt;::_M_deallocate_nodes (75 samples, 2.41%)</title><rect x="1154.3" y="453" width="28.5" height="15.0" fill="rgb(238,91,36)" rx="2" ry="2" />
<text  x="1157.31" y="463.5" >st..</text>
</g>
<g >
<title>xhci_urb_enqueue (1 samples, 0.03%)</title><rect x="526.3" y="229" width="0.4" height="15.0" fill="rgb(230,84,34)" rx="2" ry="2" />
<text  x="529.34" y="239.5" ></text>
</g>
<g >
<title>std::__detail::_Hashtable_alloc&lt;std::allocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;int const, double&gt;, false&gt; &gt; &gt;::_M_allocate_node&lt;std::pair&lt;int const, double&gt; const&amp;&gt; (1 samples, 0.03%)</title><rect x="47.6" y="437" width="0.4" height="15.0" fill="rgb(215,181,33)" rx="2" ry="2" />
<text  x="50.59" y="447.5" ></text>
</g>
<g >
<title>std::allocator&lt;std::__detail::_Hash_node_base*&gt;::deallocate (9 samples, 0.29%)</title><rect x="1158.1" y="277" width="3.4" height="15.0" fill="rgb(224,69,12)" rx="2" ry="2" />
<text  x="1161.11" y="287.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_code_base&lt;int, std::pair&lt;int const, std::unordered_map&lt;int, double, std::hash&lt;int&gt;, std::equal_to&lt;int&gt;, std::allocator&lt;std::pair&lt;int const, double&gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::hash&lt;int&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, false&gt;::_M_bucket_index (1 samples, 0.03%)</title><rect x="70.0" y="469" width="0.4" height="15.0" fill="rgb(223,60,46)" rx="2" ry="2" />
<text  x="72.99" y="479.5" ></text>
</g>
<g >
<title>std::equal_to&lt;int&gt;::operator (21 samples, 0.68%)</title><rect x="782.2" y="421" width="8.0" height="15.0" fill="rgb(251,83,5)" rx="2" ry="2" />
<text  x="785.24" y="431.5" ></text>
</g>
<g >
<title>__GI___libc_free (25 samples, 0.80%)</title><rect x="480.8" y="213" width="9.5" height="15.0" fill="rgb(218,180,54)" rx="2" ry="2" />
<text  x="483.79" y="223.5" ></text>
</g>
<g >
<title>__gnu_cxx::new_allocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;int const, int*&gt;, false&gt; &gt;::deallocate (7 samples, 0.23%)</title><rect x="544.6" y="373" width="2.6" height="15.0" fill="rgb(223,203,47)" rx="2" ry="2" />
<text  x="547.57" y="383.5" ></text>
</g>
<g >
<title>_int_malloc (36 samples, 1.16%)</title><rect x="268.9" y="325" width="13.7" height="15.0" fill="rgb(212,5,10)" rx="2" ry="2" />
<text  x="271.93" y="335.5" ></text>
</g>
<g >
<title>std::unordered_map&lt;int, std::unordered_map&lt;int, double, std::hash&lt;int&gt;, std::equal_to&lt;int&gt;, std::allocator&lt;std::pair&lt;int const, double&gt; &gt; &gt;, std::hash&lt;int&gt;, std::equal_to&lt;int&gt;, std::allocator&lt;std::pair&lt;int const, std::unordered_map&lt;int, double, std::hash&lt;int&gt;, std::equal_to&lt;int&gt;, std::allocator&lt;std::pair&lt;int const, double&gt; &gt; &gt; &gt; &gt; &gt;::operator[] (4 samples, 0.13%)</title><rect x="70.0" y="517" width="1.5" height="15.0" fill="rgb(224,117,10)" rx="2" ry="2" />
<text  x="72.99" y="527.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;int, int, std::allocator&lt;int&gt;, std::__detail::_Identity, std::equal_to&lt;int&gt;, std::hash&lt;int&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, true, true&gt; &gt;::_M_assign&lt;std::_Hashtable&lt;int, int, std::allocator&lt;int&gt;, std::__detail::_Identity, std::equal_to&lt;int&gt;, std::hash&lt;int&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, true, true&gt; &gt; const&amp;, std::__detail::_AllocNode&lt;std::allocator&lt;std::__detail::_Hash_node&lt;int, false&gt; &gt; &gt; &gt; (5 samples, 0.16%)</title><rect x="76.1" y="565" width="1.9" height="15.0" fill="rgb(220,17,0)" rx="2" ry="2" />
<text  x="79.06" y="575.5" ></text>
</g>
<g >
<title>x86_pmu_enable (4 samples, 0.13%)</title><rect x="1188.5" y="405" width="1.5" height="15.0" fill="rgb(243,158,17)" rx="2" ry="2" />
<text  x="1191.48" y="415.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;int, std::pair&lt;int const, double&gt;, std::allocator&lt;std::pair&lt;int const, double&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;int&gt;, std::hash&lt;int&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_find_before_node (15 samples, 0.48%)</title><rect x="516.9" y="437" width="5.6" height="15.0" fill="rgb(222,165,51)" rx="2" ry="2" />
<text  x="519.85" y="447.5" ></text>
</g>
<g >
<title>tasklet_hi_action (1 samples, 0.03%)</title><rect x="829.7" y="277" width="0.4" height="15.0" fill="rgb(236,218,27)" rx="2" ry="2" />
<text  x="832.70" y="287.5" ></text>
</g>
<g >
<title>checked_request2size (1 samples, 0.03%)</title><rect x="668.0" y="469" width="0.3" height="15.0" fill="rgb(209,143,3)" rx="2" ry="2" />
<text  x="670.96" y="479.5" ></text>
</g>
<g >
<title>std::__detail::_Mod_range_hashing::operator (1 samples, 0.03%)</title><rect x="585.2" y="373" width="0.4" height="15.0" fill="rgb(244,229,28)" rx="2" ry="2" />
<text  x="588.19" y="383.5" ></text>
</g>
<g >
<title>__gnu_cxx::new_allocator&lt;std::__detail::_Hash_node&lt;int, false&gt; &gt;::allocate (2 samples, 0.06%)</title><rect x="26.7" y="485" width="0.8" height="15.0" fill="rgb(249,50,2)" rx="2" ry="2" />
<text  x="29.71" y="495.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;int, std::pair&lt;int const, EuclideanCoordinates&gt;, std::allocator&lt;std::pair&lt;int const, EuclideanCoordinates&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;int&gt;, std::hash&lt;int&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_insert_unique_node (1 samples, 0.03%)</title><rect x="73.0" y="501" width="0.4" height="15.0" fill="rgb(232,16,28)" rx="2" ry="2" />
<text  x="76.02" y="511.5" ></text>
</g>
<g >
<title>alloc_perturb (2 samples, 0.06%)</title><rect x="133.4" y="309" width="0.8" height="15.0" fill="rgb(205,132,6)" rx="2" ry="2" />
<text  x="136.39" y="319.5" ></text>
</g>
<g >
<title>main (37 samples, 1.19%)</title><rect x="59.4" y="565" width="14.0" height="15.0" fill="rgb(210,115,2)" rx="2" ry="2" />
<text  x="62.36" y="575.5" ></text>
</g>
<g >
<title>alloc_perturb (2 samples, 0.06%)</title><rect x="259.4" y="181" width="0.8" height="15.0" fill="rgb(229,226,8)" rx="2" ry="2" />
<text  x="262.44" y="191.5" ></text>
</g>
<g >
<title>std::__detail::_Hashtable_base&lt;int, int, std::__detail::_Identity, std::equal_to&lt;int&gt;, std::hash&lt;int&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Hashtable_traits&lt;false, true, true&gt; &gt;::_M_equals (54 samples, 1.74%)</title><rect x="1046.5" y="437" width="20.5" height="15.0" fill="rgb(213,150,6)" rx="2" ry="2" />
<text  x="1049.49" y="447.5" ></text>
</g>
<g >
<title>[libstdc++.so.6.0.29] (1 samples, 0.03%)</title><rect x="95.8" y="341" width="0.4" height="15.0" fill="rgb(236,202,49)" rx="2" ry="2" />
<text  x="98.80" y="351.5" ></text>
</g>
<g >
<title>get_max_fast (1 samples, 0.03%)</title><rect x="261.3" y="181" width="0.4" height="15.0" fill="rgb(232,61,44)" rx="2" ry="2" />
<text  x="264.34" y="191.5" ></text>
</g>
<g >
<title>std::unordered_map&lt;int, int*, std::hash&lt;int&gt;, std::equal_to&lt;int&gt;, std::allocator&lt;std::pair&lt;int const, int*&gt; &gt; &gt;::contains (92 samples, 2.96%)</title><rect x="858.2" y="501" width="34.9" height="15.0" fill="rgb(236,100,40)" rx="2" ry="2" />
<text  x="861.17" y="511.5" >st..</text>
</g>
<g >
<title>memcpy_erms (1 samples, 0.03%)</title><rect x="260.6" y="37" width="0.4" height="15.0" fill="rgb(219,203,44)" rx="2" ry="2" />
<text  x="263.58" y="47.5" ></text>
</g>
<g >
<title>std::allocator_traits&lt;std::allocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;int const, double&gt;, false&gt; &gt; &gt;::allocate (24 samples, 0.77%)</title><rect x="823.2" y="437" width="9.2" height="15.0" fill="rgb(234,48,43)" rx="2" ry="2" />
<text  x="826.24" y="447.5" ></text>
</g>
<g >
<title>schedule (4 samples, 0.13%)</title><rect x="59.7" y="213" width="1.6" height="15.0" fill="rgb(252,144,13)" rx="2" ry="2" />
<text  x="62.74" y="223.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;int, int, std::allocator&lt;int&gt;, std::__detail::_Identity, std::equal_to&lt;int&gt;, std::hash&lt;int&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, true, true&gt; &gt;::_Hashtable (1 samples, 0.03%)</title><rect x="59.4" y="357" width="0.3" height="15.0" fill="rgb(242,206,6)" rx="2" ry="2" />
<text  x="62.36" y="367.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;int, std::pair&lt;int const, double&gt;, std::allocator&lt;std::pair&lt;int const, double&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;int&gt;, std::hash&lt;int&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_deallocate_buckets (28 samples, 0.90%)</title><rect x="832.7" y="453" width="10.7" height="15.0" fill="rgb(224,57,38)" rx="2" ry="2" />
<text  x="835.73" y="463.5" ></text>
</g>
<g >
<title>__GI___libc_malloc (2 samples, 0.06%)</title><rect x="1089.8" y="357" width="0.7" height="15.0" fill="rgb(209,99,49)" rx="2" ry="2" />
<text  x="1092.77" y="367.5" ></text>
</g>
<g >
<title>std::allocator_traits&lt;std::allocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;int const, std::unordered_set&lt;int, std::hash&lt;int&gt;, std::equal_to&lt;int&gt;, std::allocator&lt;int&gt; &gt; &gt;, false&gt; &gt; &gt;::construct&lt;std::pair&lt;int const, std::unordered_set&lt;int, std::hash&lt;int&gt;, std::equal_to&lt;int&gt;, std::allocator&lt;int&gt; &gt; &gt;, std::pair&lt;int const, std::unordered_set&lt;int, std::hash&lt;int&gt;, std::equal_to&lt;int&gt;, std::allocator&lt;int&gt; &gt; &gt; const&amp;&gt; (346 samples, 11.13%)</title><rect x="136.8" y="405" width="131.4" height="15.0" fill="rgb(208,221,11)" rx="2" ry="2" />
<text  x="139.81" y="415.5" >std::allocator_t..</text>
</g>
<g >
<title>[[heap]] (47 samples, 1.51%)</title><rect x="10.0" y="581" width="17.8" height="15.0" fill="rgb(227,15,45)" rx="2" ry="2" />
<text  x="13.00" y="591.5" ></text>
</g>
<g >
<title>std::__detail::_Mod_range_hashing::operator (7 samples, 0.23%)</title><rect x="601.5" y="245" width="2.7" height="15.0" fill="rgb(245,185,6)" rx="2" ry="2" />
<text  x="604.52" y="255.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;int, std::pair&lt;int const, double&gt;, std::allocator&lt;std::pair&lt;int const, double&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;int&gt;, std::hash&lt;int&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_rehash_aux (86 samples, 2.77%)</title><rect x="790.6" y="437" width="32.6" height="15.0" fill="rgb(226,161,18)" rx="2" ry="2" />
<text  x="793.59" y="447.5" >st..</text>
</g>
<g >
<title>std::unordered_set&lt;int, std::hash&lt;int&gt;, std::equal_to&lt;int&gt;, std::allocator&lt;int&gt; &gt;::unordered_set (9 samples, 0.29%)</title><rect x="59.7" y="389" width="3.5" height="15.0" fill="rgb(223,154,30)" rx="2" ry="2" />
<text  x="62.74" y="399.5" ></text>
</g>
<g >
<title>_int_malloc (13 samples, 0.42%)</title><rect x="580.3" y="293" width="4.9" height="15.0" fill="rgb(232,86,11)" rx="2" ry="2" />
<text  x="583.26" y="303.5" ></text>
</g>
<g >
<title>std::__detail::_Hashtable_alloc&lt;std::allocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;int const, std::unordered_set&lt;int, std::hash&lt;int&gt;, std::equal_to&lt;int&gt;, std::allocator&lt;int&gt; &gt; &gt;, false&gt; &gt; &gt;::_M_allocate_node&lt;std::pair&lt;int const, std::unordered_set&lt;int, std::hash&lt;int&gt;, std::equal_to&lt;int&gt;, std::allocator&lt;int&gt; &gt; &gt; const&amp;&gt; (9 samples, 0.29%)</title><rect x="59.7" y="453" width="3.5" height="15.0" fill="rgb(228,36,46)" rx="2" ry="2" />
<text  x="62.74" y="463.5" ></text>
</g>
<g >
<title>snd_complete_urb (2 samples, 0.06%)</title><rect x="840.3" y="213" width="0.8" height="15.0" fill="rgb(233,200,28)" rx="2" ry="2" />
<text  x="843.33" y="223.5" ></text>
</g>
<g >
<title>perf-exec (4 samples, 0.13%)</title><rect x="1188.5" y="597" width="1.5" height="15.0" fill="rgb(232,142,44)" rx="2" ry="2" />
<text  x="1191.48" y="607.5" ></text>
</g>
<g >
<title>_int_free (12 samples, 0.39%)</title><rect x="29.0" y="565" width="4.5" height="15.0" fill="rgb(251,211,33)" rx="2" ry="2" />
<text  x="31.98" y="575.5" ></text>
</g>
<g >
<title>std::allocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;int const, std::unordered_map&lt;int, double, std::hash&lt;int&gt;, std::equal_to&lt;int&gt;, std::allocator&lt;std::pair&lt;int const, double&gt; &gt; &gt; &gt;, false&gt; &gt;::allocate (1 samples, 0.03%)</title><rect x="47.2" y="533" width="0.4" height="15.0" fill="rgb(212,166,30)" rx="2" ry="2" />
<text  x="50.21" y="543.5" ></text>
</g>
<g >
<title>std::__detail::_Hashtable_alloc&lt;std::allocator&lt;std::__detail::_Hash_node&lt;int, false&gt; &gt; &gt;::_M_allocate_node&lt;int const&amp;&gt; (1 samples, 0.03%)</title><rect x="67.7" y="453" width="0.4" height="15.0" fill="rgb(205,52,0)" rx="2" ry="2" />
<text  x="70.71" y="463.5" ></text>
</g>
<g >
<title>_int_malloc (1 samples, 0.03%)</title><rect x="59.4" y="213" width="0.3" height="15.0" fill="rgb(247,201,35)" rx="2" ry="2" />
<text  x="62.36" y="223.5" ></text>
</g>
<g >
<title>asm_sysvec_apic_timer_interrupt (1 samples, 0.03%)</title><rect x="579.9" y="405" width="0.4" height="15.0" fill="rgb(231,150,4)" rx="2" ry="2" />
<text  x="582.88" y="415.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;int, int, std::allocator&lt;int&gt;, std::__detail::_Identity, std::equal_to&lt;int&gt;, std::hash&lt;int&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, true, true&gt; &gt;::_M_deallocate_buckets (9 samples, 0.29%)</title><rect x="505.8" y="453" width="3.5" height="15.0" fill="rgb(243,13,1)" rx="2" ry="2" />
<text  x="508.84" y="463.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;int, std::pair&lt;int const, double&gt;, std::allocator&lt;std::pair&lt;int const, double&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;int&gt;, std::hash&lt;int&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_update_bbegin (1 samples, 0.03%)</title><rect x="604.2" y="277" width="0.4" height="15.0" fill="rgb(245,179,8)" rx="2" ry="2" />
<text  x="607.18" y="287.5" ></text>
</g>
<g >
<title>_int_malloc (46 samples, 1.48%)</title><rect x="936.4" y="357" width="17.4" height="15.0" fill="rgb(225,130,32)" rx="2" ry="2" />
<text  x="939.38" y="367.5" ></text>
</g>
<g >
<title>_int_free (1 samples, 0.03%)</title><rect x="81.8" y="373" width="0.3" height="15.0" fill="rgb(236,142,35)" rx="2" ry="2" />
<text  x="84.76" y="383.5" ></text>
</g>
<g >
<title>tasklet_hi_action (1 samples, 0.03%)</title><rect x="412.8" y="245" width="0.4" height="15.0" fill="rgb(213,119,0)" rx="2" ry="2" />
<text  x="415.82" y="255.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_code_base&lt;int, std::pair&lt;int const, int*&gt;, std::__detail::_Select1st, std::hash&lt;int&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, false&gt;::_M_bucket_index (9 samples, 0.29%)</title><rect x="875.3" y="421" width="3.4" height="15.0" fill="rgb(228,4,23)" rx="2" ry="2" />
<text  x="878.26" y="431.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_node&lt;int, false&gt;::_M_next (3 samples, 0.10%)</title><rect x="267.0" y="309" width="1.2" height="15.0" fill="rgb(210,44,21)" rx="2" ry="2" />
<text  x="270.03" y="319.5" ></text>
</g>
<g >
<title>tcache_put (1 samples, 0.03%)</title><rect x="273.1" y="309" width="0.4" height="15.0" fill="rgb(244,185,30)" rx="2" ry="2" />
<text  x="276.11" y="319.5" ></text>
</g>
<g >
<title>malloc_consolidate (1 samples, 0.03%)</title><rect x="832.4" y="453" width="0.3" height="15.0" fill="rgb(240,162,4)" rx="2" ry="2" />
<text  x="835.36" y="463.5" ></text>
</g>
<g >
<title>std::__detail::_Hashtable_alloc&lt;std::allocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;int const, int*&gt;, false&gt; &gt; &gt;::_M_deallocate_nodes (38 samples, 1.22%)</title><rect x="1002.4" y="453" width="14.5" height="15.0" fill="rgb(216,9,24)" rx="2" ry="2" />
<text  x="1005.45" y="463.5" ></text>
</g>
<g >
<title>irq_exit_rcu (1 samples, 0.03%)</title><rect x="134.2" y="277" width="0.3" height="15.0" fill="rgb(245,160,50)" rx="2" ry="2" />
<text  x="137.15" y="287.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_code_base&lt;int, std::pair&lt;int const, double&gt;, std::__detail::_Select1st, std::hash&lt;int&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, false&gt;::_M_hash_code (1 samples, 0.03%)</title><rect x="523.3" y="453" width="0.4" height="15.0" fill="rgb(210,128,10)" rx="2" ry="2" />
<text  x="526.31" y="463.5" ></text>
</g>
<g >
<title>std::allocator&lt;std::__detail::_Hash_node_base*&gt;::deallocate (24 samples, 0.77%)</title><rect x="420.0" y="261" width="9.2" height="15.0" fill="rgb(248,101,7)" rx="2" ry="2" />
<text  x="423.04" y="271.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;int, std::pair&lt;int const, std::unordered_map&lt;int, double, std::hash&lt;int&gt;, std::equal_to&lt;int&gt;, std::allocator&lt;std::pair&lt;int const, double&gt; &gt; &gt; &gt;, std::allocator&lt;std::pair&lt;int const, std::unordered_map&lt;int, double, std::hash&lt;int&gt;, std::equal_to&lt;int&gt;, std::allocator&lt;std::pair&lt;int const, double&gt; &gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;int&gt;, std::hash&lt;int&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_find_node (5 samples, 0.16%)</title><rect x="532.8" y="453" width="1.9" height="15.0" fill="rgb(247,6,26)" rx="2" ry="2" />
<text  x="535.80" y="463.5" ></text>
</g>
<g >
<title>std::unordered_map&lt;int, EuclideanCoordinates, std::hash&lt;int&gt;, std::equal_to&lt;int&gt;, std::allocator&lt;std::pair&lt;int const, EuclideanCoordinates&gt; &gt; &gt;::operator[] (5 samples, 0.16%)</title><rect x="71.5" y="533" width="1.9" height="15.0" fill="rgb(248,20,47)" rx="2" ry="2" />
<text  x="74.51" y="543.5" ></text>
</g>
<g >
<title>com::github::coderodde::pathfinders::util::cleanParentMap&lt;int&gt; (33 samples, 1.06%)</title><rect x="534.7" y="501" width="12.5" height="15.0" fill="rgb(250,47,51)" rx="2" ry="2" />
<text  x="537.70" y="511.5" ></text>
</g>
<g >
<title>std::allocator_traits&lt;std::allocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;int const, double&gt;, false&gt; &gt; &gt;::allocate (60 samples, 1.93%)</title><rect x="604.6" y="245" width="22.7" height="15.0" fill="rgb(247,136,35)" rx="2" ry="2" />
<text  x="607.56" y="255.5" >s..</text>
</g>
<g >
<title>std::allocator_traits&lt;std::allocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;int const, std::unordered_map&lt;int, double, std::hash&lt;int&gt;, std::equal_to&lt;int&gt;, std::allocator&lt;std::pair&lt;int const, double&gt; &gt; &gt; &gt;, false&gt; &gt; &gt;::destroy&lt;std::pair&lt;int const, std::unordered_map&lt;int, double, std::hash&lt;int&gt;, std::equal_to&lt;int&gt;, std::allocator&lt;std::pair&lt;int const, double&gt; &gt; &gt; &gt; &gt; (1 samples, 0.03%)</title><rect x="82.5" y="421" width="0.4" height="15.0" fill="rgb(221,164,33)" rx="2" ry="2" />
<text  x="85.52" y="431.5" ></text>
</g>
<g >
<title>std::__detail::_Hashtable_alloc&lt;std::allocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;int const, std::unordered_map&lt;int, double, std::hash&lt;int&gt;, std::equal_to&lt;int&gt;, std::allocator&lt;std::pair&lt;int const, double&gt; &gt; &gt; &gt;, false&gt; &gt; &gt;::_M_deallocate_node (2 samples, 0.06%)</title><rect x="48.7" y="533" width="0.8" height="15.0" fill="rgb(213,126,41)" rx="2" ry="2" />
<text  x="51.73" y="543.5" ></text>
</g>
<g >
<title>[libstdc++.so.6.0.29] (1 samples, 0.03%)</title><rect x="420.0" y="229" width="0.4" height="15.0" fill="rgb(210,154,43)" rx="2" ry="2" />
<text  x="423.04" y="239.5" ></text>
</g>
<g >
<title>std::__detail::_Hashtable_alloc&lt;std::allocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;int const, std::unordered_map&lt;int, double, std::hash&lt;int&gt;, std::equal_to&lt;int&gt;, std::allocator&lt;std::pair&lt;int const, double&gt; &gt; &gt; &gt;, false&gt; &gt; &gt;::_M_deallocate_buckets (113 samples, 3.64%)</title><rect x="1111.0" y="437" width="42.9" height="15.0" fill="rgb(252,140,19)" rx="2" ry="2" />
<text  x="1114.03" y="447.5" >std:..</text>
</g>
<g >
<title>std::__detail::_AllocNode&lt;std::allocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;int const, std::unordered_set&lt;int, std::hash&lt;int&gt;, std::equal_to&lt;int&gt;, std::allocator&lt;int&gt; &gt; &gt;, false&gt; &gt; &gt;::operator (1 samples, 0.03%)</title><rect x="59.4" y="453" width="0.3" height="15.0" fill="rgb(230,31,19)" rx="2" ry="2" />
<text  x="62.36" y="463.5" ></text>
</g>
<g >
<title>std::unordered_map&lt;int, std::unordered_set&lt;int, std::hash&lt;int&gt;, std::equal_to&lt;int&gt;, std::allocator&lt;int&gt; &gt;, std::hash&lt;int&gt;, std::equal_to&lt;int&gt;, std::allocator&lt;std::pair&lt;int const, std::unordered_set&lt;int, std::hash&lt;int&gt;, std::equal_to&lt;int&gt;, std::allocator&lt;int&gt; &gt; &gt; &gt; &gt;::operator[] (3 samples, 0.10%)</title><rect x="63.2" y="517" width="1.1" height="15.0" fill="rgb(252,114,12)" rx="2" ry="2" />
<text  x="66.15" y="527.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;int, std::pair&lt;int const, std::unordered_set&lt;int, std::hash&lt;int&gt;, std::equal_to&lt;int&gt;, std::allocator&lt;int&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;int const, std::unordered_set&lt;int, std::hash&lt;int&gt;, std::equal_to&lt;int&gt;, std::allocator&lt;int&gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;int&gt;, std::hash&lt;int&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_find_before_node (3 samples, 0.10%)</title><rect x="63.2" y="469" width="1.1" height="15.0" fill="rgb(217,188,39)" rx="2" ry="2" />
<text  x="66.15" y="479.5" ></text>
</g>
<g >
<title>std::construct_at&lt;std::pair&lt;int const, int*&gt;, std::pair&lt;int const, int*&gt; const&amp;&gt; (30 samples, 0.97%)</title><rect x="963.3" y="405" width="11.4" height="15.0" fill="rgb(233,199,47)" rx="2" ry="2" />
<text  x="966.34" y="415.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;int, int, std::allocator&lt;int&gt;, std::__detail::_Identity, std::equal_to&lt;int&gt;, std::hash&lt;int&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, true, true&gt; &gt;::clear (6 samples, 0.19%)</title><rect x="44.9" y="437" width="2.3" height="15.0" fill="rgb(232,126,6)" rx="2" ry="2" />
<text  x="47.93" y="447.5" ></text>
</g>
<g >
<title>com::github::coderodde::directed_graph::DirectedGraphWeightFunction&lt;int, double&gt;::~DirectedGraphWeightFunction (2 samples, 0.06%)</title><rect x="82.1" y="517" width="0.8" height="15.0" fill="rgb(235,220,1)" rx="2" ry="2" />
<text  x="85.14" y="527.5" ></text>
</g>
<g >
<title>__GI___libc_free (7 samples, 0.23%)</title><rect x="420.4" y="229" width="2.7" height="15.0" fill="rgb(217,139,16)" rx="2" ry="2" />
<text  x="423.42" y="239.5" ></text>
</g>
<g >
<title>std::__detail::_Mod_range_hashing::operator (1 samples, 0.03%)</title><rect x="532.4" y="421" width="0.4" height="15.0" fill="rgb(241,3,42)" rx="2" ry="2" />
<text  x="535.42" y="431.5" ></text>
</g>
<g >
<title>snd_complete_urb (1 samples, 0.03%)</title><rect x="958.4" y="261" width="0.4" height="15.0" fill="rgb(241,91,39)" rx="2" ry="2" />
<text  x="961.40" y="271.5" ></text>
</g>
<g >
<title>std::__detail::_Map_base&lt;int, std::pair&lt;int const, std::unordered_map&lt;int, double, std::hash&lt;int&gt;, std::equal_to&lt;int&gt;, std::allocator&lt;std::pair&lt;int const, double&gt; &gt; &gt; &gt;, std::allocator&lt;std::pair&lt;int const, std::unordered_map&lt;int, double, std::hash&lt;int&gt;, std::equal_to&lt;int&gt;, std::allocator&lt;std::pair&lt;int const, double&gt; &gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;int&gt;, std::hash&lt;int&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt;, true&gt;::operator[] (6 samples, 0.19%)</title><rect x="532.4" y="469" width="2.3" height="15.0" fill="rgb(249,121,32)" rx="2" ry="2" />
<text  x="535.42" y="479.5" ></text>
</g>
<g >
<title>std::allocator&lt;std::__detail::_Hash_node_base*&gt;::deallocate (1 samples, 0.03%)</title><rect x="81.8" y="405" width="0.3" height="15.0" fill="rgb(224,139,34)" rx="2" ry="2" />
<text  x="84.76" y="415.5" ></text>
</g>
<g >
<title>__gnu_cxx::new_allocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;int const, std::unordered_set&lt;int, std::hash&lt;int&gt;, std::equal_to&lt;int&gt;, std::allocator&lt;int&gt; &gt; &gt;, false&gt; &gt;::deallocate (16 samples, 0.51%)</title><rect x="414.0" y="357" width="6.0" height="15.0" fill="rgb(241,154,53)" rx="2" ry="2" />
<text  x="416.96" y="367.5" ></text>
</g>
<g >
<title>std::allocator&lt;std::__detail::_Hash_node_base*&gt;::deallocate (9 samples, 0.29%)</title><rect x="505.8" y="389" width="3.5" height="15.0" fill="rgb(240,11,41)" rx="2" ry="2" />
<text  x="508.84" y="399.5" ></text>
</g>
<g >
<title>std::pair&lt;int const, std::unordered_map&lt;int, double, std::hash&lt;int&gt;, std::equal_to&lt;int&gt;, std::allocator&lt;std::pair&lt;int const, double&gt; &gt; &gt; &gt;::pair (4 samples, 0.13%)</title><rect x="68.5" y="405" width="1.5" height="15.0" fill="rgb(232,43,9)" rx="2" ry="2" />
<text  x="71.47" y="415.5" ></text>
</g>
<g >
<title>alloc_perturb (3 samples, 0.10%)</title><rect x="179.3" y="181" width="1.2" height="15.0" fill="rgb(214,168,49)" rx="2" ry="2" />
<text  x="182.33" y="191.5" ></text>
</g>
<g >
<title>std::__detail::_Hashtable_alloc&lt;std::allocator&lt;std::__detail::_Hash_node&lt;int, false&gt; &gt; &gt;::_M_allocate_node&lt;int const&amp;&gt; (1 samples, 0.03%)</title><rect x="59.4" y="309" width="0.3" height="15.0" fill="rgb(225,111,14)" rx="2" ry="2" />
<text  x="62.36" y="319.5" ></text>
</g>
<g >
<title>std::allocator_traits&lt;std::allocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;int const, std::unordered_set&lt;int, std::hash&lt;int&gt;, std::equal_to&lt;int&gt;, std::allocator&lt;int&gt; &gt; &gt;, false&gt; &gt; &gt;::allocate (109 samples, 3.51%)</title><rect x="95.4" y="405" width="41.4" height="15.0" fill="rgb(208,177,49)" rx="2" ry="2" />
<text  x="98.42" y="415.5" >std..</text>
</g>
<g >
<title>std::_Hashtable&lt;int, std::pair&lt;int const, std::unordered_map&lt;int, double, std::hash&lt;int&gt;, std::equal_to&lt;int&gt;, std::allocator&lt;std::pair&lt;int const, double&gt; &gt; &gt; &gt;, std::allocator&lt;std::pair&lt;int const, std::unordered_map&lt;int, double, std::hash&lt;int&gt;, std::equal_to&lt;int&gt;, std::allocator&lt;std::pair&lt;int const, double&gt; &gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;int&gt;, std::hash&lt;int&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::~_Hashtable (189 samples, 6.08%)</title><rect x="1111.0" y="485" width="71.8" height="15.0" fill="rgb(233,145,10)" rx="2" ry="2" />
<text  x="1114.03" y="495.5" >std::_Ha..</text>
</g>
<g >
<title>std::_Hashtable&lt;int, std::pair&lt;int const, std::unordered_map&lt;int, double, std::hash&lt;int&gt;, std::equal_to&lt;int&gt;, std::allocator&lt;std::pair&lt;int const, double&gt; &gt; &gt; &gt;, std::allocator&lt;std::pair&lt;int const, std::unordered_map&lt;int, double, std::hash&lt;int&gt;, std::equal_to&lt;int&gt;, std::allocator&lt;std::pair&lt;int const, double&gt; &gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;int&gt;, std::hash&lt;int&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_bucket_index (1 samples, 0.03%)</title><rect x="585.2" y="405" width="0.4" height="15.0" fill="rgb(230,14,23)" rx="2" ry="2" />
<text  x="588.19" y="415.5" ></text>
</g>
<g >
<title>std::__detail::_Map_base&lt;int, std::pair&lt;int const, std::unordered_map&lt;int, double, std::hash&lt;int&gt;, std::equal_to&lt;int&gt;, std::allocator&lt;std::pair&lt;int const, double&gt; &gt; &gt; &gt;, std::allocator&lt;std::pair&lt;int const, std::unordered_map&lt;int, double, std::hash&lt;int&gt;, std::equal_to&lt;int&gt;, std::allocator&lt;std::pair&lt;int const, double&gt; &gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;int&gt;, std::hash&lt;int&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt;, true&gt;::operator[] (4 samples, 0.13%)</title><rect x="70.0" y="501" width="1.5" height="15.0" fill="rgb(221,194,17)" rx="2" ry="2" />
<text  x="72.99" y="511.5" ></text>
</g>
<g >
<title>usb_hcd_submit_urb (1 samples, 0.03%)</title><rect x="526.3" y="245" width="0.4" height="15.0" fill="rgb(221,46,9)" rx="2" ry="2" />
<text  x="529.34" y="255.5" ></text>
</g>
<g >
<title>std::unordered_map&lt;int, std::unordered_set&lt;int, std::hash&lt;int&gt;, std::equal_to&lt;int&gt;, std::allocator&lt;int&gt; &gt;, std::hash&lt;int&gt;, std::equal_to&lt;int&gt;, std::allocator&lt;std::pair&lt;int const, std::unordered_set&lt;int, std::hash&lt;int&gt;, std::equal_to&lt;int&gt;, std::allocator&lt;int&gt; &gt; &gt; &gt; &gt;::unordered_map (1 samples, 0.03%)</title><rect x="59.4" y="501" width="0.3" height="15.0" fill="rgb(252,54,15)" rx="2" ry="2" />
<text  x="62.36" y="511.5" ></text>
</g>
<g >
<title>__gnu_cxx::new_allocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;int const, int*&gt;, false&gt; &gt;::allocate (47 samples, 1.51%)</title><rect x="936.0" y="405" width="17.8" height="15.0" fill="rgb(224,190,16)" rx="2" ry="2" />
<text  x="939.00" y="415.5" ></text>
</g>
<g >
<title>std::allocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;int const, double&gt;, false&gt; &gt;::allocate (60 samples, 1.93%)</title><rect x="604.6" y="229" width="22.7" height="15.0" fill="rgb(221,174,22)" rx="2" ry="2" />
<text  x="607.56" y="239.5" >s..</text>
</g>
<g >
<title>std::_Hashtable&lt;int, int, std::allocator&lt;int&gt;, std::__detail::_Identity, std::equal_to&lt;int&gt;, std::hash&lt;int&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, true, true&gt; &gt;::clear (33 samples, 1.06%)</title><rect x="1098.5" y="469" width="12.5" height="15.0" fill="rgb(223,118,8)" rx="2" ry="2" />
<text  x="1101.50" y="479.5" ></text>
</g>
<g >
<title>xhci_queue_isoc_tx_prepare (1 samples, 0.03%)</title><rect x="1046.5" y="229" width="0.4" height="15.0" fill="rgb(206,143,19)" rx="2" ry="2" />
<text  x="1049.49" y="239.5" ></text>
</g>
<g >
<title>std::unordered_set&lt;int, std::hash&lt;int&gt;, std::equal_to&lt;int&gt;, std::allocator&lt;int&gt; &gt;::contains (8 samples, 0.26%)</title><rect x="64.3" y="517" width="3.0" height="15.0" fill="rgb(238,76,43)" rx="2" ry="2" />
<text  x="67.29" y="527.5" ></text>
</g>
<g >
<title>tick_sched_handle.isra.0 (1 samples, 0.03%)</title><rect x="579.9" y="309" width="0.4" height="15.0" fill="rgb(230,154,53)" rx="2" ry="2" />
<text  x="582.88" y="319.5" ></text>
</g>
<g >
<title>std::__detail::_Hashtable_alloc&lt;std::allocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;int const, std::unordered_map&lt;int, double, std::hash&lt;int&gt;, std::equal_to&lt;int&gt;, std::allocator&lt;std::pair&lt;int const, double&gt; &gt; &gt; &gt;, false&gt; &gt; &gt;::_M_deallocate_node (1 samples, 0.03%)</title><rect x="82.5" y="437" width="0.4" height="15.0" fill="rgb(250,154,5)" rx="2" ry="2" />
<text  x="85.52" y="447.5" ></text>
</g>
<g >
<title>__usb_hcd_giveback_urb (1 samples, 0.03%)</title><rect x="134.2" y="197" width="0.3" height="15.0" fill="rgb(225,201,0)" rx="2" ry="2" />
<text  x="137.15" y="207.5" ></text>
</g>
<g >
<title>malloc_consolidate (28 samples, 0.90%)</title><rect x="832.7" y="357" width="10.7" height="15.0" fill="rgb(253,106,35)" rx="2" ry="2" />
<text  x="835.73" y="367.5" ></text>
</g>
<g >
<title>xhci_urb_enqueue (1 samples, 0.03%)</title><rect x="1187.3" y="181" width="0.4" height="15.0" fill="rgb(241,197,46)" rx="2" ry="2" />
<text  x="1190.34" y="191.5" ></text>
</g>
<g >
<title>__handle_mm_fault (1 samples, 0.03%)</title><rect x="67.7" y="277" width="0.4" height="15.0" fill="rgb(205,16,2)" rx="2" ry="2" />
<text  x="70.71" y="287.5" ></text>
</g>
<g >
<title>__gnu_cxx::new_allocator&lt;std::__detail::_Hash_node_base*&gt;::allocate (21 samples, 0.68%)</title><rect x="593.5" y="213" width="8.0" height="15.0" fill="rgb(209,116,26)" rx="2" ry="2" />
<text  x="596.55" y="223.5" ></text>
</g>
<g >
<title>irq_exit_rcu (1 samples, 0.03%)</title><rect x="772.7" y="277" width="0.4" height="15.0" fill="rgb(205,37,28)" rx="2" ry="2" />
<text  x="775.75" y="287.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;int, std::pair&lt;int const, std::unordered_map&lt;int, double, std::hash&lt;int&gt;, std::equal_to&lt;int&gt;, std::allocator&lt;std::pair&lt;int const, double&gt; &gt; &gt; &gt;, std::allocator&lt;std::pair&lt;int const, std::unordered_map&lt;int, double, std::hash&lt;int&gt;, std::equal_to&lt;int&gt;, std::allocator&lt;std::pair&lt;int const, double&gt; &gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;int&gt;, std::hash&lt;int&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::~_Hashtable (2 samples, 0.06%)</title><rect x="82.1" y="485" width="0.8" height="15.0" fill="rgb(250,219,54)" rx="2" ry="2" />
<text  x="85.14" y="495.5" ></text>
</g>
<g >
<title>__x64_sys_execve (4 samples, 0.13%)</title><rect x="1188.5" y="549" width="1.5" height="15.0" fill="rgb(218,1,23)" rx="2" ry="2" />
<text  x="1191.48" y="559.5" ></text>
</g>
<g >
<title>tcache_get (1 samples, 0.03%)</title><rect x="1090.1" y="341" width="0.4" height="15.0" fill="rgb(216,81,43)" rx="2" ry="2" />
<text  x="1093.15" y="351.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;int, std::pair&lt;int const, double&gt;, std::allocator&lt;std::pair&lt;int const, double&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;int&gt;, std::hash&lt;int&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_update_bbegin (1 samples, 0.03%)</title><rect x="604.2" y="261" width="0.4" height="15.0" fill="rgb(243,141,25)" rx="2" ry="2" />
<text  x="607.18" y="271.5" ></text>
</g>
<g >
<title>snd_complete_urb (2 samples, 0.06%)</title><rect x="392.3" y="197" width="0.8" height="15.0" fill="rgb(223,101,23)" rx="2" ry="2" />
<text  x="395.32" y="207.5" ></text>
</g>
<g >
<title>std::__detail::_AllocNode&lt;std::allocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;int const, std::unordered_map&lt;int, double, std::hash&lt;int&gt;, std::equal_to&lt;int&gt;, std::allocator&lt;std::pair&lt;int const, double&gt; &gt; &gt; &gt;, false&gt; &gt; &gt;::operator (113 samples, 3.64%)</title><rect x="585.6" y="405" width="42.9" height="15.0" fill="rgb(219,164,2)" rx="2" ry="2" />
<text  x="588.57" y="415.5" >std:..</text>
</g>
<g >
<title>std::__detail::_Hashtable_alloc&lt;std::allocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;int const, std::unordered_set&lt;int, std::hash&lt;int&gt;, std::equal_to&lt;int&gt;, std::allocator&lt;int&gt; &gt; &gt;, false&gt; &gt; &gt;::_M_deallocate_nodes (8 samples, 0.26%)</title><rect x="44.2" y="549" width="3.0" height="15.0" fill="rgb(247,40,46)" rx="2" ry="2" />
<text  x="47.17" y="559.5" ></text>
</g>
<g >
<title>asm_common_interrupt (1 samples, 0.03%)</title><rect x="139.8" y="309" width="0.4" height="15.0" fill="rgb(216,195,26)" rx="2" ry="2" />
<text  x="142.85" y="319.5" ></text>
</g>
<g >
<title>usb_giveback_urb_bh (1 samples, 0.03%)</title><rect x="958.4" y="293" width="0.4" height="15.0" fill="rgb(248,91,27)" rx="2" ry="2" />
<text  x="961.40" y="303.5" ></text>
</g>
<g >
<title>std::__detail::_Hashtable_alloc&lt;std::allocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;int const, double&gt;, false&gt; &gt; &gt;::_M_allocate_buckets (21 samples, 0.68%)</title><rect x="593.5" y="261" width="8.0" height="15.0" fill="rgb(212,165,50)" rx="2" ry="2" />
<text  x="596.55" y="271.5" ></text>
</g>
<g >
<title>std::unordered_set&lt;int, std::hash&lt;int&gt;, std::equal_to&lt;int&gt;, std::allocator&lt;int&gt; &gt;::insert (2 samples, 0.06%)</title><rect x="67.3" y="517" width="0.8" height="15.0" fill="rgb(216,3,48)" rx="2" ry="2" />
<text  x="70.33" y="527.5" ></text>
</g>
<g >
<title>xhci_get_frame (1 samples, 0.03%)</title><rect x="419.7" y="133" width="0.3" height="15.0" fill="rgb(222,87,46)" rx="2" ry="2" />
<text  x="422.66" y="143.5" ></text>
</g>
<g >
<title>std::allocator_traits&lt;std::allocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;int const, std::unordered_map&lt;int, double, std::hash&lt;int&gt;, std::equal_to&lt;int&gt;, std::allocator&lt;std::pair&lt;int const, double&gt; &gt; &gt; &gt;, false&gt; &gt; &gt;::construct&lt;std::pair&lt;int const, std::unordered_map&lt;int, double, std::hash&lt;int&gt;, std::equal_to&lt;int&gt;, std::allocator&lt;std::pair&lt;int const, double&gt; &gt; &gt; &gt;, std::pair&lt;int const, std::unordered_map&lt;int, double, std::hash&lt;int&gt;, std::equal_to&lt;int&gt;, std::allocator&lt;std::pair&lt;int const, double&gt; &gt; &gt; &gt; const&amp;&gt; (97 samples, 3.12%)</title><rect x="591.6" y="373" width="36.9" height="15.0" fill="rgb(236,202,10)" rx="2" ry="2" />
<text  x="594.65" y="383.5" >std..</text>
</g>
<g >
<title>com::github::coderodde::directed_graph::DirectedGraphWeightFunction&lt;int, double&gt;::addWeight (4 samples, 0.13%)</title><rect x="70.0" y="533" width="1.5" height="15.0" fill="rgb(234,115,14)" rx="2" ry="2" />
<text  x="72.99" y="543.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;int, std::pair&lt;int const, std::unordered_set&lt;int, std::hash&lt;int&gt;, std::equal_to&lt;int&gt;, std::allocator&lt;int&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;int const, std::unordered_set&lt;int, std::hash&lt;int&gt;, std::equal_to&lt;int&gt;, std::allocator&lt;int&gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;int&gt;, std::hash&lt;int&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_assign&lt;std::_Hashtable&lt;int, std::pair&lt;int const, std::unordered_set&lt;int, std::hash&lt;int&gt;, std::equal_to&lt;int&gt;, std::allocator&lt;int&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;int const, std::unordered_set&lt;int, std::hash&lt;int&gt;, std::equal_to&lt;int&gt;, std::allocator&lt;int&gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;int&gt;, std::hash&lt;int&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt; const&amp;, std::__detail::_AllocNode&lt;std::allocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;int const, std::unordered_set&lt;int, std::hash&lt;int&gt;, std::equal_to&lt;int&gt;, std::allocator&lt;int&gt; &gt; &gt;, false&gt; &gt; &gt; &gt; (1 samples, 0.03%)</title><rect x="59.4" y="469" width="0.3" height="15.0" fill="rgb(221,3,11)" rx="2" ry="2" />
<text  x="62.36" y="479.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;int, int, std::allocator&lt;int&gt;, std::__detail::_Identity, std::equal_to&lt;int&gt;, std::hash&lt;int&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, true, true&gt; &gt;::~_Hashtable (54 samples, 1.74%)</title><rect x="1090.5" y="485" width="20.5" height="15.0" fill="rgb(244,18,51)" rx="2" ry="2" />
<text  x="1093.53" y="495.5" ></text>
</g>
<g >
<title>operator new (13 samples, 0.42%)</title><rect x="580.3" y="325" width="4.9" height="15.0" fill="rgb(209,2,20)" rx="2" ry="2" />
<text  x="583.26" y="335.5" ></text>
</g>
<g >
<title>unlink_chunk (7 samples, 0.23%)</title><rect x="1185.1" y="373" width="2.6" height="15.0" fill="rgb(223,186,51)" rx="2" ry="2" />
<text  x="1188.06" y="383.5" ></text>
</g>
<g >
<title>__GI___libc_free (1 samples, 0.03%)</title><rect x="544.6" y="357" width="0.3" height="15.0" fill="rgb(216,168,35)" rx="2" ry="2" />
<text  x="547.57" y="367.5" ></text>
</g>
<g >
<title>std::allocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;int const, std::unordered_map&lt;int, double, std::hash&lt;int&gt;, std::equal_to&lt;int&gt;, std::allocator&lt;std::pair&lt;int const, double&gt; &gt; &gt; &gt;, false&gt; &gt;::deallocate (5 samples, 0.16%)</title><rect x="1156.2" y="389" width="1.9" height="15.0" fill="rgb(222,110,2)" rx="2" ry="2" />
<text  x="1159.21" y="399.5" ></text>
</g>
<g >
<title>kfree (1 samples, 0.03%)</title><rect x="1187.7" y="405" width="0.4" height="15.0" fill="rgb(224,86,20)" rx="2" ry="2" />
<text  x="1190.72" y="415.5" ></text>
</g>
<g >
<title>[demo] (2 samples, 0.06%)</title><rect x="48.7" y="581" width="0.8" height="15.0" fill="rgb(218,57,18)" rx="2" ry="2" />
<text  x="51.73" y="591.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;int, std::pair&lt;int const, int*&gt;, std::allocator&lt;std::pair&lt;int const, int*&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;int&gt;, std::hash&lt;int&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_rehash (109 samples, 3.51%)</title><rect x="894.2" y="453" width="41.4" height="15.0" fill="rgb(234,8,36)" rx="2" ry="2" />
<text  x="897.24" y="463.5" >std..</text>
</g>
<g >
<title>get_max_fast (2 samples, 0.06%)</title><rect x="600.4" y="149" width="0.7" height="15.0" fill="rgb(220,174,9)" rx="2" ry="2" />
<text  x="603.38" y="159.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;int, std::pair&lt;int const, int*&gt;, std::allocator&lt;std::pair&lt;int const, int*&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;int&gt;, std::hash&lt;int&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::~_Hashtable (111 samples, 3.57%)</title><rect x="974.7" y="485" width="42.2" height="15.0" fill="rgb(248,132,12)" rx="2" ry="2" />
<text  x="977.73" y="495.5" >std..</text>
</g>
<g >
<title>std::__detail::_Hashtable_alloc&lt;std::allocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;int const, double&gt;, false&gt; &gt; &gt;::_M_allocate_node&lt;std::piecewise_construct_t const&amp;, std::tuple&lt;int const&amp;&gt;, std::tuple&lt;&gt; &gt; (24 samples, 0.77%)</title><rect x="823.2" y="453" width="9.2" height="15.0" fill="rgb(239,227,45)" rx="2" ry="2" />
<text  x="826.24" y="463.5" ></text>
</g>
<g >
<title>std::destroy_at&lt;std::pair&lt;int const, std::unordered_set&lt;int, std::hash&lt;int&gt;, std::equal_to&lt;int&gt;, std::allocator&lt;int&gt; &gt; &gt; &gt; (226 samples, 7.27%)</title><rect x="420.0" y="389" width="85.8" height="15.0" fill="rgb(213,224,12)" rx="2" ry="2" />
<text  x="423.04" y="399.5" >std::destr..</text>
</g>
<g >
<title>do_group_exit (1 samples, 0.03%)</title><rect x="1188.1" y="533" width="0.4" height="15.0" fill="rgb(228,138,23)" rx="2" ry="2" />
<text  x="1191.10" y="543.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_code_base&lt;int, std::pair&lt;int const, std::unordered_map&lt;int, double, std::hash&lt;int&gt;, std::equal_to&lt;int&gt;, std::allocator&lt;std::pair&lt;int const, double&gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::hash&lt;int&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, false&gt;::_M_bucket_index (1 samples, 0.03%)</title><rect x="585.2" y="389" width="0.4" height="15.0" fill="rgb(229,30,43)" rx="2" ry="2" />
<text  x="588.19" y="399.5" ></text>
</g>
<g >
<title>__GI___libc_free (3 samples, 0.10%)</title><rect x="855.1" y="357" width="1.2" height="15.0" fill="rgb(208,52,20)" rx="2" ry="2" />
<text  x="858.14" y="367.5" ></text>
</g>
<g >
<title>std::unordered_map&lt;int, int*, std::hash&lt;int&gt;, std::equal_to&lt;int&gt;, std::allocator&lt;std::pair&lt;int const, int*&gt; &gt; &gt;::unordered_map (55 samples, 1.77%)</title><rect x="953.8" y="501" width="20.9" height="15.0" fill="rgb(250,127,18)" rx="2" ry="2" />
<text  x="956.85" y="511.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;int, std::pair&lt;int const, double&gt;, std::allocator&lt;std::pair&lt;int const, double&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;int&gt;, std::hash&lt;int&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_Hashtable (97 samples, 3.12%)</title><rect x="591.6" y="309" width="36.9" height="15.0" fill="rgb(254,190,6)" rx="2" ry="2" />
<text  x="594.65" y="319.5" >std..</text>
</g>
<g >
<title>std::_Hashtable&lt;int, int, std::allocator&lt;int&gt;, std::__detail::_Identity, std::equal_to&lt;int&gt;, std::hash&lt;int&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, true, true&gt; &gt;::_M_bucket_index (4 samples, 0.13%)</title><rect x="182.7" y="309" width="1.6" height="15.0" fill="rgb(233,20,38)" rx="2" ry="2" />
<text  x="185.75" y="319.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;int, std::pair&lt;int const, std::unordered_set&lt;int, std::hash&lt;int&gt;, std::equal_to&lt;int&gt;, std::allocator&lt;int&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;int const, std::unordered_set&lt;int, std::hash&lt;int&gt;, std::equal_to&lt;int&gt;, std::allocator&lt;int&gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;int&gt;, std::hash&lt;int&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::~_Hashtable (1 samples, 0.03%)</title><rect x="81.8" y="485" width="0.3" height="15.0" fill="rgb(229,93,23)" rx="2" ry="2" />
<text  x="84.76" y="495.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;int, std::pair&lt;int const, std::unordered_set&lt;int, std::hash&lt;int&gt;, std::equal_to&lt;int&gt;, std::allocator&lt;int&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;int const, std::unordered_set&lt;int, std::hash&lt;int&gt;, std::equal_to&lt;int&gt;, std::allocator&lt;int&gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;int&gt;, std::hash&lt;int&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_assign&lt;std::_Hashtable&lt;int, std::pair&lt;int const, std::unordered_set&lt;int, std::hash&lt;int&gt;, std::equal_to&lt;int&gt;, std::allocator&lt;int&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;int const, std::unordered_set&lt;int, std::hash&lt;int&gt;, std::equal_to&lt;int&gt;, std::allocator&lt;int&gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;int&gt;, std::hash&lt;int&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt; const&amp;, std::__detail::_AllocNode&lt;std::allocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;int const, std::unordered_set&lt;int, std::hash&lt;int&gt;, std::equal_to&lt;int&gt;, std::allocator&lt;int&gt; &gt; &gt;, false&gt; &gt; &gt; &gt; (3 samples, 0.10%)</title><rect x="43.0" y="565" width="1.2" height="15.0" fill="rgb(238,88,12)" rx="2" ry="2" />
<text  x="46.03" y="575.5" ></text>
</g>
<g >
<title>std::allocator_traits&lt;std::allocator&lt;std::__detail::_Hash_node_base*&gt; &gt;::deallocate (113 samples, 3.64%)</title><rect x="1111.0" y="421" width="42.9" height="15.0" fill="rgb(243,183,54)" rx="2" ry="2" />
<text  x="1114.03" y="431.5" >std:..</text>
</g>
<g >
<title>__softirqentry_text_start (2 samples, 0.06%)</title><rect x="392.3" y="277" width="0.8" height="15.0" fill="rgb(230,68,47)" rx="2" ry="2" />
<text  x="395.32" y="287.5" ></text>
</g>
<g >
<title>[libstdc++.so.6.0.29] (1 samples, 0.03%)</title><rect x="1158.5" y="245" width="0.4" height="15.0" fill="rgb(252,13,25)" rx="2" ry="2" />
<text  x="1161.49" y="255.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;int, std::pair&lt;int const, int*&gt;, std::allocator&lt;std::pair&lt;int const, int*&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;int&gt;, std::hash&lt;int&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_bucket_index (2 samples, 0.06%)</title><rect x="957.3" y="453" width="0.7" height="15.0" fill="rgb(213,94,2)" rx="2" ry="2" />
<text  x="960.27" y="463.5" ></text>
</g>
<g >
<title>__memset_avx2_unaligned_erms (4 samples, 0.13%)</title><rect x="429.5" y="309" width="1.5" height="15.0" fill="rgb(210,120,37)" rx="2" ry="2" />
<text  x="432.53" y="319.5" ></text>
</g>
<g >
<title>do_user_addr_fault (1 samples, 0.03%)</title><rect x="67.7" y="309" width="0.4" height="15.0" fill="rgb(210,76,18)" rx="2" ry="2" />
<text  x="70.71" y="319.5" ></text>
</g>
<g >
<title>__handle_irq_event_percpu (1 samples, 0.03%)</title><rect x="1182.0" y="117" width="0.4" height="15.0" fill="rgb(224,34,34)" rx="2" ry="2" />
<text  x="1185.03" y="127.5" ></text>
</g>
<g >
<title>native_write_msr (1 samples, 0.03%)</title><rect x="579.9" y="197" width="0.4" height="15.0" fill="rgb(205,225,15)" rx="2" ry="2" />
<text  x="582.88" y="207.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_code_base&lt;int, std::pair&lt;int const, double&gt;, std::__detail::_Select1st, std::hash&lt;int&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, false&gt;::_M_bucket_index (4 samples, 0.13%)</title><rect x="812.6" y="421" width="1.5" height="15.0" fill="rgb(228,134,11)" rx="2" ry="2" />
<text  x="815.61" y="431.5" ></text>
</g>
<g >
<title>__gnu_cxx::__normal_iterator&lt;com::github::coderodde::pathfinders::util::HeapNode&lt;int, double&gt;* const*, std::vector&lt;com::github::coderodde::pathfinders::util::HeapNode&lt;int, double&gt;*, std::allocator&lt;com::github::coderodde::pathfinders::util::HeapNode&lt;int, double&gt;*&gt; &gt; &gt;::__normal_iterator (1 samples, 0.03%)</title><rect x="548.7" y="437" width="0.4" height="15.0" fill="rgb(229,26,49)" rx="2" ry="2" />
<text  x="551.75" y="447.5" ></text>
</g>
<g >
<title>tasklet_hi_action (1 samples, 0.03%)</title><rect x="1187.3" y="293" width="0.4" height="15.0" fill="rgb(223,19,41)" rx="2" ry="2" />
<text  x="1190.34" y="303.5" ></text>
</g>
<g >
<title>std::__detail::_Map_base&lt;int, std::pair&lt;int const, int*&gt;, std::allocator&lt;std::pair&lt;int const, int*&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;int&gt;, std::hash&lt;int&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt;, true&gt;::operator[] (160 samples, 5.15%)</title><rect x="893.1" y="485" width="60.7" height="15.0" fill="rgb(241,155,9)" rx="2" ry="2" />
<text  x="896.10" y="495.5" >std::_..</text>
</g>
<g >
<title>__gnu_cxx::new_allocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;int const, std::unordered_set&lt;int, std::hash&lt;int&gt;, std::equal_to&lt;int&gt;, std::allocator&lt;int&gt; &gt; &gt;, false&gt; &gt;::deallocate (2 samples, 0.06%)</title><rect x="44.2" y="469" width="0.7" height="15.0" fill="rgb(237,114,22)" rx="2" ry="2" />
<text  x="47.17" y="479.5" ></text>
</g>
<g >
<title>std::allocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;int const, double&gt;, false&gt; &gt;::deallocate (1 samples, 0.03%)</title><rect x="82.5" y="261" width="0.4" height="15.0" fill="rgb(206,107,52)" rx="2" ry="2" />
<text  x="85.52" y="271.5" ></text>
</g>
<g >
<title>__gnu_cxx::new_allocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;int const, double&gt;, false&gt; &gt;::deallocate (8 samples, 0.26%)</title><rect x="855.1" y="373" width="3.1" height="15.0" fill="rgb(243,184,2)" rx="2" ry="2" />
<text  x="858.14" y="383.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;int, std::pair&lt;int const, double&gt;, std::allocator&lt;std::pair&lt;int const, double&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;int&gt;, std::hash&lt;int&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_deallocate_buckets (9 samples, 0.29%)</title><rect x="1158.1" y="325" width="3.4" height="15.0" fill="rgb(252,177,12)" rx="2" ry="2" />
<text  x="1161.11" y="335.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;int, int, std::allocator&lt;int&gt;, std::__detail::_Identity, std::equal_to&lt;int&gt;, std::hash&lt;int&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, true, true&gt; &gt;::_Hashtable (38 samples, 1.22%)</title><rect x="268.2" y="469" width="14.4" height="15.0" fill="rgb(244,192,45)" rx="2" ry="2" />
<text  x="271.17" y="479.5" ></text>
</g>
<g >
<title>std::__detail::_Hashtable_alloc&lt;std::allocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;int const, std::unordered_map&lt;int, double, std::hash&lt;int&gt;, std::equal_to&lt;int&gt;, std::allocator&lt;std::pair&lt;int const, double&gt; &gt; &gt; &gt;, false&gt; &gt; &gt;::_M_allocate_node&lt;std::pair&lt;int const, std::unordered_map&lt;int, double, std::hash&lt;int&gt;, std::equal_to&lt;int&gt;, std::allocator&lt;std::pair&lt;int const, double&gt; &gt; &gt; &gt; const&amp;&gt; (2 samples, 0.06%)</title><rect x="47.2" y="565" width="0.8" height="15.0" fill="rgb(242,20,48)" rx="2" ry="2" />
<text  x="50.21" y="575.5" ></text>
</g>
<g >
<title>alloc_perturb (1 samples, 0.03%)</title><rect x="600.0" y="149" width="0.4" height="15.0" fill="rgb(207,185,45)" rx="2" ry="2" />
<text  x="603.00" y="159.5" ></text>
</g>
<g >
<title>operator new (38 samples, 1.22%)</title><rect x="758.7" y="357" width="14.4" height="15.0" fill="rgb(234,20,41)" rx="2" ry="2" />
<text  x="761.70" y="367.5" ></text>
</g>
<g >
<title>__GI___libc_malloc (24 samples, 0.77%)</title><rect x="823.2" y="373" width="9.2" height="15.0" fill="rgb(225,212,37)" rx="2" ry="2" />
<text  x="826.24" y="383.5" ></text>
</g>
<g >
<title>std::__pop_heap&lt;__gnu_cxx::__normal_iterator&lt;com::github::coderodde::pathfinders::util::HeapNode&lt;int, double&gt;**, std::vector&lt;com::github::coderodde::pathfinders::util::HeapNode&lt;int, double&gt;*, std::allocator&lt;com::github::coderodde::pathfinders::util::HeapNode&lt;int, double&gt;*&gt; &gt; &gt;, __gnu_cxx::__ops::_Iter_comp_iter&lt;com::github::coderodde::pathfinders::util::HeapNodeComparator&lt;int, double&gt; &gt; &gt; (226 samples, 7.27%)</title><rect x="668.3" y="469" width="85.8" height="15.0" fill="rgb(232,197,19)" rx="2" ry="2" />
<text  x="671.34" y="479.5" >std::__pop..</text>
</g>
<g >
<title>std::_Hashtable&lt;int, int, std::allocator&lt;int&gt;, std::__detail::_Identity, std::equal_to&lt;int&gt;, std::hash&lt;int&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, true, true&gt; &gt;::_M_rehash_aux (42 samples, 1.35%)</title><rect x="1073.8" y="421" width="16.0" height="15.0" fill="rgb(235,142,40)" rx="2" ry="2" />
<text  x="1076.82" y="431.5" ></text>
</g>
<g >
<title>__gnu_cxx::new_allocator&lt;std::__detail::_Hash_node_base*&gt;::allocate (30 samples, 0.97%)</title><rect x="904.9" y="357" width="11.4" height="15.0" fill="rgb(227,31,31)" rx="2" ry="2" />
<text  x="907.87" y="367.5" ></text>
</g>
<g >
<title>std::__detail::_Hashtable_base&lt;int, std::pair&lt;int const, double&gt;, std::__detail::_Select1st, std::equal_to&lt;int&gt;, std::hash&lt;int&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_equals (6 samples, 0.19%)</title><rect x="520.3" y="421" width="2.2" height="15.0" fill="rgb(251,20,31)" rx="2" ry="2" />
<text  x="523.27" y="431.5" ></text>
</g>
<g >
<title>std::pair&lt;int const, std::unordered_map&lt;int, double, std::hash&lt;int&gt;, std::equal_to&lt;int&gt;, std::allocator&lt;std::pair&lt;int const, double&gt; &gt; &gt; &gt;::pair (97 samples, 3.12%)</title><rect x="591.6" y="341" width="36.9" height="15.0" fill="rgb(247,198,45)" rx="2" ry="2" />
<text  x="594.65" y="351.5" >std..</text>
</g>
<g >
<title>std::allocator_traits&lt;std::allocator&lt;std::__detail::_Hash_node_base*&gt; &gt;::allocate (33 samples, 1.06%)</title><rect x="800.1" y="389" width="12.5" height="15.0" fill="rgb(226,131,14)" rx="2" ry="2" />
<text  x="803.08" y="399.5" ></text>
</g>
<g >
<title>std::construct_at&lt;std::pair&lt;int const, std::unordered_map&lt;int, double, std::hash&lt;int&gt;, std::equal_to&lt;int&gt;, std::allocator&lt;std::pair&lt;int const, double&gt; &gt; &gt; &gt;, std::pair&lt;int const, std::unordered_map&lt;int, double, std::hash&lt;int&gt;, std::equal_to&lt;int&gt;, std::allocator&lt;std::pair&lt;int const, double&gt; &gt; &gt; &gt; const&amp;&gt; (1 samples, 0.03%)</title><rect x="47.6" y="533" width="0.4" height="15.0" fill="rgb(214,199,40)" rx="2" ry="2" />
<text  x="50.59" y="543.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;int, int, std::allocator&lt;int&gt;, std::__detail::_Identity, std::equal_to&lt;int&gt;, std::hash&lt;int&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, true, true&gt; &gt;::_M_assign&lt;std::_Hashtable&lt;int, int, std::allocator&lt;int&gt;, std::__detail::_Identity, std::equal_to&lt;int&gt;, std::hash&lt;int&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, true, true&gt; &gt; const&amp;, std::__detail::_AllocNode&lt;std::allocator&lt;std::__detail::_Hash_node&lt;int, false&gt; &gt; &gt; &gt; (9 samples, 0.29%)</title><rect x="59.7" y="357" width="3.5" height="15.0" fill="rgb(231,217,36)" rx="2" ry="2" />
<text  x="62.74" y="367.5" ></text>
</g>
<g >
<title>std::construct_at&lt;std::pair&lt;int const, std::unordered_map&lt;int, double, std::hash&lt;int&gt;, std::equal_to&lt;int&gt;, std::allocator&lt;std::pair&lt;int const, double&gt; &gt; &gt; &gt;, std::pair&lt;int const, std::unordered_map&lt;int, double, std::hash&lt;int&gt;, std::equal_to&lt;int&gt;, std::allocator&lt;std::pair&lt;int const, double&gt; &gt; &gt; &gt; const&amp;&gt; (4 samples, 0.13%)</title><rect x="68.5" y="421" width="1.5" height="15.0" fill="rgb(234,176,3)" rx="2" ry="2" />
<text  x="71.47" y="431.5" ></text>
</g>
<g >
<title>std::unordered_map&lt;int, std::unordered_map&lt;int, double, std::hash&lt;int&gt;, std::equal_to&lt;int&gt;, std::allocator&lt;std::pair&lt;int const, double&gt; &gt; &gt;, std::hash&lt;int&gt;, std::equal_to&lt;int&gt;, std::allocator&lt;std::pair&lt;int const, std::unordered_map&lt;int, double, std::hash&lt;int&gt;, std::equal_to&lt;int&gt;, std::allocator&lt;std::pair&lt;int const, double&gt; &gt; &gt; &gt; &gt; &gt;::unordered_map (5 samples, 0.16%)</title><rect x="68.1" y="517" width="1.9" height="15.0" fill="rgb(221,152,53)" rx="2" ry="2" />
<text  x="71.09" y="527.5" ></text>
</g>
<g >
<title>checked_request2size (1 samples, 0.03%)</title><rect x="601.1" y="165" width="0.4" height="15.0" fill="rgb(208,86,12)" rx="2" ry="2" />
<text  x="604.14" y="175.5" ></text>
</g>
<g >
<title>std::__detail::_Mod_range_hashing::operator (4 samples, 0.13%)</title><rect x="812.6" y="405" width="1.5" height="15.0" fill="rgb(227,124,27)" rx="2" ry="2" />
<text  x="815.61" y="415.5" ></text>
</g>
<g >
<title>_int_free (3 samples, 0.10%)</title><rect x="87.1" y="501" width="1.1" height="15.0" fill="rgb(228,173,10)" rx="2" ry="2" />
<text  x="90.07" y="511.5" ></text>
</g>
<g >
<title>std::construct_at&lt;std::pair&lt;int const, double&gt;, std::pair&lt;int const, double&gt; const&amp;&gt; (2 samples, 0.06%)</title><rect x="69.2" y="293" width="0.8" height="15.0" fill="rgb(244,163,32)" rx="2" ry="2" />
<text  x="72.23" y="303.5" ></text>
</g>
<g >
<title>tasklet_action_common.isra.0 (1 samples, 0.03%)</title><rect x="956.9" y="373" width="0.4" height="15.0" fill="rgb(230,80,46)" rx="2" ry="2" />
<text  x="959.89" y="383.5" ></text>
</g>
<g >
<title>asm_common_interrupt (1 samples, 0.03%)</title><rect x="1187.3" y="357" width="0.4" height="15.0" fill="rgb(241,132,53)" rx="2" ry="2" />
<text  x="1190.34" y="367.5" ></text>
</g>
<g >
<title>std::__detail::_Hashtable_base&lt;int, std::pair&lt;int const, EuclideanCoordinates&gt;, std::__detail::_Select1st, std::equal_to&lt;int&gt;, std::hash&lt;int&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_equals (1 samples, 0.03%)</title><rect x="72.6" y="469" width="0.4" height="15.0" fill="rgb(211,23,38)" rx="2" ry="2" />
<text  x="75.64" y="479.5" ></text>
</g>
<g >
<title>std::allocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;int const, int*&gt;, false&gt; &gt;::allocate (47 samples, 1.51%)</title><rect x="936.0" y="421" width="17.8" height="15.0" fill="rgb(209,15,22)" rx="2" ry="2" />
<text  x="939.00" y="431.5" ></text>
</g>
<g >
<title>__GI___libc_free (17 samples, 0.55%)</title><rect x="535.5" y="485" width="6.4" height="15.0" fill="rgb(213,12,3)" rx="2" ry="2" />
<text  x="538.46" y="495.5" ></text>
</g>
<g >
<title>std::__detail::_AllocNode&lt;std::allocator&lt;std::__detail::_Hash_node&lt;int, false&gt; &gt; &gt;::operator (1 samples, 0.03%)</title><rect x="67.7" y="469" width="0.4" height="15.0" fill="rgb(211,198,35)" rx="2" ry="2" />
<text  x="70.71" y="479.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;int, std::pair&lt;int const, std::unordered_set&lt;int, std::hash&lt;int&gt;, std::equal_to&lt;int&gt;, std::allocator&lt;int&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;int const, std::unordered_set&lt;int, std::hash&lt;int&gt;, std::equal_to&lt;int&gt;, std::allocator&lt;int&gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;int&gt;, std::hash&lt;int&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_assign&lt;std::_Hashtable&lt;int, std::pair&lt;int const, std::unordered_set&lt;int, std::hash&lt;int&gt;, std::equal_to&lt;int&gt;, std::allocator&lt;int&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;int const, std::unordered_set&lt;int, std::hash&lt;int&gt;, std::equal_to&lt;int&gt;, std::allocator&lt;int&gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;int&gt;, std::hash&lt;int&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt; const&amp;, std::__detail::_AllocNode&lt;std::allocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;int const, std::unordered_set&lt;int, std::hash&lt;int&gt;, std::equal_to&lt;int&gt;, std::allocator&lt;int&gt; &gt; &gt;, false&gt; &gt; &gt; &gt; (9 samples, 0.29%)</title><rect x="59.7" y="485" width="3.5" height="15.0" fill="rgb(237,149,21)" rx="2" ry="2" />
<text  x="62.74" y="495.5" ></text>
</g>
<g >
<title>unlink_chunk (8 samples, 0.26%)</title><rect x="999.4" y="341" width="3.0" height="15.0" fill="rgb(208,105,51)" rx="2" ry="2" />
<text  x="1002.41" y="351.5" ></text>
</g>
<g >
<title>_int_free (16 samples, 0.51%)</title><rect x="423.1" y="229" width="6.1" height="15.0" fill="rgb(211,164,19)" rx="2" ry="2" />
<text  x="426.08" y="239.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;int, std::pair&lt;int const, double&gt;, std::allocator&lt;std::pair&lt;int const, double&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;int&gt;, std::hash&lt;int&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::~_Hashtable (1 samples, 0.03%)</title><rect x="82.5" y="357" width="0.4" height="15.0" fill="rgb(251,149,47)" rx="2" ry="2" />
<text  x="85.52" y="367.5" ></text>
</g>
<g >
<title>_int_free (9 samples, 0.29%)</title><rect x="1013.5" y="357" width="3.4" height="15.0" fill="rgb(221,135,22)" rx="2" ry="2" />
<text  x="1016.46" y="367.5" ></text>
</g>
<g >
<title>_int_malloc (1 samples, 0.03%)</title><rect x="68.1" y="357" width="0.4" height="15.0" fill="rgb(230,11,39)" rx="2" ry="2" />
<text  x="71.09" y="367.5" ></text>
</g>
<g >
<title>xhci_queue_isoc_tx_prepare (1 samples, 0.03%)</title><rect x="1187.3" y="165" width="0.4" height="15.0" fill="rgb(245,1,11)" rx="2" ry="2" />
<text  x="1190.34" y="175.5" ></text>
</g>
<g >
<title>std::__push_heap&lt;__gnu_cxx::__normal_iterator&lt;com::github::coderodde::pathfinders::util::HeapNode&lt;int, double&gt;**, std::vector&lt;com::github::coderodde::pathfinders::util::HeapNode&lt;int, double&gt;*, std::allocator&lt;com::github::coderodde::pathfinders::util::HeapNode&lt;int, double&gt;*&gt; &gt; &gt;, long, com::github::coderodde::pathfinders::util::HeapNode&lt;int, double&gt;*, __gnu_cxx::__ops::_Iter_comp_val&lt;com::github::coderodde::pathfinders::util::HeapNodeComparator&lt;int, double&gt; &gt; &gt; (4 samples, 0.13%)</title><rect x="752.6" y="437" width="1.5" height="15.0" fill="rgb(232,127,16)" rx="2" ry="2" />
<text  x="755.63" y="447.5" ></text>
</g>
<g >
<title>[libstdc++.so.6.0.29] (1 samples, 0.03%)</title><rect x="628.5" y="485" width="0.4" height="15.0" fill="rgb(250,47,21)" rx="2" ry="2" />
<text  x="631.47" y="495.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;int, int, std::allocator&lt;int&gt;, std::__detail::_Identity, std::equal_to&lt;int&gt;, std::hash&lt;int&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, true, true&gt; &gt;::~_Hashtable (6 samples, 0.19%)</title><rect x="44.9" y="453" width="2.3" height="15.0" fill="rgb(238,211,50)" rx="2" ry="2" />
<text  x="47.93" y="463.5" ></text>
</g>
<g >
<title>std::construct_at&lt;std::pair&lt;int const, std::unordered_set&lt;int, std::hash&lt;int&gt;, std::equal_to&lt;int&gt;, std::allocator&lt;int&gt; &gt; &gt;, std::pair&lt;int const, std::unordered_set&lt;int, std::hash&lt;int&gt;, std::equal_to&lt;int&gt;, std::allocator&lt;int&gt; &gt; &gt; const&amp;&gt; (1 samples, 0.03%)</title><rect x="59.4" y="405" width="0.3" height="15.0" fill="rgb(251,59,27)" rx="2" ry="2" />
<text  x="62.36" y="415.5" ></text>
</g>
<g >
<title>std::__detail::_Mod_range_hashing::operator (2 samples, 0.06%)</title><rect x="1085.2" y="389" width="0.8" height="15.0" fill="rgb(217,78,47)" rx="2" ry="2" />
<text  x="1088.21" y="399.5" ></text>
</g>
<g >
<title>std::allocator_traits&lt;std::allocator&lt;std::__detail::_Hash_node_base*&gt; &gt;::deallocate (9 samples, 0.29%)</title><rect x="505.8" y="405" width="3.5" height="15.0" fill="rgb(226,52,41)" rx="2" ry="2" />
<text  x="508.84" y="415.5" ></text>
</g>
<g >
<title>common_interrupt (1 samples, 0.03%)</title><rect x="139.8" y="293" width="0.4" height="15.0" fill="rgb(206,3,14)" rx="2" ry="2" />
<text  x="142.85" y="303.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_code_base&lt;int, int, std::__detail::_Identity, std::hash&lt;int&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, false&gt;::_M_bucket_index (10 samples, 0.32%)</title><rect x="1017.3" y="453" width="3.7" height="15.0" fill="rgb(229,159,49)" rx="2" ry="2" />
<text  x="1020.25" y="463.5" ></text>
</g>
<g >
<title>unlink_chunk (4 samples, 0.13%)</title><rect x="181.2" y="181" width="1.5" height="15.0" fill="rgb(213,181,4)" rx="2" ry="2" />
<text  x="184.23" y="191.5" ></text>
</g>
<g >
<title>__softirqentry_text_start (2 samples, 0.06%)</title><rect x="260.2" y="133" width="0.8" height="15.0" fill="rgb(246,7,48)" rx="2" ry="2" />
<text  x="263.20" y="143.5" ></text>
</g>
<g >
<title>com::github::coderodde::pathfinders::runDijkstrasAlgorithm&lt;int, double&gt; (5 samples, 0.16%)</title><rect x="37.0" y="565" width="1.9" height="15.0" fill="rgb(227,213,31)" rx="2" ry="2" />
<text  x="39.96" y="575.5" ></text>
</g>
<g >
<title>xhci_urb_enqueue (1 samples, 0.03%)</title><rect x="772.7" y="133" width="0.4" height="15.0" fill="rgb(238,215,49)" rx="2" ry="2" />
<text  x="775.75" y="143.5" ></text>
</g>
<g >
<title>__GI___libc_malloc (104 samples, 3.35%)</title><rect x="628.9" y="485" width="39.4" height="15.0" fill="rgb(251,128,34)" rx="2" ry="2" />
<text  x="631.85" y="495.5" >__G..</text>
</g>
<g >
<title>std::__pop_heap&lt;__gnu_cxx::__normal_iterator&lt;com::github::coderodde::pathfinders::util::HeapNode&lt;int, double&gt;**, std::vector&lt;com::github::coderodde::pathfinders::util::HeapNode&lt;int, double&gt;*, std::allocator&lt;com::github::coderodde::pathfinders::util::HeapNode&lt;int, double&gt;*&gt; &gt; &gt;, __gnu_cxx::__ops::_Iter_comp_iter&lt;com::github::coderodde::pathfinders::util::HeapNodeComparator&lt;int, double&gt; &gt; &gt; (68 samples, 2.19%)</title><rect x="549.1" y="453" width="25.8" height="15.0" fill="rgb(233,29,11)" rx="2" ry="2" />
<text  x="552.12" y="463.5" >s..</text>
</g>
<g >
<title>std::allocator&lt;std::__detail::_Hash_node&lt;int, false&gt; &gt;::deallocate (6 samples, 0.19%)</title><rect x="44.9" y="357" width="2.3" height="15.0" fill="rgb(221,222,48)" rx="2" ry="2" />
<text  x="47.93" y="367.5" ></text>
</g>
<g >
<title>__usb_hcd_giveback_urb (1 samples, 0.03%)</title><rect x="419.7" y="213" width="0.3" height="15.0" fill="rgb(235,46,44)" rx="2" ry="2" />
<text  x="422.66" y="223.5" ></text>
</g>
<g >
<title>asm_sysvec_apic_timer_interrupt (1 samples, 0.03%)</title><rect x="180.5" y="181" width="0.3" height="15.0" fill="rgb(221,101,49)" rx="2" ry="2" />
<text  x="183.47" y="191.5" ></text>
</g>
<g >
<title>std::allocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;int const, int*&gt;, false&gt; &gt;::deallocate (12 samples, 0.39%)</title><rect x="1012.3" y="389" width="4.6" height="15.0" fill="rgb(209,150,48)" rx="2" ry="2" />
<text  x="1015.32" y="399.5" ></text>
</g>
<g >
<title>std::__detail::_Hashtable_alloc&lt;std::allocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;int const, std::unordered_map&lt;int, double, std::hash&lt;int&gt;, std::equal_to&lt;int&gt;, std::allocator&lt;std::pair&lt;int const, double&gt; &gt; &gt; &gt;, false&gt; &gt; &gt;::_M_deallocate_nodes (1 samples, 0.03%)</title><rect x="82.5" y="453" width="0.4" height="15.0" fill="rgb(244,103,53)" rx="2" ry="2" />
<text  x="85.52" y="463.5" ></text>
</g>
<g >
<title>std::allocator&lt;std::__detail::_Hash_node_base*&gt;::allocate (13 samples, 0.42%)</title><rect x="89.4" y="389" width="4.9" height="15.0" fill="rgb(209,142,43)" rx="2" ry="2" />
<text  x="92.35" y="399.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;int, std::pair&lt;int const, double&gt;, std::allocator&lt;std::pair&lt;int const, double&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;int&gt;, std::hash&lt;int&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_find_node (42 samples, 1.35%)</title><rect x="774.3" y="469" width="15.9" height="15.0" fill="rgb(234,88,49)" rx="2" ry="2" />
<text  x="777.27" y="479.5" ></text>
</g>
<g >
<title>__common_interrupt (2 samples, 0.06%)</title><rect x="751.9" y="389" width="0.7" height="15.0" fill="rgb(251,22,44)" rx="2" ry="2" />
<text  x="754.87" y="399.5" ></text>
</g>
<g >
<title>__gnu_cxx::new_allocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;int const, double&gt;, false&gt; &gt;::allocate (60 samples, 1.93%)</title><rect x="604.6" y="213" width="22.7" height="15.0" fill="rgb(237,3,23)" rx="2" ry="2" />
<text  x="607.56" y="223.5" >_..</text>
</g>
<g >
<title>intel_pmu_enable_all (4 samples, 0.13%)</title><rect x="1188.5" y="389" width="1.5" height="15.0" fill="rgb(237,102,44)" rx="2" ry="2" />
<text  x="1191.48" y="399.5" ></text>
</g>
<g >
<title>std::equal_to&lt;int&gt;::operator (35 samples, 1.13%)</title><rect x="302.0" y="405" width="13.3" height="15.0" fill="rgb(244,92,54)" rx="2" ry="2" />
<text  x="304.96" y="415.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;int, std::pair&lt;int const, EuclideanCoordinates&gt;, std::allocator&lt;std::pair&lt;int const, EuclideanCoordinates&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;int&gt;, std::hash&lt;int&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_rehash (1 samples, 0.03%)</title><rect x="73.0" y="485" width="0.4" height="15.0" fill="rgb(242,156,6)" rx="2" ry="2" />
<text  x="76.02" y="495.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;int, int, std::allocator&lt;int&gt;, std::__detail::_Identity, std::equal_to&lt;int&gt;, std::hash&lt;int&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, true, true&gt; &gt;::_M_insert_unique_node (1 samples, 0.03%)</title><rect x="67.3" y="469" width="0.4" height="15.0" fill="rgb(232,83,38)" rx="2" ry="2" />
<text  x="70.33" y="479.5" ></text>
</g>
<g >
<title>malloc_consolidate (1 samples, 0.03%)</title><rect x="82.9" y="517" width="0.4" height="15.0" fill="rgb(206,12,30)" rx="2" ry="2" />
<text  x="85.90" y="527.5" ></text>
</g>
<g >
<title>xhci_ring_ep_doorbell (1 samples, 0.03%)</title><rect x="412.8" y="85" width="0.4" height="15.0" fill="rgb(218,221,44)" rx="2" ry="2" />
<text  x="415.82" y="95.5" ></text>
</g>
<g >
<title>std::unordered_map&lt;int, int*, std::hash&lt;int&gt;, std::equal_to&lt;int&gt;, std::allocator&lt;std::pair&lt;int const, int*&gt; &gt; &gt;::~unordered_map (111 samples, 3.57%)</title><rect x="974.7" y="501" width="42.2" height="15.0" fill="rgb(226,143,25)" rx="2" ry="2" />
<text  x="977.73" y="511.5" >std..</text>
</g>
<g >
<title>std::__detail::_Hashtable_alloc&lt;std::allocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;int const, int*&gt;, false&gt; &gt; &gt;::_M_deallocate_node_ptr (12 samples, 0.39%)</title><rect x="1012.3" y="421" width="4.6" height="15.0" fill="rgb(209,83,42)" rx="2" ry="2" />
<text  x="1015.32" y="431.5" ></text>
</g>
<g >
<title>std::unordered_map&lt;int, std::unordered_set&lt;int, std::hash&lt;int&gt;, std::equal_to&lt;int&gt;, std::allocator&lt;int&gt; &gt;, std::hash&lt;int&gt;, std::equal_to&lt;int&gt;, std::allocator&lt;std::pair&lt;int const, std::unordered_set&lt;int, std::hash&lt;int&gt;, std::equal_to&lt;int&gt;, std::allocator&lt;int&gt; &gt; &gt; &gt; &gt;::unordered_map (9 samples, 0.29%)</title><rect x="59.7" y="517" width="3.5" height="15.0" fill="rgb(245,57,7)" rx="2" ry="2" />
<text  x="62.74" y="527.5" ></text>
</g>
<g >
<title>operator new (21 samples, 0.68%)</title><rect x="1077.2" y="325" width="8.0" height="15.0" fill="rgb(222,30,54)" rx="2" ry="2" />
<text  x="1080.24" y="335.5" ></text>
</g>
<g >
<title>[libstdc++.so.6.0.29] (1 samples, 0.03%)</title><rect x="86.3" y="501" width="0.4" height="15.0" fill="rgb(222,182,51)" rx="2" ry="2" />
<text  x="89.31" y="511.5" ></text>
</g>
<g >
<title>__gnu_cxx::new_allocator&lt;std::__detail::_Hash_node_base*&gt;::allocate (21 samples, 0.68%)</title><rect x="1077.2" y="341" width="8.0" height="15.0" fill="rgb(206,212,51)" rx="2" ry="2" />
<text  x="1080.24" y="351.5" ></text>
</g>
<g >
<title>_int_malloc (13 samples, 0.42%)</title><rect x="1182.8" y="405" width="4.9" height="15.0" fill="rgb(216,193,6)" rx="2" ry="2" />
<text  x="1185.79" y="415.5" ></text>
</g>
<g >
<title>std::unordered_map&lt;int, double, std::hash&lt;int&gt;, std::equal_to&lt;int&gt;, std::allocator&lt;std::pair&lt;int const, double&gt; &gt; &gt;::operator[] (3 samples, 0.10%)</title><rect x="522.5" y="485" width="1.2" height="15.0" fill="rgb(225,33,16)" rx="2" ry="2" />
<text  x="525.55" y="495.5" ></text>
</g>
<g >
<title>std::allocator_traits&lt;std::allocator&lt;std::__detail::_Hash_node_base*&gt; &gt;::deallocate (71 samples, 2.28%)</title><rect x="975.5" y="421" width="26.9" height="15.0" fill="rgb(225,33,42)" rx="2" ry="2" />
<text  x="978.49" y="431.5" >s..</text>
</g>
<g >
<title>std::pair&lt;int const, std::unordered_set&lt;int, std::hash&lt;int&gt;, std::equal_to&lt;int&gt;, std::allocator&lt;int&gt; &gt; &gt;::pair (346 samples, 11.13%)</title><rect x="136.8" y="373" width="131.4" height="15.0" fill="rgb(229,52,20)" rx="2" ry="2" />
<text  x="139.81" y="383.5" >std::pair&lt;int co..</text>
</g>
<g >
<title>common_interrupt (1 samples, 0.03%)</title><rect x="1182.0" y="197" width="0.4" height="15.0" fill="rgb(251,126,1)" rx="2" ry="2" />
<text  x="1185.03" y="207.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;int, std::pair&lt;int const, int*&gt;, std::allocator&lt;std::pair&lt;int const, int*&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;int&gt;, std::hash&lt;int&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_deallocate_buckets (71 samples, 2.28%)</title><rect x="975.5" y="453" width="26.9" height="15.0" fill="rgb(250,30,25)" rx="2" ry="2" />
<text  x="978.49" y="463.5" >s..</text>
</g>
<g >
<title>__handle_mm_fault (1 samples, 0.03%)</title><rect x="68.1" y="277" width="0.4" height="15.0" fill="rgb(249,156,44)" rx="2" ry="2" />
<text  x="71.09" y="287.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;int, std::pair&lt;int const, std::unordered_map&lt;int, double, std::hash&lt;int&gt;, std::equal_to&lt;int&gt;, std::allocator&lt;std::pair&lt;int const, double&gt; &gt; &gt; &gt;, std::allocator&lt;std::pair&lt;int const, std::unordered_map&lt;int, double, std::hash&lt;int&gt;, std::equal_to&lt;int&gt;, std::allocator&lt;std::pair&lt;int const, double&gt; &gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;int&gt;, std::hash&lt;int&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_find_before_node (3 samples, 0.10%)</title><rect x="70.4" y="469" width="1.1" height="15.0" fill="rgb(212,41,14)" rx="2" ry="2" />
<text  x="73.37" y="479.5" ></text>
</g>
<g >
<title>unlink_chunk (24 samples, 0.77%)</title><rect x="273.5" y="309" width="9.1" height="15.0" fill="rgb(211,143,13)" rx="2" ry="2" />
<text  x="276.49" y="319.5" ></text>
</g>
<g >
<title>std::unordered_set&lt;int, std::hash&lt;int&gt;, std::equal_to&lt;int&gt;, std::allocator&lt;int&gt; &gt;::unordered_set (346 samples, 11.13%)</title><rect x="136.8" y="357" width="131.4" height="15.0" fill="rgb(253,149,29)" rx="2" ry="2" />
<text  x="139.81" y="367.5" >std::unordered_s..</text>
</g>
<g >
<title>retire_capture_urb (1 samples, 0.03%)</title><rect x="134.2" y="165" width="0.3" height="15.0" fill="rgb(219,131,28)" rx="2" ry="2" />
<text  x="137.15" y="175.5" ></text>
</g>
<g >
<title>intel_pmu_enable_all (1 samples, 0.03%)</title><rect x="579.9" y="213" width="0.4" height="15.0" fill="rgb(227,138,10)" rx="2" ry="2" />
<text  x="582.88" y="223.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_node&lt;std::pair&lt;int const, int*&gt;, false&gt;::_Hash_node (2 samples, 0.06%)</title><rect x="958.0" y="421" width="0.8" height="15.0" fill="rgb(208,146,7)" rx="2" ry="2" />
<text  x="961.02" y="431.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;int, std::pair&lt;int const, std::unordered_set&lt;int, std::hash&lt;int&gt;, std::equal_to&lt;int&gt;, std::allocator&lt;int&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;int const, std::unordered_set&lt;int, std::hash&lt;int&gt;, std::equal_to&lt;int&gt;, std::allocator&lt;int&gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;int&gt;, std::hash&lt;int&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_deallocate_buckets (258 samples, 8.30%)</title><rect x="315.3" y="437" width="97.9" height="15.0" fill="rgb(253,1,36)" rx="2" ry="2" />
<text  x="318.25" y="447.5" >std::_Hasht..</text>
</g>
<g >
<title>std::__detail::_Hashtable_alloc&lt;std::allocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;int const, std::unordered_set&lt;int, std::hash&lt;int&gt;, std::equal_to&lt;int&gt;, std::allocator&lt;int&gt; &gt; &gt;, false&gt; &gt; &gt;::_M_deallocate_node (8 samples, 0.26%)</title><rect x="44.2" y="533" width="3.0" height="15.0" fill="rgb(225,6,22)" rx="2" ry="2" />
<text  x="47.17" y="543.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;int, int, std::allocator&lt;int&gt;, std::__detail::_Identity, std::equal_to&lt;int&gt;, std::hash&lt;int&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, true, true&gt; &gt;::_M_begin (2 samples, 0.06%)</title><rect x="431.0" y="309" width="0.8" height="15.0" fill="rgb(210,152,11)" rx="2" ry="2" />
<text  x="434.05" y="319.5" ></text>
</g>
<g >
<title>operator new (1 samples, 0.03%)</title><rect x="68.8" y="261" width="0.4" height="15.0" fill="rgb(235,95,46)" rx="2" ry="2" />
<text  x="71.85" y="271.5" ></text>
</g>
<g >
<title>std::__detail::_Hashtable_alloc&lt;std::allocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;int const, double&gt;, false&gt; &gt; &gt;::_M_allocate_node&lt;std::piecewise_construct_t const&amp;, std::tuple&lt;int const&amp;&gt;, std::tuple&lt;&gt; &gt; (1 samples, 0.03%)</title><rect x="48.0" y="533" width="0.3" height="15.0" fill="rgb(227,140,32)" rx="2" ry="2" />
<text  x="50.97" y="543.5" ></text>
</g>
<g >
<title>__GI___libc_malloc (30 samples, 0.97%)</title><rect x="904.9" y="325" width="11.4" height="15.0" fill="rgb(250,69,43)" rx="2" ry="2" />
<text  x="907.87" y="335.5" ></text>
</g>
<g >
<title>alloc_perturb (1 samples, 0.03%)</title><rect x="626.2" y="149" width="0.4" height="15.0" fill="rgb(245,119,25)" rx="2" ry="2" />
<text  x="629.20" y="159.5" ></text>
</g>
<g >
<title>std::unordered_map&lt;int, double, std::hash&lt;int&gt;, std::equal_to&lt;int&gt;, std::allocator&lt;std::pair&lt;int const, double&gt; &gt; &gt;::unordered_map (4 samples, 0.13%)</title><rect x="68.5" y="389" width="1.5" height="15.0" fill="rgb(218,75,5)" rx="2" ry="2" />
<text  x="71.47" y="399.5" ></text>
</g>
<g >
<title>tasklet_hi_action (1 samples, 0.03%)</title><rect x="419.7" y="261" width="0.3" height="15.0" fill="rgb(233,142,35)" rx="2" ry="2" />
<text  x="422.66" y="271.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;int, std::pair&lt;int const, int*&gt;, std::allocator&lt;std::pair&lt;int const, int*&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;int&gt;, std::hash&lt;int&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_bucket_index (9 samples, 0.29%)</title><rect x="875.3" y="437" width="3.4" height="15.0" fill="rgb(240,83,52)" rx="2" ry="2" />
<text  x="878.26" y="447.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;int, std::pair&lt;int const, std::unordered_set&lt;int, std::hash&lt;int&gt;, std::equal_to&lt;int&gt;, std::allocator&lt;int&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;int const, std::unordered_set&lt;int, std::hash&lt;int&gt;, std::equal_to&lt;int&gt;, std::allocator&lt;int&gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;int&gt;, std::hash&lt;int&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_bucket_index (3 samples, 0.10%)</title><rect x="94.3" y="437" width="1.1" height="15.0" fill="rgb(220,85,23)" rx="2" ry="2" />
<text  x="97.29" y="447.5" ></text>
</g>
<g >
<title>__gnu_cxx::new_allocator&lt;std::__detail::_Hash_node_base*&gt;::deallocate (21 samples, 0.68%)</title><rect x="1090.5" y="389" width="8.0" height="15.0" fill="rgb(237,97,52)" rx="2" ry="2" />
<text  x="1093.53" y="399.5" ></text>
</g>
<g >
<title>std::__detail::_Mod_range_hashing::operator (1 samples, 0.03%)</title><rect x="523.7" y="421" width="0.4" height="15.0" fill="rgb(227,221,38)" rx="2" ry="2" />
<text  x="526.69" y="431.5" ></text>
</g>
<g >
<title>operator delete (1 samples, 0.03%)</title><rect x="546.8" y="357" width="0.4" height="15.0" fill="rgb(247,11,21)" rx="2" ry="2" />
<text  x="549.85" y="367.5" ></text>
</g>
<g >
<title>std::destroy_at&lt;std::pair&lt;int const, std::unordered_map&lt;int, double, std::hash&lt;int&gt;, std::equal_to&lt;int&gt;, std::allocator&lt;std::pair&lt;int const, double&gt; &gt; &gt; &gt; &gt; (2 samples, 0.06%)</title><rect x="48.7" y="501" width="0.8" height="15.0" fill="rgb(205,116,13)" rx="2" ry="2" />
<text  x="51.73" y="511.5" ></text>
</g>
<g >
<title>__gnu_cxx::new_allocator&lt;std::__detail::_Hash_node_base*&gt;::allocate (111 samples, 3.57%)</title><rect x="140.6" y="245" width="42.1" height="15.0" fill="rgb(220,229,8)" rx="2" ry="2" />
<text  x="143.60" y="255.5" >__g..</text>
</g>
<g >
<title>checked_request2size (1 samples, 0.03%)</title><rect x="591.3" y="293" width="0.3" height="15.0" fill="rgb(249,38,49)" rx="2" ry="2" />
<text  x="594.27" y="303.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_code_base&lt;int, int, std::__detail::_Identity, std::hash&lt;int&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, false&gt;::_M_bucket_index (2 samples, 0.06%)</title><rect x="1085.2" y="405" width="0.8" height="15.0" fill="rgb(239,83,47)" rx="2" ry="2" />
<text  x="1088.21" y="415.5" ></text>
</g>
<g >
<title>usb_giveback_urb_bh (1 samples, 0.03%)</title><rect x="956.9" y="357" width="0.4" height="15.0" fill="rgb(217,199,28)" rx="2" ry="2" />
<text  x="959.89" y="367.5" ></text>
</g>
<g >
<title>std::allocator_traits&lt;std::allocator&lt;std::__detail::_Hash_node_base*&gt; &gt;::deallocate (24 samples, 0.77%)</title><rect x="420.0" y="277" width="9.2" height="15.0" fill="rgb(226,192,6)" rx="2" ry="2" />
<text  x="423.04" y="287.5" ></text>
</g>
<g >
<title>exit_to_user_mode_prepare (1 samples, 0.03%)</title><rect x="1187.7" y="517" width="0.4" height="15.0" fill="rgb(220,128,9)" rx="2" ry="2" />
<text  x="1190.72" y="527.5" ></text>
</g>
<g >
<title>handle_mm_fault (1 samples, 0.03%)</title><rect x="67.7" y="293" width="0.4" height="15.0" fill="rgb(243,191,10)" rx="2" ry="2" />
<text  x="70.71" y="303.5" ></text>
</g>
<g >
<title>asm_common_interrupt (2 samples, 0.06%)</title><rect x="260.2" y="181" width="0.8" height="15.0" fill="rgb(228,93,23)" rx="2" ry="2" />
<text  x="263.20" y="191.5" ></text>
</g>
<g >
<title>__usb_hcd_giveback_urb (1 samples, 0.03%)</title><rect x="799.7" y="309" width="0.4" height="15.0" fill="rgb(252,215,52)" rx="2" ry="2" />
<text  x="802.70" y="319.5" ></text>
</g>
<g >
<title>usb_submit_urb (1 samples, 0.03%)</title><rect x="799.7" y="277" width="0.4" height="15.0" fill="rgb(248,211,33)" rx="2" ry="2" />
<text  x="802.70" y="287.5" ></text>
</g>
<g >
<title>common_interrupt (1 samples, 0.03%)</title><rect x="1046.1" y="373" width="0.4" height="15.0" fill="rgb(220,171,9)" rx="2" ry="2" />
<text  x="1049.11" y="383.5" ></text>
</g>
<g >
<title>malloc_consolidate (21 samples, 0.68%)</title><rect x="1090.5" y="357" width="8.0" height="15.0" fill="rgb(222,130,7)" rx="2" ry="2" />
<text  x="1093.53" y="367.5" ></text>
</g>
<g >
<title>std::construct_at&lt;std::pair&lt;int const, std::unordered_map&lt;int, double, std::hash&lt;int&gt;, std::equal_to&lt;int&gt;, std::allocator&lt;std::pair&lt;int const, double&gt; &gt; &gt; &gt;, std::pair&lt;int const, std::unordered_map&lt;int, double, std::hash&lt;int&gt;, std::equal_to&lt;int&gt;, std::allocator&lt;std::pair&lt;int const, double&gt; &gt; &gt; &gt; const&amp;&gt; (97 samples, 3.12%)</title><rect x="591.6" y="357" width="36.9" height="15.0" fill="rgb(205,204,36)" rx="2" ry="2" />
<text  x="594.65" y="367.5" >std..</text>
</g>
<g >
<title>createRandomGraphData (37 samples, 1.19%)</title><rect x="59.4" y="549" width="14.0" height="15.0" fill="rgb(231,106,9)" rx="2" ry="2" />
<text  x="62.36" y="559.5" ></text>
</g>
<g >
<title>unlink_chunk (10 samples, 0.32%)</title><rect x="1094.7" y="341" width="3.8" height="15.0" fill="rgb(227,150,17)" rx="2" ry="2" />
<text  x="1097.70" y="351.5" ></text>
</g>
<g >
<title>xhci_queue_isoc_tx_prepare (1 samples, 0.03%)</title><rect x="799.7" y="229" width="0.4" height="15.0" fill="rgb(235,126,54)" rx="2" ry="2" />
<text  x="802.70" y="239.5" ></text>
</g>
<g >
<title>std::__detail::_Hashtable_alloc&lt;std::allocator&lt;std::__detail::_Hash_node&lt;int, false&gt; &gt; &gt;::_M_allocate_node&lt;int const&amp;&gt; (217 samples, 6.98%)</title><rect x="184.6" y="293" width="82.4" height="15.0" fill="rgb(219,199,2)" rx="2" ry="2" />
<text  x="187.65" y="303.5" >std::__de..</text>
</g>
<g >
<title>std::__detail::_Hashtable_alloc&lt;std::allocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;int const, int*&gt;, false&gt; &gt; &gt;::_M_deallocate_node (7 samples, 0.23%)</title><rect x="544.6" y="437" width="2.6" height="15.0" fill="rgb(239,192,51)" rx="2" ry="2" />
<text  x="547.57" y="447.5" ></text>
</g>
<g >
<title>std::allocator_traits&lt;std::allocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;int const, double&gt;, false&gt; &gt; &gt;::allocate (1 samples, 0.03%)</title><rect x="47.6" y="421" width="0.4" height="15.0" fill="rgb(216,191,19)" rx="2" ry="2" />
<text  x="50.59" y="431.5" ></text>
</g>
<g >
<title>__softirqentry_text_start (1 samples, 0.03%)</title><rect x="829.7" y="293" width="0.4" height="15.0" fill="rgb(248,204,19)" rx="2" ry="2" />
<text  x="832.70" y="303.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;int, int, std::allocator&lt;int&gt;, std::__detail::_Identity, std::equal_to&lt;int&gt;, std::hash&lt;int&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, true, true&gt; &gt;::_M_bucket_index (4 samples, 0.13%)</title><rect x="59.7" y="341" width="1.6" height="15.0" fill="rgb(243,20,2)" rx="2" ry="2" />
<text  x="62.74" y="351.5" ></text>
</g>
<g >
<title>usb_submit_urb (2 samples, 0.06%)</title><rect x="392.3" y="181" width="0.8" height="15.0" fill="rgb(222,160,5)" rx="2" ry="2" />
<text  x="395.32" y="191.5" ></text>
</g>
<g >
<title>unlink_chunk (6 samples, 0.19%)</title><rect x="841.1" y="341" width="2.3" height="15.0" fill="rgb(215,73,10)" rx="2" ry="2" />
<text  x="844.09" y="351.5" ></text>
</g>
<g >
<title>[libstdc++.so.6.0.29] (5 samples, 0.16%)</title><rect x="414.3" y="341" width="1.9" height="15.0" fill="rgb(210,77,27)" rx="2" ry="2" />
<text  x="417.34" y="351.5" ></text>
</g>
<g >
<title>__gnu_cxx::__ops::_Iter_comp_val&lt;com::github::coderodde::pathfinders::util::HeapNodeComparator&lt;int, double&gt; &gt;::operator (3 samples, 0.10%)</title><rect x="753.0" y="421" width="1.1" height="15.0" fill="rgb(237,116,15)" rx="2" ry="2" />
<text  x="756.01" y="431.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;int, std::pair&lt;int const, std::unordered_map&lt;int, double, std::hash&lt;int&gt;, std::equal_to&lt;int&gt;, std::allocator&lt;std::pair&lt;int const, double&gt; &gt; &gt; &gt;, std::allocator&lt;std::pair&lt;int const, std::unordered_map&lt;int, double, std::hash&lt;int&gt;, std::equal_to&lt;int&gt;, std::allocator&lt;std::pair&lt;int const, double&gt; &gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;int&gt;, std::hash&lt;int&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_find_node (22 samples, 0.71%)</title><rect x="524.1" y="453" width="8.3" height="15.0" fill="rgb(250,132,49)" rx="2" ry="2" />
<text  x="527.07" y="463.5" ></text>
</g>
<g >
<title>xhci_msi_irq (1 samples, 0.03%)</title><rect x="858.2" y="309" width="0.4" height="15.0" fill="rgb(236,38,10)" rx="2" ry="2" />
<text  x="861.17" y="319.5" ></text>
</g>
<g >
<title>std::__detail::_Hashtable_alloc&lt;std::allocator&lt;std::__detail::_Hash_node&lt;int, false&gt; &gt; &gt;::_M_allocate_node&lt;int const&amp;&gt; (37 samples, 1.19%)</title><rect x="268.6" y="421" width="14.0" height="15.0" fill="rgb(243,193,17)" rx="2" ry="2" />
<text  x="271.55" y="431.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;int, std::pair&lt;int const, double&gt;, std::allocator&lt;std::pair&lt;int const, double&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;int&gt;, std::hash&lt;int&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::clear (39 samples, 1.25%)</title><rect x="843.4" y="469" width="14.8" height="15.0" fill="rgb(251,174,23)" rx="2" ry="2" />
<text  x="846.37" y="479.5" ></text>
</g>
<g >
<title>xhci_urb_enqueue (1 samples, 0.03%)</title><rect x="956.9" y="277" width="0.4" height="15.0" fill="rgb(244,74,44)" rx="2" ry="2" />
<text  x="959.89" y="287.5" ></text>
</g>
<g >
<title>xhci_urb_enqueue (1 samples, 0.03%)</title><rect x="412.8" y="133" width="0.4" height="15.0" fill="rgb(250,197,23)" rx="2" ry="2" />
<text  x="415.82" y="143.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;int, std::pair&lt;int const, double&gt;, std::allocator&lt;std::pair&lt;int const, double&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;int&gt;, std::hash&lt;int&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::clear (56 samples, 1.80%)</title><rect x="1161.5" y="341" width="21.3" height="15.0" fill="rgb(234,174,15)" rx="2" ry="2" />
<text  x="1164.53" y="351.5" >s..</text>
</g>
<g >
<title>std::__detail::_Hashtable_alloc&lt;std::allocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;int const, int*&gt;, false&gt; &gt; &gt;::_M_allocate_node&lt;std::piecewise_construct_t const&amp;, std::tuple&lt;int const&amp;&gt;, std::tuple&lt;&gt; &gt; (48 samples, 1.54%)</title><rect x="935.6" y="453" width="18.2" height="15.0" fill="rgb(243,181,3)" rx="2" ry="2" />
<text  x="938.62" y="463.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;int, std::pair&lt;int const, double&gt;, std::allocator&lt;std::pair&lt;int const, double&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;int&gt;, std::hash&lt;int&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_allocate_buckets (33 samples, 1.06%)</title><rect x="800.1" y="421" width="12.5" height="15.0" fill="rgb(226,198,47)" rx="2" ry="2" />
<text  x="803.08" y="431.5" ></text>
</g>
<g >
<title>std::allocator&lt;std::__detail::_Hash_node_base*&gt;::allocate (21 samples, 0.68%)</title><rect x="1077.2" y="357" width="8.0" height="15.0" fill="rgb(229,114,44)" rx="2" ry="2" />
<text  x="1080.24" y="367.5" ></text>
</g>
<g >
<title>__gnu_cxx::new_allocator&lt;std::__detail::_Hash_node&lt;int, false&gt; &gt;::deallocate (8 samples, 0.26%)</title><rect x="511.2" y="357" width="3.0" height="15.0" fill="rgb(230,203,11)" rx="2" ry="2" />
<text  x="514.16" y="367.5" ></text>
</g>
<g >
<title>checked_request2size (1 samples, 0.03%)</title><rect x="963.0" y="341" width="0.3" height="15.0" fill="rgb(219,26,46)" rx="2" ry="2" />
<text  x="965.96" y="351.5" ></text>
</g>
<g >
<title>std::destroy_at&lt;std::pair&lt;int const, std::unordered_set&lt;int, std::hash&lt;int&gt;, std::equal_to&lt;int&gt;, std::allocator&lt;int&gt; &gt; &gt; &gt; (6 samples, 0.19%)</title><rect x="44.9" y="501" width="2.3" height="15.0" fill="rgb(210,194,1)" rx="2" ry="2" />
<text  x="47.93" y="511.5" ></text>
</g>
<g >
<title>snd_complete_urb (1 samples, 0.03%)</title><rect x="134.2" y="181" width="0.3" height="15.0" fill="rgb(217,26,19)" rx="2" ry="2" />
<text  x="137.15" y="191.5" ></text>
</g>
<g >
<title>snd_complete_urb (1 samples, 0.03%)</title><rect x="799.7" y="293" width="0.4" height="15.0" fill="rgb(247,59,7)" rx="2" ry="2" />
<text  x="802.70" y="303.5" ></text>
</g>
<g >
<title>std::allocator_traits&lt;std::allocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;int const, std::unordered_set&lt;int, std::hash&lt;int&gt;, std::equal_to&lt;int&gt;, std::allocator&lt;int&gt; &gt; &gt;, false&gt; &gt; &gt;::deallocate (2 samples, 0.06%)</title><rect x="44.2" y="501" width="0.7" height="15.0" fill="rgb(249,211,35)" rx="2" ry="2" />
<text  x="47.17" y="511.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_code_base&lt;int, int, std::__detail::_Identity, std::hash&lt;int&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, false&gt;::_M_bucket_index (1 samples, 0.03%)</title><rect x="66.6" y="437" width="0.3" height="15.0" fill="rgb(245,167,15)" rx="2" ry="2" />
<text  x="69.57" y="447.5" ></text>
</g>
<g >
<title>malloc_consolidate (8 samples, 0.26%)</title><rect x="38.9" y="565" width="3.0" height="15.0" fill="rgb(221,173,40)" rx="2" ry="2" />
<text  x="41.85" y="575.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;int, std::pair&lt;int const, int*&gt;, std::allocator&lt;std::pair&lt;int const, int*&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;int&gt;, std::hash&lt;int&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_bucket_index (1 samples, 0.03%)</title><rect x="858.2" y="469" width="0.4" height="15.0" fill="rgb(233,134,46)" rx="2" ry="2" />
<text  x="861.17" y="479.5" ></text>
</g>
<g >
<title>handle_irq_event_percpu (1 samples, 0.03%)</title><rect x="958.0" y="309" width="0.4" height="15.0" fill="rgb(250,170,8)" rx="2" ry="2" />
<text  x="961.02" y="319.5" ></text>
</g>
<g >
<title>std::_Vector_base&lt;com::github::coderodde::pathfinders::util::HeapNode&lt;int, double&gt;*, std::allocator&lt;com::github::coderodde::pathfinders::util::HeapNode&lt;int, double&gt;*&gt; &gt;::_M_allocate (38 samples, 1.22%)</title><rect x="758.7" y="437" width="14.4" height="15.0" fill="rgb(209,153,41)" rx="2" ry="2" />
<text  x="761.70" y="447.5" ></text>
</g>
<g >
<title>std::__detail::_Map_base&lt;int, std::pair&lt;int const, std::unordered_set&lt;int, std::hash&lt;int&gt;, std::equal_to&lt;int&gt;, std::allocator&lt;int&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;int const, std::unordered_set&lt;int, std::hash&lt;int&gt;, std::equal_to&lt;int&gt;, std::allocator&lt;int&gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;int&gt;, std::hash&lt;int&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt;, true&gt;::operator[] (86 samples, 2.77%)</title><rect x="282.6" y="469" width="32.7" height="15.0" fill="rgb(220,170,17)" rx="2" ry="2" />
<text  x="285.60" y="479.5" >st..</text>
</g>
<g >
<title>usb_hcd_submit_urb (1 samples, 0.03%)</title><rect x="412.8" y="149" width="0.4" height="15.0" fill="rgb(205,90,11)" rx="2" ry="2" />
<text  x="415.82" y="159.5" ></text>
</g>
<g >
<title>std::allocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;int const, double&gt;, false&gt; &gt;::allocate (1 samples, 0.03%)</title><rect x="48.0" y="501" width="0.3" height="15.0" fill="rgb(253,136,14)" rx="2" ry="2" />
<text  x="50.97" y="511.5" ></text>
</g>
<g >
<title>_start (2,914 samples, 93.76%)</title><rect x="81.8" y="581" width="1106.3" height="15.0" fill="rgb(231,193,54)" rx="2" ry="2" />
<text  x="84.76" y="591.5" >_start</text>
</g>
<g >
<title>perf_event_task_tick (1 samples, 0.03%)</title><rect x="180.5" y="37" width="0.3" height="15.0" fill="rgb(249,87,45)" rx="2" ry="2" />
<text  x="183.47" y="47.5" ></text>
</g>
<g >
<title>usb_hcd_submit_urb (1 samples, 0.03%)</title><rect x="956.9" y="293" width="0.4" height="15.0" fill="rgb(212,81,24)" rx="2" ry="2" />
<text  x="959.89" y="303.5" ></text>
</g>
<g >
<title>std::unordered_set&lt;int, std::hash&lt;int&gt;, std::equal_to&lt;int&gt;, std::allocator&lt;int&gt; &gt;::~unordered_set (6 samples, 0.19%)</title><rect x="44.9" y="469" width="2.3" height="15.0" fill="rgb(217,184,22)" rx="2" ry="2" />
<text  x="47.93" y="479.5" ></text>
</g>
<g >
<title>xhci_queue_isoc_tx_prepare (2 samples, 0.06%)</title><rect x="840.3" y="149" width="0.8" height="15.0" fill="rgb(238,139,22)" rx="2" ry="2" />
<text  x="843.33" y="159.5" ></text>
</g>
<g >
<title>tasklet_action_common.isra.0 (1 samples, 0.03%)</title><rect x="1046.5" y="341" width="0.4" height="15.0" fill="rgb(240,226,49)" rx="2" ry="2" />
<text  x="1049.49" y="351.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_node&lt;std::pair&lt;int const, double&gt;, false&gt;::_M_next (31 samples, 1.00%)</title><rect x="843.4" y="437" width="11.7" height="15.0" fill="rgb(233,96,4)" rx="2" ry="2" />
<text  x="846.37" y="447.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_node&lt;int, false&gt;::_M_next (26 samples, 0.84%)</title><rect x="1098.5" y="437" width="9.9" height="15.0" fill="rgb(231,141,26)" rx="2" ry="2" />
<text  x="1101.50" y="447.5" ></text>
</g>
<g >
<title>tasklet_hi_action (2 samples, 0.06%)</title><rect x="840.3" y="277" width="0.8" height="15.0" fill="rgb(223,186,22)" rx="2" ry="2" />
<text  x="843.33" y="287.5" ></text>
</g>
<g >
<title>std::equal_to&lt;int&gt;::operator (15 samples, 0.48%)</title><rect x="526.7" y="405" width="5.7" height="15.0" fill="rgb(240,170,48)" rx="2" ry="2" />
<text  x="529.72" y="415.5" ></text>
</g>
<g >
<title>std::allocator_traits&lt;std::allocator&lt;std::__detail::_Hash_node&lt;int, false&gt; &gt; &gt;::deallocate (7 samples, 0.23%)</title><rect x="1108.4" y="405" width="2.6" height="15.0" fill="rgb(211,31,40)" rx="2" ry="2" />
<text  x="1111.37" y="415.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;int, std::pair&lt;int const, int*&gt;, std::allocator&lt;std::pair&lt;int const, int*&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;int&gt;, std::hash&lt;int&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_find_before_node (2 samples, 0.06%)</title><rect x="893.5" y="453" width="0.7" height="15.0" fill="rgb(250,128,41)" rx="2" ry="2" />
<text  x="896.48" y="463.5" ></text>
</g>
<g >
<title>__gnu_cxx::new_allocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;int const, std::unordered_set&lt;int, std::hash&lt;int&gt;, std::equal_to&lt;int&gt;, std::allocator&lt;int&gt; &gt; &gt;, false&gt; &gt;::allocate (109 samples, 3.51%)</title><rect x="95.4" y="373" width="41.4" height="15.0" fill="rgb(209,110,33)" rx="2" ry="2" />
<text  x="98.42" y="383.5" >__g..</text>
</g>
<g >
<title>std::_Vector_base&lt;std::chrono::duration&lt;long, std::ratio&lt;1l, 1000000000l&gt; &gt;, std::allocator&lt;std::chrono::duration&lt;long, std::ratio&lt;1l, 1000000000l&gt; &gt; &gt; &gt;::_M_allocate (38 samples, 1.22%)</title><rect x="758.7" y="421" width="14.4" height="15.0" fill="rgb(209,103,45)" rx="2" ry="2" />
<text  x="761.70" y="431.5" ></text>
</g>
<g >
<title>std::allocator_traits&lt;std::allocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;int const, double&gt;, false&gt; &gt; &gt;::construct&lt;std::pair&lt;int const, double&gt;, std::pair&lt;int const, double&gt; const&amp;&gt; (2 samples, 0.06%)</title><rect x="627.3" y="245" width="0.8" height="15.0" fill="rgb(221,120,45)" rx="2" ry="2" />
<text  x="630.34" y="255.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;int, int, std::allocator&lt;int&gt;, std::__detail::_Identity, std::equal_to&lt;int&gt;, std::hash&lt;int&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, true, true&gt; &gt;::_M_update_bbegin (1 samples, 0.03%)</title><rect x="184.3" y="293" width="0.3" height="15.0" fill="rgb(232,211,11)" rx="2" ry="2" />
<text  x="187.27" y="303.5" ></text>
</g>
<g >
<title>std::pop_heap&lt;__gnu_cxx::__normal_iterator&lt;com::github::coderodde::pathfinders::util::HeapNode&lt;int, double&gt;**, std::vector&lt;com::github::coderodde::pathfinders::util::HeapNode&lt;int, double&gt;*, std::allocator&lt;com::github::coderodde::pathfinders::util::HeapNode&lt;int, double&gt;*&gt; &gt; &gt;, com::github::coderodde::pathfinders::util::HeapNodeComparator&lt;int, double&gt; &gt; (68 samples, 2.19%)</title><rect x="549.1" y="469" width="25.8" height="15.0" fill="rgb(238,68,12)" rx="2" ry="2" />
<text  x="552.12" y="479.5" >s..</text>
</g>
<g >
<title>__gnu_cxx::new_allocator&lt;std::__detail::_Hash_node_base*&gt;::allocate (13 samples, 0.42%)</title><rect x="580.3" y="341" width="4.9" height="15.0" fill="rgb(246,220,34)" rx="2" ry="2" />
<text  x="583.26" y="351.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_code_base&lt;int, std::pair&lt;int const, int*&gt;, std::__detail::_Select1st, std::hash&lt;int&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, false&gt;::_M_hash_code (1 samples, 0.03%)</title><rect x="893.5" y="405" width="0.4" height="15.0" fill="rgb(230,64,42)" rx="2" ry="2" />
<text  x="896.48" y="415.5" ></text>
</g>
<g >
<title>std::__detail::_Hashtable_alloc&lt;std::allocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;int const, std::unordered_map&lt;int, double, std::hash&lt;int&gt;, std::equal_to&lt;int&gt;, std::allocator&lt;std::pair&lt;int const, double&gt; &gt; &gt; &gt;, false&gt; &gt; &gt;::_M_deallocate_nodes (2 samples, 0.06%)</title><rect x="48.7" y="549" width="0.8" height="15.0" fill="rgb(241,101,25)" rx="2" ry="2" />
<text  x="51.73" y="559.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;int, std::pair&lt;int const, std::unordered_map&lt;int, double, std::hash&lt;int&gt;, std::equal_to&lt;int&gt;, std::allocator&lt;std::pair&lt;int const, double&gt; &gt; &gt; &gt;, std::allocator&lt;std::pair&lt;int const, std::unordered_map&lt;int, double, std::hash&lt;int&gt;, std::equal_to&lt;int&gt;, std::allocator&lt;std::pair&lt;int const, double&gt; &gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;int&gt;, std::hash&lt;int&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_find_node (3 samples, 0.10%)</title><rect x="70.4" y="485" width="1.1" height="15.0" fill="rgb(221,39,6)" rx="2" ry="2" />
<text  x="73.37" y="495.5" ></text>
</g>
<g >
<title>[libstdc++.so.6.0.29] (1 samples, 0.03%)</title><rect x="535.1" y="485" width="0.4" height="15.0" fill="rgb(250,171,7)" rx="2" ry="2" />
<text  x="538.08" y="495.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;int, std::pair&lt;int const, double&gt;, std::allocator&lt;std::pair&lt;int const, double&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;int&gt;, std::hash&lt;int&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_assign&lt;std::_Hashtable&lt;int, std::pair&lt;int const, double&gt;, std::allocator&lt;std::pair&lt;int const, double&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;int&gt;, std::hash&lt;int&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt; const&amp;, std::__detail::_AllocNode&lt;std::allocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;int const, double&gt;, false&gt; &gt; &gt; &gt; (4 samples, 0.13%)</title><rect x="68.5" y="357" width="1.5" height="15.0" fill="rgb(226,198,25)" rx="2" ry="2" />
<text  x="71.47" y="367.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;int, std::pair&lt;int const, std::unordered_set&lt;int, std::hash&lt;int&gt;, std::equal_to&lt;int&gt;, std::allocator&lt;int&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;int const, std::unordered_set&lt;int, std::hash&lt;int&gt;, std::equal_to&lt;int&gt;, std::allocator&lt;int&gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;int&gt;, std::hash&lt;int&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_deallocate_buckets (1 samples, 0.03%)</title><rect x="81.8" y="469" width="0.3" height="15.0" fill="rgb(207,30,29)" rx="2" ry="2" />
<text  x="84.76" y="479.5" ></text>
</g>
<g >
<title>std::allocator&lt;std::__detail::_Hash_node_base*&gt;::allocate (13 samples, 0.42%)</title><rect x="580.3" y="357" width="4.9" height="15.0" fill="rgb(210,117,35)" rx="2" ry="2" />
<text  x="583.26" y="367.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;int, std::pair&lt;int const, std::unordered_map&lt;int, double, std::hash&lt;int&gt;, std::equal_to&lt;int&gt;, std::allocator&lt;std::pair&lt;int const, double&gt; &gt; &gt; &gt;, std::allocator&lt;std::pair&lt;int const, std::unordered_map&lt;int, double, std::hash&lt;int&gt;, std::equal_to&lt;int&gt;, std::allocator&lt;std::pair&lt;int const, double&gt; &gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;int&gt;, std::hash&lt;int&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_Hashtable (5 samples, 0.16%)</title><rect x="68.1" y="501" width="1.9" height="15.0" fill="rgb(252,187,7)" rx="2" ry="2" />
<text  x="71.09" y="511.5" ></text>
</g>
<g >
<title>[libstdc++.so.6.0.29] (2 samples, 0.06%)</title><rect x="1170.6" y="229" width="0.8" height="15.0" fill="rgb(218,226,17)" rx="2" ry="2" />
<text  x="1173.64" y="239.5" ></text>
</g>
<g >
<title>__gnu_cxx::new_allocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;int const, std::unordered_map&lt;int, double, std::hash&lt;int&gt;, std::equal_to&lt;int&gt;, std::allocator&lt;std::pair&lt;int const, double&gt; &gt; &gt; &gt;, false&gt; &gt;::allocate (1 samples, 0.03%)</title><rect x="68.1" y="405" width="0.4" height="15.0" fill="rgb(239,193,54)" rx="2" ry="2" />
<text  x="71.09" y="415.5" ></text>
</g>
<g >
<title>__gnu_cxx::new_allocator&lt;std::__detail::_Hash_node_base*&gt;::deallocate (1 samples, 0.03%)</title><rect x="81.8" y="389" width="0.3" height="15.0" fill="rgb(223,185,33)" rx="2" ry="2" />
<text  x="84.76" y="399.5" ></text>
</g>
<g >
<title>entry_SYSCALL_64_after_hwframe (4 samples, 0.13%)</title><rect x="1188.5" y="581" width="1.5" height="15.0" fill="rgb(237,209,32)" rx="2" ry="2" />
<text  x="1191.48" y="591.5" ></text>
</g>
<g >
<title>std::vector&lt;com::github::coderodde::pathfinders::util::HeapNode&lt;int, double&gt;*, std::allocator&lt;com::github::coderodde::pathfinders::util::HeapNode&lt;int, double&gt;*&gt; &gt;::empty (1 samples, 0.03%)</title><rect x="548.7" y="469" width="0.4" height="15.0" fill="rgb(208,226,8)" rx="2" ry="2" />
<text  x="551.75" y="479.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;int, int, std::allocator&lt;int&gt;, std::__detail::_Identity, std::equal_to&lt;int&gt;, std::hash&lt;int&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, true, true&gt; &gt;::find (147 samples, 4.73%)</title><rect x="1016.9" y="485" width="55.8" height="15.0" fill="rgb(229,56,12)" rx="2" ry="2" />
<text  x="1019.87" y="495.5" >std::..</text>
</g>
<g >
<title>usb_giveback_urb_bh (1 samples, 0.03%)</title><rect x="412.8" y="213" width="0.4" height="15.0" fill="rgb(222,215,39)" rx="2" ry="2" />
<text  x="415.82" y="223.5" ></text>
</g>
<g >
<title>_int_malloc (52 samples, 1.67%)</title><rect x="607.6" y="165" width="19.7" height="15.0" fill="rgb(236,224,7)" rx="2" ry="2" />
<text  x="610.59" y="175.5" ></text>
</g>
<g >
<title>std::priority_queue&lt;com::github::coderodde::pathfinders::util::HeapNode&lt;int, double&gt;*, std::vector&lt;com::github::coderodde::pathfinders::util::HeapNode&lt;int, double&gt;*, std::allocator&lt;com::github::coderodde::pathfinders::util::HeapNode&lt;int, double&gt;*&gt; &gt;, com::github::coderodde::pathfinders::util::HeapNodeComparator&lt;int, double&gt; &gt;::pop (226 samples, 7.27%)</title><rect x="668.3" y="501" width="85.8" height="15.0" fill="rgb(238,224,31)" rx="2" ry="2" />
<text  x="671.34" y="511.5" >std::prior..</text>
</g>
<g >
<title>__handle_irq_event_percpu (1 samples, 0.03%)</title><rect x="751.9" y="325" width="0.3" height="15.0" fill="rgb(231,168,13)" rx="2" ry="2" />
<text  x="754.87" y="335.5" ></text>
</g>
<g >
<title>_int_free (113 samples, 3.64%)</title><rect x="1111.0" y="373" width="42.9" height="15.0" fill="rgb(246,47,2)" rx="2" ry="2" />
<text  x="1114.03" y="383.5" >_int..</text>
</g>
<g >
<title>std::__detail::_Hashtable_alloc&lt;std::allocator&lt;std::__detail::_Hash_node&lt;int, false&gt; &gt; &gt;::_M_deallocate_node_ptr (6 samples, 0.19%)</title><rect x="44.9" y="389" width="2.3" height="15.0" fill="rgb(214,43,40)" rx="2" ry="2" />
<text  x="47.93" y="399.5" ></text>
</g>
<g >
<title>std::allocator_traits&lt;std::allocator&lt;std::__detail::_Hash_node_base*&gt; &gt;::allocate (111 samples, 3.57%)</title><rect x="140.6" y="277" width="42.1" height="15.0" fill="rgb(224,5,15)" rx="2" ry="2" />
<text  x="143.60" y="287.5" >std..</text>
</g>
<g >
<title>__perf_event_task_sched_in (4 samples, 0.13%)</title><rect x="59.7" y="165" width="1.6" height="15.0" fill="rgb(241,69,18)" rx="2" ry="2" />
<text  x="62.74" y="175.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;int, int, std::allocator&lt;int&gt;, std::__detail::_Identity, std::equal_to&lt;int&gt;, std::hash&lt;int&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, true, true&gt; &gt;::_M_deallocate_buckets (24 samples, 0.77%)</title><rect x="420.0" y="309" width="9.2" height="15.0" fill="rgb(227,4,31)" rx="2" ry="2" />
<text  x="423.04" y="319.5" ></text>
</g>
<g >
<title>lru_cache_add_inactive_or_unevictable (1 samples, 0.03%)</title><rect x="67.7" y="245" width="0.4" height="15.0" fill="rgb(249,218,12)" rx="2" ry="2" />
<text  x="70.71" y="255.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;int, int, std::allocator&lt;int&gt;, std::__detail::_Identity, std::equal_to&lt;int&gt;, std::hash&lt;int&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, true, true&gt; &gt;::_M_bucket_index (1 samples, 0.03%)</title><rect x="184.3" y="277" width="0.3" height="15.0" fill="rgb(222,175,50)" rx="2" ry="2" />
<text  x="187.27" y="287.5" ></text>
</g>
<g >
<title>common_interrupt (1 samples, 0.03%)</title><rect x="858.2" y="405" width="0.4" height="15.0" fill="rgb(244,138,9)" rx="2" ry="2" />
<text  x="861.17" y="415.5" ></text>
</g>
<g >
<title>_int_free (23 samples, 0.74%)</title><rect x="1173.7" y="229" width="8.7" height="15.0" fill="rgb(220,74,31)" rx="2" ry="2" />
<text  x="1176.67" y="239.5" ></text>
</g>
<g >
<title>handle_mm_fault (1 samples, 0.03%)</title><rect x="68.1" y="293" width="0.4" height="15.0" fill="rgb(223,110,52)" rx="2" ry="2" />
<text  x="71.09" y="303.5" ></text>
</g>
<g >
<title>xhci_ring_ep_doorbell (1 samples, 0.03%)</title><rect x="772.7" y="85" width="0.4" height="15.0" fill="rgb(238,99,39)" rx="2" ry="2" />
<text  x="775.75" y="95.5" ></text>
</g>
<g >
<title>std::allocator_traits&lt;std::allocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;int const, int*&gt;, false&gt; &gt; &gt;::allocate (12 samples, 0.39%)</title><rect x="958.8" y="421" width="4.5" height="15.0" fill="rgb(230,11,21)" rx="2" ry="2" />
<text  x="961.78" y="431.5" ></text>
</g>
<g >
<title>std::unordered_set&lt;int, std::hash&lt;int&gt;, std::equal_to&lt;int&gt;, std::allocator&lt;int&gt; &gt;::unordered_set (38 samples, 1.22%)</title><rect x="268.2" y="485" width="14.4" height="15.0" fill="rgb(218,216,52)" rx="2" ry="2" />
<text  x="271.17" y="495.5" ></text>
</g>
<g >
<title>malloc_consolidate (258 samples, 8.30%)</title><rect x="315.3" y="341" width="97.9" height="15.0" fill="rgb(230,174,28)" rx="2" ry="2" />
<text  x="318.25" y="351.5" >malloc_cons..</text>
</g>
<g >
<title>exit_to_user_mode_prepare (4 samples, 0.13%)</title><rect x="59.7" y="229" width="1.6" height="15.0" fill="rgb(236,185,44)" rx="2" ry="2" />
<text  x="62.74" y="239.5" ></text>
</g>
<g >
<title>[demo] (1 samples, 0.03%)</title><rect x="414.0" y="341" width="0.3" height="15.0" fill="rgb(249,165,33)" rx="2" ry="2" />
<text  x="416.96" y="351.5" ></text>
</g>
<g >
<title>_int_free (39 samples, 1.25%)</title><rect x="490.3" y="213" width="14.8" height="15.0" fill="rgb(254,212,45)" rx="2" ry="2" />
<text  x="493.28" y="223.5" ></text>
</g>
<g >
<title>usb_hcd_get_frame_number (1 samples, 0.03%)</title><rect x="829.7" y="165" width="0.4" height="15.0" fill="rgb(227,125,28)" rx="2" ry="2" />
<text  x="832.70" y="175.5" ></text>
</g>
<g >
<title>std::allocator_traits&lt;std::allocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;int const, double&gt;, false&gt; &gt; &gt;::deallocate (1 samples, 0.03%)</title><rect x="82.5" y="277" width="0.4" height="15.0" fill="rgb(249,100,19)" rx="2" ry="2" />
<text  x="85.52" y="287.5" ></text>
</g>
<g >
<title>std::allocator_traits&lt;std::allocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;int const, double&gt;, false&gt; &gt; &gt;::deallocate (8 samples, 0.26%)</title><rect x="855.1" y="405" width="3.1" height="15.0" fill="rgb(246,62,49)" rx="2" ry="2" />
<text  x="858.14" y="415.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;int, int, std::allocator&lt;int&gt;, std::__detail::_Identity, std::equal_to&lt;int&gt;, std::hash&lt;int&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, true, true&gt; &gt;::_Hashtable (346 samples, 11.13%)</title><rect x="136.8" y="341" width="131.4" height="15.0" fill="rgb(228,175,16)" rx="2" ry="2" />
<text  x="139.81" y="351.5" >std::_Hashtable&lt;..</text>
</g>
<g >
<title>std::_Hashtable&lt;int, std::pair&lt;int const, std::unordered_map&lt;int, double, std::hash&lt;int&gt;, std::equal_to&lt;int&gt;, std::allocator&lt;std::pair&lt;int const, double&gt; &gt; &gt; &gt;, std::allocator&lt;std::pair&lt;int const, std::unordered_map&lt;int, double, std::hash&lt;int&gt;, std::equal_to&lt;int&gt;, std::allocator&lt;std::pair&lt;int const, double&gt; &gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;int&gt;, std::hash&lt;int&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::find (23 samples, 0.74%)</title><rect x="523.7" y="469" width="8.7" height="15.0" fill="rgb(209,112,12)" rx="2" ry="2" />
<text  x="526.69" y="479.5" ></text>
</g>
<g >
<title>std::__detail::_Hashtable_alloc&lt;std::allocator&lt;std::__detail::_Hash_node&lt;int, false&gt; &gt; &gt;::_M_deallocate_node_ptr (7 samples, 0.23%)</title><rect x="1108.4" y="421" width="2.6" height="15.0" fill="rgb(241,83,36)" rx="2" ry="2" />
<text  x="1111.37" y="431.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;int, std::pair&lt;int const, int*&gt;, std::allocator&lt;std::pair&lt;int const, int*&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;int&gt;, std::hash&lt;int&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_allocate_buckets (33 samples, 1.06%)</title><rect x="903.7" y="421" width="12.6" height="15.0" fill="rgb(216,67,9)" rx="2" ry="2" />
<text  x="906.73" y="431.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;int, std::pair&lt;int const, int*&gt;, std::allocator&lt;std::pair&lt;int const, int*&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;int&gt;, std::hash&lt;int&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_rehash_aux (109 samples, 3.51%)</title><rect x="894.2" y="437" width="41.4" height="15.0" fill="rgb(241,134,44)" rx="2" ry="2" />
<text  x="897.24" y="447.5" >std..</text>
</g>
<g >
<title>tasklet_hi_action (1 samples, 0.03%)</title><rect x="799.7" y="357" width="0.4" height="15.0" fill="rgb(227,156,16)" rx="2" ry="2" />
<text  x="802.70" y="367.5" ></text>
</g>
<g >
<title>std::allocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;int const, double&gt;, false&gt; &gt;::allocate (1 samples, 0.03%)</title><rect x="47.6" y="405" width="0.4" height="15.0" fill="rgb(215,91,1)" rx="2" ry="2" />
<text  x="50.59" y="415.5" ></text>
</g>
<g >
<title>std::allocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;int const, double&gt;, false&gt; &gt;::deallocate (8 samples, 0.26%)</title><rect x="855.1" y="389" width="3.1" height="15.0" fill="rgb(205,191,21)" rx="2" ry="2" />
<text  x="858.14" y="399.5" ></text>
</g>
<g >
<title>xhci_urb_enqueue (2 samples, 0.06%)</title><rect x="840.3" y="165" width="0.8" height="15.0" fill="rgb(208,174,28)" rx="2" ry="2" />
<text  x="843.33" y="175.5" ></text>
</g>
<g >
<title>tasklet_action_common.isra.0 (1 samples, 0.03%)</title><rect x="958.4" y="309" width="0.4" height="15.0" fill="rgb(229,63,44)" rx="2" ry="2" />
<text  x="961.40" y="319.5" ></text>
</g>
<g >
<title>do_execveat_common.isra.0 (4 samples, 0.13%)</title><rect x="1188.5" y="533" width="1.5" height="15.0" fill="rgb(224,79,48)" rx="2" ry="2" />
<text  x="1191.48" y="543.5" ></text>
</g>
<g >
<title>std::__detail::_Hashtable_alloc&lt;std::allocator&lt;std::__detail::_Hash_node&lt;int, false&gt; &gt; &gt;::_M_deallocate_node_ptr (8 samples, 0.26%)</title><rect x="511.2" y="405" width="3.0" height="15.0" fill="rgb(205,69,35)" rx="2" ry="2" />
<text  x="514.16" y="415.5" ></text>
</g>
<g >
<title>common_interrupt (2 samples, 0.06%)</title><rect x="751.9" y="405" width="0.7" height="15.0" fill="rgb(212,199,11)" rx="2" ry="2" />
<text  x="754.87" y="415.5" ></text>
</g>
<g >
<title>com::github::coderodde::directed_graph::DirectedGraphWeightFunction&lt;int, double&gt;::getWeight (54 samples, 1.74%)</title><rect x="514.2" y="501" width="20.5" height="15.0" fill="rgb(211,63,12)" rx="2" ry="2" />
<text  x="517.20" y="511.5" ></text>
</g>
<g >
<title>sysvec_apic_timer_interrupt (1 samples, 0.03%)</title><rect x="180.5" y="165" width="0.3" height="15.0" fill="rgb(240,107,27)" rx="2" ry="2" />
<text  x="183.47" y="175.5" ></text>
</g>
<g >
<title>__memset_avx2_erms (3 samples, 0.10%)</title><rect x="903.7" y="389" width="1.2" height="15.0" fill="rgb(228,197,51)" rx="2" ry="2" />
<text  x="906.73" y="399.5" ></text>
</g>
<g >
<title>common_interrupt (1 samples, 0.03%)</title><rect x="772.7" y="293" width="0.4" height="15.0" fill="rgb(227,27,11)" rx="2" ry="2" />
<text  x="775.75" y="303.5" ></text>
</g>
<g >
<title>std::allocator&lt;std::__detail::_Hash_node&lt;int, false&gt; &gt;::deallocate (7 samples, 0.23%)</title><rect x="1108.4" y="389" width="2.6" height="15.0" fill="rgb(232,93,16)" rx="2" ry="2" />
<text  x="1111.37" y="399.5" ></text>
</g>
<g >
<title>xhci_ring_ep_doorbell (1 samples, 0.03%)</title><rect x="1046.5" y="197" width="0.4" height="15.0" fill="rgb(225,186,30)" rx="2" ry="2" />
<text  x="1049.49" y="207.5" ></text>
</g>
<g >
<title>checked_request2size (1 samples, 0.03%)</title><rect x="590.5" y="277" width="0.4" height="15.0" fill="rgb(213,157,53)" rx="2" ry="2" />
<text  x="593.51" y="287.5" ></text>
</g>
<g >
<title>xhci_queue_isoc_tx_prepare (1 samples, 0.03%)</title><rect x="526.3" y="213" width="0.4" height="15.0" fill="rgb(207,102,33)" rx="2" ry="2" />
<text  x="529.34" y="223.5" ></text>
</g>
<g >
<title>std::pair&lt;int const, std::unordered_set&lt;int, std::hash&lt;int&gt;, std::equal_to&lt;int&gt;, std::allocator&lt;int&gt; &gt; &gt;::pair (9 samples, 0.29%)</title><rect x="59.7" y="405" width="3.5" height="15.0" fill="rgb(215,55,5)" rx="2" ry="2" />
<text  x="62.74" y="415.5" ></text>
</g>
<g >
<title>xhci_urb_enqueue (1 samples, 0.03%)</title><rect x="958.4" y="213" width="0.4" height="15.0" fill="rgb(213,126,35)" rx="2" ry="2" />
<text  x="961.40" y="223.5" ></text>
</g>
<g >
<title>[libstdc++.so.6.0.29] (1 samples, 0.03%)</title><rect x="1012.3" y="357" width="0.4" height="15.0" fill="rgb(232,34,14)" rx="2" ry="2" />
<text  x="1015.32" y="367.5" ></text>
</g>
<g >
<title>asm_common_interrupt (1 samples, 0.03%)</title><rect x="772.7" y="309" width="0.4" height="15.0" fill="rgb(226,214,4)" rx="2" ry="2" />
<text  x="775.75" y="319.5" ></text>
</g>
<g >
<title>retire_capture_urb (1 samples, 0.03%)</title><rect x="829.7" y="197" width="0.4" height="15.0" fill="rgb(215,149,5)" rx="2" ry="2" />
<text  x="832.70" y="207.5" ></text>
</g>
<g >
<title>xhci_ring_ep_doorbell (2 samples, 0.06%)</title><rect x="840.3" y="117" width="0.8" height="15.0" fill="rgb(234,167,4)" rx="2" ry="2" />
<text  x="843.33" y="127.5" ></text>
</g>
<g >
<title>exc_page_fault (1 samples, 0.03%)</title><rect x="67.7" y="325" width="0.4" height="15.0" fill="rgb(214,26,21)" rx="2" ry="2" />
<text  x="70.71" y="335.5" ></text>
</g>
<g >
<title>std::__detail::_Mod_range_hashing::operator (1 samples, 0.03%)</title><rect x="184.3" y="245" width="0.3" height="15.0" fill="rgb(227,219,46)" rx="2" ry="2" />
<text  x="187.27" y="255.5" ></text>
</g>
<g >
<title>std::allocator_traits&lt;std::allocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;int const, std::unordered_map&lt;int, double, std::hash&lt;int&gt;, std::equal_to&lt;int&gt;, std::allocator&lt;std::pair&lt;int const, double&gt; &gt; &gt; &gt;, false&gt; &gt; &gt;::allocate (1 samples, 0.03%)</title><rect x="47.2" y="549" width="0.4" height="15.0" fill="rgb(226,224,5)" rx="2" ry="2" />
<text  x="50.21" y="559.5" ></text>
</g>
<g >
<title>std::__detail::_Mod_range_hashing::operator (2 samples, 0.06%)</title><rect x="957.3" y="421" width="0.7" height="15.0" fill="rgb(252,112,31)" rx="2" ry="2" />
<text  x="960.27" y="431.5" ></text>
</g>
<g >
<title>std::__detail::_Hashtable_alloc&lt;std::allocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;int const, std::unordered_set&lt;int, std::hash&lt;int&gt;, std::equal_to&lt;int&gt;, std::allocator&lt;int&gt; &gt; &gt;, false&gt; &gt; &gt;::_M_allocate_node&lt;std::pair&lt;int const, std::unordered_set&lt;int, std::hash&lt;int&gt;, std::equal_to&lt;int&gt;, std::allocator&lt;int&gt; &gt; &gt; const&amp;&gt; (1 samples, 0.03%)</title><rect x="59.4" y="437" width="0.3" height="15.0" fill="rgb(251,180,45)" rx="2" ry="2" />
<text  x="62.36" y="447.5" ></text>
</g>
<g >
<title>update_process_times (1 samples, 0.03%)</title><rect x="579.9" y="293" width="0.4" height="15.0" fill="rgb(210,195,22)" rx="2" ry="2" />
<text  x="582.88" y="303.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;int, std::pair&lt;int const, double&gt;, std::allocator&lt;std::pair&lt;int const, double&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;int&gt;, std::hash&lt;int&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_Hashtable (4 samples, 0.13%)</title><rect x="68.5" y="373" width="1.5" height="15.0" fill="rgb(244,216,34)" rx="2" ry="2" />
<text  x="71.47" y="383.5" ></text>
</g>
<g >
<title>handle_edge_irq (1 samples, 0.03%)</title><rect x="958.0" y="341" width="0.4" height="15.0" fill="rgb(217,194,21)" rx="2" ry="2" />
<text  x="961.02" y="351.5" ></text>
</g>
<g >
<title>[demo] (1 samples, 0.03%)</title><rect x="511.2" y="341" width="0.3" height="15.0" fill="rgb(212,22,20)" rx="2" ry="2" />
<text  x="514.16" y="351.5" ></text>
</g>
<g >
<title>std::__push_heap&lt;__gnu_cxx::__normal_iterator&lt;com::github::coderodde::pathfinders::util::HeapNode&lt;int, double&gt;**, std::vector&lt;com::github::coderodde::pathfinders::util::HeapNode&lt;int, double&gt;*, std::allocator&lt;com::github::coderodde::pathfinders::util::HeapNode&lt;int, double&gt;*&gt; &gt; &gt;, long, com::github::coderodde::pathfinders::util::HeapNode&lt;int, double&gt;*, __gnu_cxx::__ops::_Iter_comp_val&lt;com::github::coderodde::pathfinders::util::HeapNodeComparator&lt;int, double&gt; &gt; &gt; (1 samples, 0.03%)</title><rect x="574.6" y="421" width="0.3" height="15.0" fill="rgb(239,110,22)" rx="2" ry="2" />
<text  x="577.56" y="431.5" ></text>
</g>
<g >
<title>__GI___libc_malloc (20 samples, 0.64%)</title><rect x="593.9" y="181" width="7.6" height="15.0" fill="rgb(249,217,49)" rx="2" ry="2" />
<text  x="596.93" y="191.5" ></text>
</g>
<g >
<title>std::__detail::_Mod_range_hashing::operator (1 samples, 0.03%)</title><rect x="1073.4" y="389" width="0.4" height="15.0" fill="rgb(253,158,3)" rx="2" ry="2" />
<text  x="1076.44" y="399.5" ></text>
</g>
<g >
<title>std::construct_at&lt;std::pair&lt;int const, double&gt;, std::pair&lt;int const, double&gt; const&amp;&gt; (2 samples, 0.06%)</title><rect x="627.3" y="229" width="0.8" height="15.0" fill="rgb(227,201,12)" rx="2" ry="2" />
<text  x="630.34" y="239.5" ></text>
</g>
<g >
<title>asm_common_interrupt (1 samples, 0.03%)</title><rect x="799.7" y="421" width="0.4" height="15.0" fill="rgb(209,198,5)" rx="2" ry="2" />
<text  x="802.70" y="431.5" ></text>
</g>
<g >
<title>std::__detail::_Hashtable_alloc&lt;std::allocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;int const, std::unordered_map&lt;int, double, std::hash&lt;int&gt;, std::equal_to&lt;int&gt;, std::allocator&lt;std::pair&lt;int const, double&gt; &gt; &gt; &gt;, false&gt; &gt; &gt;::_M_allocate_node&lt;std::pair&lt;int const, std::unordered_map&lt;int, double, std::hash&lt;int&gt;, std::equal_to&lt;int&gt;, std::allocator&lt;std::pair&lt;int const, double&gt; &gt; &gt; &gt; const&amp;&gt; (113 samples, 3.64%)</title><rect x="585.6" y="389" width="42.9" height="15.0" fill="rgb(234,190,52)" rx="2" ry="2" />
<text  x="588.57" y="399.5" >std:..</text>
</g>
<g >
<title>tcache_put (1 samples, 0.03%)</title><rect x="627.0" y="149" width="0.3" height="15.0" fill="rgb(253,40,9)" rx="2" ry="2" />
<text  x="629.96" y="159.5" ></text>
</g>
<g >
<title>syscall_exit_to_user_mode (1 samples, 0.03%)</title><rect x="1187.7" y="533" width="0.4" height="15.0" fill="rgb(250,3,15)" rx="2" ry="2" />
<text  x="1190.72" y="543.5" ></text>
</g>
<g >
<title>std::__detail::_Hashtable_alloc&lt;std::allocator&lt;std::__detail::_Hash_node&lt;int, false&gt; &gt; &gt;::_M_deallocate_buckets (21 samples, 0.68%)</title><rect x="1090.5" y="437" width="8.0" height="15.0" fill="rgb(211,176,37)" rx="2" ry="2" />
<text  x="1093.53" y="447.5" ></text>
</g>
<g >
<title>handle_irq_event (1 samples, 0.03%)</title><rect x="751.9" y="357" width="0.3" height="15.0" fill="rgb(246,148,19)" rx="2" ry="2" />
<text  x="754.87" y="367.5" ></text>
</g>
<g >
<title>com::github::coderodde::pathfinders::util::HeapNode&lt;int, double&gt;::getDistance (1 samples, 0.03%)</title><rect x="753.8" y="389" width="0.3" height="15.0" fill="rgb(224,13,46)" rx="2" ry="2" />
<text  x="756.76" y="399.5" ></text>
</g>
<g >
<title>__gnu_cxx::new_allocator&lt;std::__detail::_Hash_node_base*&gt;::deallocate (258 samples, 8.30%)</title><rect x="315.3" y="373" width="97.9" height="15.0" fill="rgb(222,204,27)" rx="2" ry="2" />
<text  x="318.25" y="383.5" >__gnu_cxx::..</text>
</g>
<g >
<title>asm_common_interrupt (1 samples, 0.03%)</title><rect x="134.2" y="309" width="0.3" height="15.0" fill="rgb(222,46,1)" rx="2" ry="2" />
<text  x="137.15" y="319.5" ></text>
</g>
<g >
<title>handle_irq_event_percpu (1 samples, 0.03%)</title><rect x="1182.0" y="133" width="0.4" height="15.0" fill="rgb(245,34,43)" rx="2" ry="2" />
<text  x="1185.03" y="143.5" ></text>
</g>
<g >
<title>handle_edge_irq (1 samples, 0.03%)</title><rect x="858.2" y="373" width="0.4" height="15.0" fill="rgb(241,58,43)" rx="2" ry="2" />
<text  x="861.17" y="383.5" ></text>
</g>
<g >
<title>std::unordered_set&lt;int, std::hash&lt;int&gt;, std::equal_to&lt;int&gt;, std::allocator&lt;int&gt; &gt;::~unordered_set (54 samples, 1.74%)</title><rect x="1090.5" y="501" width="20.5" height="15.0" fill="rgb(253,158,24)" rx="2" ry="2" />
<text  x="1093.53" y="511.5" ></text>
</g>
<g >
<title>std::equal_to&lt;int&gt;::operator (1 samples, 0.03%)</title><rect x="66.9" y="437" width="0.4" height="15.0" fill="rgb(237,107,42)" rx="2" ry="2" />
<text  x="69.95" y="447.5" ></text>
</g>
<g >
<title>operator new (24 samples, 0.77%)</title><rect x="823.2" y="389" width="9.2" height="15.0" fill="rgb(233,25,21)" rx="2" ry="2" />
<text  x="826.24" y="399.5" ></text>
</g>
<g >
<title>std::allocator_traits&lt;std::allocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;int const, int*&gt;, false&gt; &gt; &gt;::deallocate (12 samples, 0.39%)</title><rect x="1012.3" y="405" width="4.6" height="15.0" fill="rgb(211,8,14)" rx="2" ry="2" />
<text  x="1015.32" y="415.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_code_base&lt;int, std::pair&lt;int const, double&gt;, std::__detail::_Select1st, std::hash&lt;int&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, false&gt;::_M_bucket_index (3 samples, 0.10%)</title><rect x="780.7" y="421" width="1.2" height="15.0" fill="rgb(253,74,54)" rx="2" ry="2" />
<text  x="783.72" y="431.5" ></text>
</g>
<g >
<title>__gnu_cxx::new_allocator&lt;std::__detail::_Hash_node_base*&gt;::allocate (1 samples, 0.03%)</title><rect x="68.5" y="277" width="0.3" height="15.0" fill="rgb(216,137,41)" rx="2" ry="2" />
<text  x="71.47" y="287.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;int, std::pair&lt;int const, std::unordered_map&lt;int, double, std::hash&lt;int&gt;, std::equal_to&lt;int&gt;, std::allocator&lt;std::pair&lt;int const, double&gt; &gt; &gt; &gt;, std::allocator&lt;std::pair&lt;int const, std::unordered_map&lt;int, double, std::hash&lt;int&gt;, std::equal_to&lt;int&gt;, std::allocator&lt;std::pair&lt;int const, double&gt; &gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;int&gt;, std::hash&lt;int&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_assign&lt;std::_Hashtable&lt;int, std::pair&lt;int const, std::unordered_map&lt;int, double, std::hash&lt;int&gt;, std::equal_to&lt;int&gt;, std::allocator&lt;std::pair&lt;int const, double&gt; &gt; &gt; &gt;, std::allocator&lt;std::pair&lt;int const, std::unordered_map&lt;int, double, std::hash&lt;int&gt;, std::equal_to&lt;int&gt;, std::allocator&lt;std::pair&lt;int const, double&gt; &gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;int&gt;, std::hash&lt;int&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt; const&amp;, std::__detail::_AllocNode&lt;std::allocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;int const, std::unordered_map&lt;int, double, std::hash&lt;int&gt;, std::equal_to&lt;int&gt;, std::allocator&lt;std::pair&lt;int const, double&gt; &gt; &gt; &gt;, false&gt; &gt; &gt; &gt; (141 samples, 4.54%)</title><rect x="574.9" y="421" width="53.6" height="15.0" fill="rgb(210,142,31)" rx="2" ry="2" />
<text  x="577.94" y="431.5" >std::..</text>
</g>
<g >
<title>std::__detail::_Hashtable_alloc&lt;std::allocator&lt;std::__detail::_Hash_node&lt;int, false&gt; &gt; &gt;::_M_allocate_node&lt;int const&amp;&gt; (5 samples, 0.16%)</title><rect x="61.3" y="325" width="1.9" height="15.0" fill="rgb(250,7,14)" rx="2" ry="2" />
<text  x="64.25" y="335.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_code_base&lt;int, std::pair&lt;int const, double&gt;, std::__detail::_Select1st, std::hash&lt;int&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, false&gt;::_M_bucket_index (7 samples, 0.23%)</title><rect x="601.5" y="261" width="2.7" height="15.0" fill="rgb(209,98,11)" rx="2" ry="2" />
<text  x="604.52" y="271.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;int, std::pair&lt;int const, EuclideanCoordinates&gt;, std::allocator&lt;std::pair&lt;int const, EuclideanCoordinates&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;int&gt;, std::hash&lt;int&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_find_node (4 samples, 0.13%)</title><rect x="71.5" y="501" width="1.5" height="15.0" fill="rgb(241,63,12)" rx="2" ry="2" />
<text  x="74.51" y="511.5" ></text>
</g>
<g >
<title>free_pipe_info (1 samples, 0.03%)</title><rect x="1187.7" y="421" width="0.4" height="15.0" fill="rgb(207,143,8)" rx="2" ry="2" />
<text  x="1190.72" y="431.5" ></text>
</g>
<g >
<title>std::unordered_map&lt;int, double, std::hash&lt;int&gt;, std::equal_to&lt;int&gt;, std::allocator&lt;std::pair&lt;int const, double&gt; &gt; &gt;::~unordered_map (65 samples, 2.09%)</title><rect x="1158.1" y="373" width="24.7" height="15.0" fill="rgb(205,202,26)" rx="2" ry="2" />
<text  x="1161.11" y="383.5" >s..</text>
</g>
<g >
<title>std::allocator&lt;std::__detail::_Hash_node_base*&gt;::deallocate (258 samples, 8.30%)</title><rect x="315.3" y="389" width="97.9" height="15.0" fill="rgb(214,80,47)" rx="2" ry="2" />
<text  x="318.25" y="399.5" >std::alloca..</text>
</g>
<g >
<title>xhci_update_erst_dequeue (1 samples, 0.03%)</title><rect x="1182.0" y="69" width="0.4" height="15.0" fill="rgb(247,221,19)" rx="2" ry="2" />
<text  x="1185.03" y="79.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;int, int, std::allocator&lt;int&gt;, std::__detail::_Identity, std::equal_to&lt;int&gt;, std::hash&lt;int&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, true, true&gt; &gt;::_M_find_before_node (8 samples, 0.26%)</title><rect x="64.3" y="469" width="3.0" height="15.0" fill="rgb(229,221,2)" rx="2" ry="2" />
<text  x="67.29" y="479.5" ></text>
</g>
<g >
<title>__gnu_cxx::new_allocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;int const, std::unordered_map&lt;int, double, std::hash&lt;int&gt;, std::equal_to&lt;int&gt;, std::allocator&lt;std::pair&lt;int const, double&gt; &gt; &gt; &gt;, false&gt; &gt;::allocate (1 samples, 0.03%)</title><rect x="47.2" y="517" width="0.4" height="15.0" fill="rgb(212,92,53)" rx="2" ry="2" />
<text  x="50.21" y="527.5" ></text>
</g>
<g >
<title>do_syscall_64 (1 samples, 0.03%)</title><rect x="1188.1" y="565" width="0.4" height="15.0" fill="rgb(246,183,12)" rx="2" ry="2" />
<text  x="1191.10" y="575.5" ></text>
</g>
<g >
<title>__gnu_cxx::new_allocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;int const, std::unordered_set&lt;int, std::hash&lt;int&gt;, std::equal_to&lt;int&gt;, std::allocator&lt;int&gt; &gt; &gt;, false&gt; &gt;::allocate (1 samples, 0.03%)</title><rect x="27.5" y="517" width="0.3" height="15.0" fill="rgb(224,33,25)" rx="2" ry="2" />
<text  x="30.46" y="527.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_node&lt;std::pair&lt;int const, int*&gt;, false&gt;::_M_next (47 samples, 1.51%)</title><rect x="917.8" y="421" width="17.8" height="15.0" fill="rgb(218,165,5)" rx="2" ry="2" />
<text  x="920.78" y="431.5" ></text>
</g>
<g >
<title>std::allocator_traits&lt;std::allocator&lt;std::__detail::_Hash_node_base*&gt; &gt;::allocate (21 samples, 0.68%)</title><rect x="593.5" y="245" width="8.0" height="15.0" fill="rgb(223,212,39)" rx="2" ry="2" />
<text  x="596.55" y="255.5" ></text>
</g>
<g >
<title>usb_hcd_submit_urb (2 samples, 0.06%)</title><rect x="840.3" y="181" width="0.8" height="15.0" fill="rgb(207,225,50)" rx="2" ry="2" />
<text  x="843.33" y="191.5" ></text>
</g>
<g >
<title>xhci_irq (1 samples, 0.03%)</title><rect x="858.2" y="293" width="0.4" height="15.0" fill="rgb(252,222,36)" rx="2" ry="2" />
<text  x="861.17" y="303.5" ></text>
</g>
<g >
<title>hrtimer_interrupt (1 samples, 0.03%)</title><rect x="180.5" y="133" width="0.3" height="15.0" fill="rgb(254,80,49)" rx="2" ry="2" />
<text  x="183.47" y="143.5" ></text>
</g>
<g >
<title>__GI___libc_malloc (13 samples, 0.42%)</title><rect x="1182.8" y="421" width="4.9" height="15.0" fill="rgb(216,164,24)" rx="2" ry="2" />
<text  x="1185.79" y="431.5" ></text>
</g>
<g >
<title>std::__detail::_AllocNode&lt;std::allocator&lt;std::__detail::_Hash_node&lt;int, false&gt; &gt; &gt;::operator (37 samples, 1.19%)</title><rect x="268.6" y="437" width="14.0" height="15.0" fill="rgb(236,63,32)" rx="2" ry="2" />
<text  x="271.55" y="447.5" ></text>
</g>
<g >
<title>native_apic_msr_eoi_write (1 samples, 0.03%)</title><rect x="752.2" y="341" width="0.4" height="15.0" fill="rgb(254,78,11)" rx="2" ry="2" />
<text  x="755.25" y="351.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;int, int, std::allocator&lt;int&gt;, std::__detail::_Identity, std::equal_to&lt;int&gt;, std::hash&lt;int&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, true, true&gt; &gt;::_M_bucket_index (1 samples, 0.03%)</title><rect x="268.2" y="437" width="0.4" height="15.0" fill="rgb(205,221,15)" rx="2" ry="2" />
<text  x="271.17" y="447.5" ></text>
</g>
<g >
<title>do_user_addr_fault (1 samples, 0.03%)</title><rect x="68.1" y="309" width="0.4" height="15.0" fill="rgb(206,158,21)" rx="2" ry="2" />
<text  x="71.09" y="319.5" ></text>
</g>
<g >
<title>std::allocator&lt;std::__detail::_Hash_node&lt;int, false&gt; &gt;::allocate (2 samples, 0.06%)</title><rect x="26.7" y="501" width="0.8" height="15.0" fill="rgb(245,103,16)" rx="2" ry="2" />
<text  x="29.71" y="511.5" ></text>
</g>
<g >
<title>std::__detail::_Mod_range_hashing::operator (1 samples, 0.03%)</title><rect x="66.6" y="421" width="0.3" height="15.0" fill="rgb(239,200,16)" rx="2" ry="2" />
<text  x="69.57" y="431.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;int, std::pair&lt;int const, int*&gt;, std::allocator&lt;std::pair&lt;int const, int*&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;int&gt;, std::hash&lt;int&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_find_node (2 samples, 0.06%)</title><rect x="893.5" y="469" width="0.7" height="15.0" fill="rgb(253,199,8)" rx="2" ry="2" />
<text  x="896.48" y="479.5" ></text>
</g>
<g >
<title>std::destroy_at&lt;std::pair&lt;int const, std::unordered_map&lt;int, double, std::hash&lt;int&gt;, std::equal_to&lt;int&gt;, std::allocator&lt;std::pair&lt;int const, double&gt; &gt; &gt; &gt; &gt; (1 samples, 0.03%)</title><rect x="82.5" y="405" width="0.4" height="15.0" fill="rgb(208,140,9)" rx="2" ry="2" />
<text  x="85.52" y="415.5" ></text>
</g>
<g >
<title>_int_malloc (33 samples, 1.06%)</title><rect x="800.1" y="309" width="12.5" height="15.0" fill="rgb(237,147,33)" rx="2" ry="2" />
<text  x="803.08" y="319.5" ></text>
</g>
<g >
<title>exit_mmap (1 samples, 0.03%)</title><rect x="1188.1" y="485" width="0.4" height="15.0" fill="rgb(207,210,38)" rx="2" ry="2" />
<text  x="1191.10" y="495.5" ></text>
</g>
<g >
<title>_int_malloc (1 samples, 0.03%)</title><rect x="67.7" y="357" width="0.4" height="15.0" fill="rgb(220,101,16)" rx="2" ry="2" />
<text  x="70.71" y="367.5" ></text>
</g>
<g >
<title>usb_get_current_frame_number (1 samples, 0.03%)</title><rect x="829.7" y="181" width="0.4" height="15.0" fill="rgb(245,210,18)" rx="2" ry="2" />
<text  x="832.70" y="191.5" ></text>
</g>
<g >
<title>std::unordered_map&lt;int, std::unordered_map&lt;int, double, std::hash&lt;int&gt;, std::equal_to&lt;int&gt;, std::allocator&lt;std::pair&lt;int const, double&gt; &gt; &gt;, std::hash&lt;int&gt;, std::equal_to&lt;int&gt;, std::allocator&lt;std::pair&lt;int const, std::unordered_map&lt;int, double, std::hash&lt;int&gt;, std::equal_to&lt;int&gt;, std::allocator&lt;std::pair&lt;int const, double&gt; &gt; &gt; &gt; &gt; &gt;::~unordered_map (189 samples, 6.08%)</title><rect x="1111.0" y="501" width="71.8" height="15.0" fill="rgb(249,222,24)" rx="2" ry="2" />
<text  x="1114.03" y="511.5" >std::uno..</text>
</g>
<g >
<title>std::_Hashtable&lt;int, int, std::allocator&lt;int&gt;, std::__detail::_Identity, std::equal_to&lt;int&gt;, std::hash&lt;int&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, true, true&gt; &gt;::_M_find_node (1 samples, 0.03%)</title><rect x="1072.7" y="453" width="0.4" height="15.0" fill="rgb(214,171,30)" rx="2" ry="2" />
<text  x="1075.68" y="463.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;int, std::pair&lt;int const, double&gt;, std::allocator&lt;std::pair&lt;int const, double&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;int&gt;, std::hash&lt;int&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_allocate_buckets (1 samples, 0.03%)</title><rect x="68.5" y="341" width="0.3" height="15.0" fill="rgb(235,183,0)" rx="2" ry="2" />
<text  x="71.47" y="351.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;int, int, std::allocator&lt;int&gt;, std::__detail::_Identity, std::equal_to&lt;int&gt;, std::hash&lt;int&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, true, true&gt; &gt;::clear (202 samples, 6.50%)</title><rect x="429.2" y="325" width="76.6" height="15.0" fill="rgb(244,100,11)" rx="2" ry="2" />
<text  x="432.15" y="335.5" >std::_Ha..</text>
</g>
<g >
<title>std::unordered_map&lt;int, std::unordered_map&lt;int, double, std::hash&lt;int&gt;, std::equal_to&lt;int&gt;, std::allocator&lt;std::pair&lt;int const, double&gt; &gt; &gt;, std::hash&lt;int&gt;, std::equal_to&lt;int&gt;, std::allocator&lt;std::pair&lt;int const, std::unordered_map&lt;int, double, std::hash&lt;int&gt;, std::equal_to&lt;int&gt;, std::allocator&lt;std::pair&lt;int const, double&gt; &gt; &gt; &gt; &gt; &gt;::~unordered_map (2 samples, 0.06%)</title><rect x="82.1" y="501" width="0.8" height="15.0" fill="rgb(242,65,37)" rx="2" ry="2" />
<text  x="85.14" y="511.5" ></text>
</g>
<g >
<title>std::__detail::_Map_base&lt;int, std::pair&lt;int const, std::unordered_map&lt;int, double, std::hash&lt;int&gt;, std::equal_to&lt;int&gt;, std::allocator&lt;std::pair&lt;int const, double&gt; &gt; &gt; &gt;, std::allocator&lt;std::pair&lt;int const, std::unordered_map&lt;int, double, std::hash&lt;int&gt;, std::equal_to&lt;int&gt;, std::allocator&lt;std::pair&lt;int const, double&gt; &gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;int&gt;, std::hash&lt;int&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt;, true&gt;::operator[] (1 samples, 0.03%)</title><rect x="48.3" y="565" width="0.4" height="15.0" fill="rgb(231,165,18)" rx="2" ry="2" />
<text  x="51.35" y="575.5" ></text>
</g>
<g >
<title>std::__detail::_Hashtable_alloc&lt;std::allocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;int const, double&gt;, false&gt; &gt; &gt;::_M_deallocate_nodes (1 samples, 0.03%)</title><rect x="82.5" y="325" width="0.4" height="15.0" fill="rgb(230,6,40)" rx="2" ry="2" />
<text  x="85.52" y="335.5" ></text>
</g>
<g >
<title>GraphData::~GraphData (3 samples, 0.10%)</title><rect x="81.8" y="533" width="1.1" height="15.0" fill="rgb(252,74,33)" rx="2" ry="2" />
<text  x="84.76" y="543.5" ></text>
</g>
<g >
<title>checked_request2size (1 samples, 0.03%)</title><rect x="134.5" y="309" width="0.4" height="15.0" fill="rgb(219,125,34)" rx="2" ry="2" />
<text  x="137.53" y="319.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;int, std::pair&lt;int const, double&gt;, std::allocator&lt;std::pair&lt;int const, double&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;int&gt;, std::hash&lt;int&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_bucket_index (3 samples, 0.10%)</title><rect x="780.7" y="437" width="1.2" height="15.0" fill="rgb(206,44,29)" rx="2" ry="2" />
<text  x="783.72" y="447.5" ></text>
</g>
<g >
<title>std::__detail::_Hashtable_alloc&lt;std::allocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;int const, int*&gt;, false&gt; &gt; &gt;::_M_deallocate_nodes (7 samples, 0.23%)</title><rect x="544.6" y="453" width="2.6" height="15.0" fill="rgb(228,67,34)" rx="2" ry="2" />
<text  x="547.57" y="463.5" ></text>
</g>
<g >
<title>operator new (33 samples, 1.06%)</title><rect x="800.1" y="341" width="12.5" height="15.0" fill="rgb(251,46,54)" rx="2" ry="2" />
<text  x="803.08" y="351.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;int, std::pair&lt;int const, std::unordered_map&lt;int, double, std::hash&lt;int&gt;, std::equal_to&lt;int&gt;, std::allocator&lt;std::pair&lt;int const, double&gt; &gt; &gt; &gt;, std::allocator&lt;std::pair&lt;int const, std::unordered_map&lt;int, double, std::hash&lt;int&gt;, std::equal_to&lt;int&gt;, std::allocator&lt;std::pair&lt;int const, double&gt; &gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;int&gt;, std::hash&lt;int&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_deallocate_buckets (1 samples, 0.03%)</title><rect x="82.1" y="453" width="0.4" height="15.0" fill="rgb(234,179,7)" rx="2" ry="2" />
<text  x="85.14" y="463.5" ></text>
</g>
<g >
<title>irq_exit_rcu (1 samples, 0.03%)</title><rect x="956.9" y="421" width="0.4" height="15.0" fill="rgb(254,31,44)" rx="2" ry="2" />
<text  x="959.89" y="431.5" ></text>
</g>
<g >
<title>common_interrupt (1 samples, 0.03%)</title><rect x="412.8" y="293" width="0.4" height="15.0" fill="rgb(206,29,18)" rx="2" ry="2" />
<text  x="415.82" y="303.5" ></text>
</g>
<g >
<title>std::__detail::_Mod_range_hashing::operator (7 samples, 0.23%)</title><rect x="514.2" y="421" width="2.7" height="15.0" fill="rgb(223,228,26)" rx="2" ry="2" />
<text  x="517.20" y="431.5" ></text>
</g>
<g >
<title>handle_irq_event_percpu (1 samples, 0.03%)</title><rect x="751.9" y="341" width="0.3" height="15.0" fill="rgb(232,112,16)" rx="2" ry="2" />
<text  x="754.87" y="351.5" ></text>
</g>
<g >
<title>std::unordered_map&lt;int, std::unordered_set&lt;int, std::hash&lt;int&gt;, std::equal_to&lt;int&gt;, std::allocator&lt;int&gt; &gt;, std::hash&lt;int&gt;, std::equal_to&lt;int&gt;, std::allocator&lt;std::pair&lt;int const, std::unordered_set&lt;int, std::hash&lt;int&gt;, std::equal_to&lt;int&gt;, std::allocator&lt;int&gt; &gt; &gt; &gt; &gt;::operator[] (86 samples, 2.77%)</title><rect x="282.6" y="485" width="32.7" height="15.0" fill="rgb(253,145,5)" rx="2" ry="2" />
<text  x="285.60" y="495.5" >st..</text>
</g>
<g >
<title>asm_common_interrupt (1 samples, 0.03%)</title><rect x="1046.1" y="389" width="0.4" height="15.0" fill="rgb(206,42,11)" rx="2" ry="2" />
<text  x="1049.11" y="399.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;int, int, std::allocator&lt;int&gt;, std::__detail::_Identity, std::equal_to&lt;int&gt;, std::hash&lt;int&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, true, true&gt; &gt;::_M_assign&lt;std::_Hashtable&lt;int, int, std::allocator&lt;int&gt;, std::__detail::_Identity, std::equal_to&lt;int&gt;, std::hash&lt;int&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, true, true&gt; &gt; const&amp;, std::__detail::_AllocNode&lt;std::allocator&lt;std::__detail::_Hash_node&lt;int, false&gt; &gt; &gt; &gt; (1 samples, 0.03%)</title><rect x="59.4" y="341" width="0.3" height="15.0" fill="rgb(220,150,4)" rx="2" ry="2" />
<text  x="62.36" y="351.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;int, int, std::allocator&lt;int&gt;, std::__detail::_Identity, std::equal_to&lt;int&gt;, std::hash&lt;int&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, true, true&gt; &gt;::_M_bucket_index (1 samples, 0.03%)</title><rect x="66.6" y="453" width="0.3" height="15.0" fill="rgb(244,187,0)" rx="2" ry="2" />
<text  x="69.57" y="463.5" ></text>
</g>
<g >
<title>tasklet_action_common.isra.0 (1 samples, 0.03%)</title><rect x="134.2" y="229" width="0.3" height="15.0" fill="rgb(243,110,30)" rx="2" ry="2" />
<text  x="137.15" y="239.5" ></text>
</g>
<g >
<title>__memset_avx2_unaligned_erms (1 samples, 0.03%)</title><rect x="140.2" y="277" width="0.4" height="15.0" fill="rgb(239,122,3)" rx="2" ry="2" />
<text  x="143.23" y="287.5" ></text>
</g>
<g >
<title>operator new (211 samples, 6.79%)</title><rect x="185.4" y="229" width="80.1" height="15.0" fill="rgb(241,135,48)" rx="2" ry="2" />
<text  x="188.41" y="239.5" >operator ..</text>
</g>
<g >
<title>std::__detail::_Hashtable_alloc&lt;std::allocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;int const, double&gt;, false&gt; &gt; &gt;::_M_deallocate_node_ptr (34 samples, 1.09%)</title><rect x="1169.9" y="293" width="12.9" height="15.0" fill="rgb(207,33,13)" rx="2" ry="2" />
<text  x="1172.88" y="303.5" ></text>
</g>
<g >
<title>std::__detail::_Mod_range_hashing::operator (4 samples, 0.13%)</title><rect x="59.7" y="309" width="1.6" height="15.0" fill="rgb(234,96,30)" rx="2" ry="2" />
<text  x="62.74" y="319.5" ></text>
</g>
<g >
<title>__sysvec_apic_timer_interrupt (1 samples, 0.03%)</title><rect x="180.5" y="149" width="0.3" height="15.0" fill="rgb(231,53,38)" rx="2" ry="2" />
<text  x="183.47" y="159.5" ></text>
</g>
<g >
<title>std::allocator_traits&lt;std::allocator&lt;std::__detail::_Hash_node_base*&gt; &gt;::deallocate (1 samples, 0.03%)</title><rect x="82.1" y="421" width="0.4" height="15.0" fill="rgb(226,99,46)" rx="2" ry="2" />
<text  x="85.14" y="431.5" ></text>
</g>
<g >
<title>__GI___libc_malloc (2 samples, 0.06%)</title><rect x="27.8" y="565" width="0.8" height="15.0" fill="rgb(209,39,31)" rx="2" ry="2" />
<text  x="30.84" y="575.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;int, int, std::allocator&lt;int&gt;, std::__detail::_Identity, std::equal_to&lt;int&gt;, std::hash&lt;int&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, true, true&gt; &gt;::~_Hashtable (22 samples, 0.71%)</title><rect x="505.8" y="469" width="8.4" height="15.0" fill="rgb(228,42,20)" rx="2" ry="2" />
<text  x="508.84" y="479.5" ></text>
</g>
<g >
<title>std::allocator_traits&lt;std::allocator&lt;std::__detail::_Hash_node&lt;int, false&gt; &gt; &gt;::allocate (1 samples, 0.03%)</title><rect x="67.7" y="437" width="0.4" height="15.0" fill="rgb(252,120,18)" rx="2" ry="2" />
<text  x="70.71" y="447.5" ></text>
</g>
<g >
<title>std::__detail::_Hashtable_alloc&lt;std::allocator&lt;std::__detail::_Hash_node&lt;int, false&gt; &gt; &gt;::_M_deallocate_nodes (13 samples, 0.42%)</title><rect x="509.3" y="437" width="4.9" height="15.0" fill="rgb(240,74,6)" rx="2" ry="2" />
<text  x="512.26" y="447.5" ></text>
</g>
<g >
<title>xhci_urb_enqueue (2 samples, 0.06%)</title><rect x="392.3" y="149" width="0.8" height="15.0" fill="rgb(222,192,24)" rx="2" ry="2" />
<text  x="395.32" y="159.5" ></text>
</g>
<g >
<title>std::__detail::_AllocNode&lt;std::allocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;int const, std::unordered_map&lt;int, double, std::hash&lt;int&gt;, std::equal_to&lt;int&gt;, std::allocator&lt;std::pair&lt;int const, double&gt; &gt; &gt; &gt;, false&gt; &gt; &gt;::operator (1 samples, 0.03%)</title><rect x="42.7" y="533" width="0.3" height="15.0" fill="rgb(216,42,18)" rx="2" ry="2" />
<text  x="45.65" y="543.5" ></text>
</g>
<g >
<title>std::vector&lt;com::github::coderodde::pathfinders::util::HeapNode&lt;int, double&gt;*, std::allocator&lt;com::github::coderodde::pathfinders::util::HeapNode&lt;int, double&gt;*&gt; &gt;::_M_realloc_insert&lt;com::github::coderodde::pathfinders::util::HeapNode&lt;int, double&gt;*&gt; (38 samples, 1.22%)</title><rect x="758.7" y="453" width="14.4" height="15.0" fill="rgb(220,81,37)" rx="2" ry="2" />
<text  x="761.70" y="463.5" ></text>
</g>
<g >
<title>std::__detail::_AllocNode&lt;std::allocator&lt;std::__detail::_Hash_node&lt;int, false&gt; &gt; &gt;::operator (2 samples, 0.06%)</title><rect x="1089.8" y="453" width="0.7" height="15.0" fill="rgb(247,126,42)" rx="2" ry="2" />
<text  x="1092.77" y="463.5" ></text>
</g>
<g >
<title>__usb_hcd_giveback_urb (1 samples, 0.03%)</title><rect x="260.6" y="69" width="0.4" height="15.0" fill="rgb(227,145,34)" rx="2" ry="2" />
<text  x="263.58" y="79.5" ></text>
</g>
<g >
<title>checked_request2size (4 samples, 0.13%)</title><rect x="264.0" y="197" width="1.5" height="15.0" fill="rgb(242,226,35)" rx="2" ry="2" />
<text  x="267.00" y="207.5" ></text>
</g>
<g >
<title>std::__detail::_Mod_range_hashing::operator (1 samples, 0.03%)</title><rect x="878.3" y="405" width="0.4" height="15.0" fill="rgb(222,101,7)" rx="2" ry="2" />
<text  x="881.29" y="415.5" ></text>
</g>
<g >
<title>std::allocator_traits&lt;std::allocator&lt;std::__detail::_Hash_node_base*&gt; &gt;::allocate (13 samples, 0.42%)</title><rect x="89.4" y="405" width="4.9" height="15.0" fill="rgb(225,173,22)" rx="2" ry="2" />
<text  x="92.35" y="415.5" ></text>
</g>
<g >
<title>bprm_execve (4 samples, 0.13%)</title><rect x="1188.5" y="517" width="1.5" height="15.0" fill="rgb(206,70,40)" rx="2" ry="2" />
<text  x="1191.48" y="527.5" ></text>
</g>
<g >
<title>usb_hcd_submit_urb (2 samples, 0.06%)</title><rect x="392.3" y="165" width="0.8" height="15.0" fill="rgb(213,55,27)" rx="2" ry="2" />
<text  x="395.32" y="175.5" ></text>
</g>
<g >
<title>__gnu_cxx::new_allocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;int const, double&gt;, false&gt; &gt;::allocate (1 samples, 0.03%)</title><rect x="47.6" y="389" width="0.4" height="15.0" fill="rgb(225,187,7)" rx="2" ry="2" />
<text  x="50.59" y="399.5" ></text>
</g>
<g >
<title>std::pair&lt;int const, std::unordered_set&lt;int, std::hash&lt;int&gt;, std::equal_to&lt;int&gt;, std::allocator&lt;int&gt; &gt; &gt;::~pair (6 samples, 0.19%)</title><rect x="44.9" y="485" width="2.3" height="15.0" fill="rgb(213,141,23)" rx="2" ry="2" />
<text  x="47.93" y="495.5" ></text>
</g>
<g >
<title>std::allocator_traits&lt;std::allocator&lt;std::__detail::_Hash_node&lt;int, false&gt; &gt; &gt;::allocate (1 samples, 0.03%)</title><rect x="59.4" y="293" width="0.3" height="15.0" fill="rgb(213,176,15)" rx="2" ry="2" />
<text  x="62.36" y="303.5" ></text>
</g>
<g >
<title>irq_exit_rcu (1 samples, 0.03%)</title><rect x="412.8" y="277" width="0.4" height="15.0" fill="rgb(205,109,26)" rx="2" ry="2" />
<text  x="415.82" y="287.5" ></text>
</g>
<g >
<title>asm_common_interrupt (3 samples, 0.10%)</title><rect x="391.9" y="325" width="1.2" height="15.0" fill="rgb(241,46,2)" rx="2" ry="2" />
<text  x="394.94" y="335.5" ></text>
</g>
<g >
<title>common_interrupt (1 samples, 0.03%)</title><rect x="1046.5" y="405" width="0.4" height="15.0" fill="rgb(230,164,40)" rx="2" ry="2" />
<text  x="1049.49" y="415.5" ></text>
</g>
<g >
<title>std::construct_at&lt;std::pair&lt;int const, std::unordered_set&lt;int, std::hash&lt;int&gt;, std::equal_to&lt;int&gt;, std::allocator&lt;int&gt; &gt; &gt;, std::pair&lt;int const, std::unordered_set&lt;int, std::hash&lt;int&gt;, std::equal_to&lt;int&gt;, std::allocator&lt;int&gt; &gt; &gt; const&amp;&gt; (346 samples, 11.13%)</title><rect x="136.8" y="389" width="131.4" height="15.0" fill="rgb(254,183,47)" rx="2" ry="2" />
<text  x="139.81" y="399.5" >std::construct_a..</text>
</g>
<g >
<title>xhci_irq (1 samples, 0.03%)</title><rect x="751.9" y="293" width="0.3" height="15.0" fill="rgb(214,7,30)" rx="2" ry="2" />
<text  x="754.87" y="303.5" ></text>
</g>
<g >
<title>_int_malloc (102 samples, 3.28%)</title><rect x="144.0" y="197" width="38.7" height="15.0" fill="rgb(205,110,46)" rx="2" ry="2" />
<text  x="147.02" y="207.5" >_in..</text>
</g>
<g >
<title>unlink_chunk (53 samples, 1.71%)</title><rect x="393.1" y="325" width="20.1" height="15.0" fill="rgb(247,228,50)" rx="2" ry="2" />
<text  x="396.08" y="335.5" ></text>
</g>
<g >
<title>com::github::coderodde::directed_graph::DirectedGraph&lt;int&gt;::DirectedGraph (9 samples, 0.29%)</title><rect x="59.7" y="533" width="3.5" height="15.0" fill="rgb(241,30,45)" rx="2" ry="2" />
<text  x="62.74" y="543.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_code_base&lt;int, std::pair&lt;int const, int*&gt;, std::__detail::_Select1st, std::hash&lt;int&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, false&gt;::_M_hash_code (8 samples, 0.26%)</title><rect x="875.3" y="405" width="3.0" height="15.0" fill="rgb(231,200,10)" rx="2" ry="2" />
<text  x="878.26" y="415.5" ></text>
</g>
<g >
<title>operator new (30 samples, 0.97%)</title><rect x="904.9" y="341" width="11.4" height="15.0" fill="rgb(245,68,25)" rx="2" ry="2" />
<text  x="907.87" y="351.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;int, int, std::allocator&lt;int&gt;, std::__detail::_Identity, std::equal_to&lt;int&gt;, std::hash&lt;int&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, true, true&gt; &gt;::_M_deallocate_buckets (21 samples, 0.68%)</title><rect x="1090.5" y="453" width="8.0" height="15.0" fill="rgb(223,162,25)" rx="2" ry="2" />
<text  x="1093.53" y="463.5" ></text>
</g>
<g >
<title>std::__detail::_Hashtable_alloc&lt;std::allocator&lt;std::__detail::_Hash_node&lt;int, false&gt; &gt; &gt;::_M_allocate_buckets (112 samples, 3.60%)</title><rect x="140.2" y="293" width="42.5" height="15.0" fill="rgb(231,178,39)" rx="2" ry="2" />
<text  x="143.23" y="303.5" >std:..</text>
</g>
<g >
<title>_int_malloc (23 samples, 0.74%)</title><rect x="823.6" y="357" width="8.8" height="15.0" fill="rgb(237,101,14)" rx="2" ry="2" />
<text  x="826.62" y="367.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;int, std::pair&lt;int const, std::unordered_set&lt;int, std::hash&lt;int&gt;, std::equal_to&lt;int&gt;, std::allocator&lt;int&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;int const, std::unordered_set&lt;int, std::hash&lt;int&gt;, std::equal_to&lt;int&gt;, std::allocator&lt;int&gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;int&gt;, std::hash&lt;int&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::clear (8 samples, 0.26%)</title><rect x="44.2" y="565" width="3.0" height="15.0" fill="rgb(224,177,6)" rx="2" ry="2" />
<text  x="47.17" y="575.5" ></text>
</g>
<g >
<title>exec_binprm (4 samples, 0.13%)</title><rect x="1188.5" y="501" width="1.5" height="15.0" fill="rgb(223,34,44)" rx="2" ry="2" />
<text  x="1191.48" y="511.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;int, std::pair&lt;int const, std::unordered_set&lt;int, std::hash&lt;int&gt;, std::equal_to&lt;int&gt;, std::allocator&lt;int&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;int const, std::unordered_set&lt;int, std::hash&lt;int&gt;, std::equal_to&lt;int&gt;, std::allocator&lt;int&gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;int&gt;, std::hash&lt;int&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_deallocate_buckets (258 samples, 8.30%)</title><rect x="315.3" y="453" width="97.9" height="15.0" fill="rgb(234,206,36)" rx="2" ry="2" />
<text  x="318.25" y="463.5" >std::_Hasht..</text>
</g>
<g >
<title>std::__detail::_Hash_code_base&lt;int, std::pair&lt;int const, int*&gt;, std::__detail::_Select1st, std::hash&lt;int&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, false&gt;::_M_bucket_index (1 samples, 0.03%)</title><rect x="858.2" y="453" width="0.4" height="15.0" fill="rgb(235,12,22)" rx="2" ry="2" />
<text  x="861.17" y="463.5" ></text>
</g>
<g >
<title>_int_malloc (7 samples, 0.23%)</title><rect x="960.3" y="341" width="2.7" height="15.0" fill="rgb(237,15,16)" rx="2" ry="2" />
<text  x="963.30" y="351.5" ></text>
</g>
<g >
<title>com::github::coderodde::pathfinders::util::tracebackPath&lt;int, double&gt; (141 samples, 4.54%)</title><rect x="574.9" y="501" width="53.6" height="15.0" fill="rgb(246,191,30)" rx="2" ry="2" />
<text  x="577.94" y="511.5" >com::..</text>
</g>
<g >
<title>__GI___libc_malloc (1 samples, 0.03%)</title><rect x="59.4" y="229" width="0.3" height="15.0" fill="rgb(228,103,35)" rx="2" ry="2" />
<text  x="62.36" y="239.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;int, int, std::allocator&lt;int&gt;, std::__detail::_Identity, std::equal_to&lt;int&gt;, std::hash&lt;int&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, true, true&gt; &gt;::_M_rehash_aux (1 samples, 0.03%)</title><rect x="67.3" y="437" width="0.4" height="15.0" fill="rgb(213,6,23)" rx="2" ry="2" />
<text  x="70.33" y="447.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;int, int, std::allocator&lt;int&gt;, std::__detail::_Identity, std::equal_to&lt;int&gt;, std::hash&lt;int&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, true, true&gt; &gt;::_M_allocate_buckets (112 samples, 3.60%)</title><rect x="140.2" y="309" width="42.5" height="15.0" fill="rgb(214,193,21)" rx="2" ry="2" />
<text  x="143.23" y="319.5" >std:..</text>
</g>
<g >
<title>unlink_chunk (14 samples, 0.45%)</title><rect x="662.6" y="453" width="5.4" height="15.0" fill="rgb(220,188,8)" rx="2" ry="2" />
<text  x="665.64" y="463.5" ></text>
</g>
<g >
<title>__gnu_cxx::__normal_iterator&lt;com::github::coderodde::pathfinders::util::HeapNode&lt;int, double&gt;**, std::vector&lt;com::github::coderodde::pathfinders::util::HeapNode&lt;int, double&gt;*, std::allocator&lt;com::github::coderodde::pathfinders::util::HeapNode&lt;int, double&gt;*&gt; &gt; &gt;::operator+ (3 samples, 0.10%)</title><rect x="732.1" y="437" width="1.2" height="15.0" fill="rgb(254,5,6)" rx="2" ry="2" />
<text  x="735.12" y="447.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;int, std::pair&lt;int const, double&gt;, std::allocator&lt;std::pair&lt;int const, double&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;int&gt;, std::hash&lt;int&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::find (22 samples, 0.71%)</title><rect x="514.2" y="469" width="8.3" height="15.0" fill="rgb(241,155,16)" rx="2" ry="2" />
<text  x="517.20" y="479.5" ></text>
</g>
<g >
<title>GraphData::GraphData (1 samples, 0.03%)</title><rect x="59.4" y="533" width="0.3" height="15.0" fill="rgb(207,226,29)" rx="2" ry="2" />
<text  x="62.36" y="543.5" ></text>
</g>
<g >
<title>usb_get_current_frame_number (1 samples, 0.03%)</title><rect x="419.7" y="165" width="0.3" height="15.0" fill="rgb(208,31,43)" rx="2" ry="2" />
<text  x="422.66" y="175.5" ></text>
</g>
<g >
<title>usb_submit_urb (1 samples, 0.03%)</title><rect x="1046.5" y="277" width="0.4" height="15.0" fill="rgb(242,132,53)" rx="2" ry="2" />
<text  x="1049.49" y="287.5" ></text>
</g>
<g >
<title>std::__detail::_Hashtable_alloc&lt;std::allocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;int const, double&gt;, false&gt; &gt; &gt;::_M_deallocate_nodes (53 samples, 1.71%)</title><rect x="1162.7" y="325" width="20.1" height="15.0" fill="rgb(220,56,20)" rx="2" ry="2" />
<text  x="1165.66" y="335.5" ></text>
</g>
<g >
<title>std::destroy_at&lt;std::pair&lt;int const, std::unordered_map&lt;int, double, std::hash&lt;int&gt;, std::equal_to&lt;int&gt;, std::allocator&lt;std::pair&lt;int const, double&gt; &gt; &gt; &gt; &gt; (65 samples, 2.09%)</title><rect x="1158.1" y="405" width="24.7" height="15.0" fill="rgb(205,7,15)" rx="2" ry="2" />
<text  x="1161.11" y="415.5" >s..</text>
</g>
<g >
<title>std::_Hashtable&lt;int, int, std::allocator&lt;int&gt;, std::__detail::_Identity, std::equal_to&lt;int&gt;, std::hash&lt;int&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, true, true&gt; &gt;::clear (13 samples, 0.42%)</title><rect x="509.3" y="453" width="4.9" height="15.0" fill="rgb(246,66,34)" rx="2" ry="2" />
<text  x="512.26" y="463.5" ></text>
</g>
<g >
<title>__GI___libc_malloc (33 samples, 1.06%)</title><rect x="800.1" y="325" width="12.5" height="15.0" fill="rgb(215,225,21)" rx="2" ry="2" />
<text  x="803.08" y="335.5" ></text>
</g>
<g >
<title>usb_giveback_urb_bh (1 samples, 0.03%)</title><rect x="829.7" y="245" width="0.4" height="15.0" fill="rgb(248,116,1)" rx="2" ry="2" />
<text  x="832.70" y="255.5" ></text>
</g>
<g >
<title>xhci_update_erst_dequeue (1 samples, 0.03%)</title><rect x="751.9" y="277" width="0.3" height="15.0" fill="rgb(217,204,17)" rx="2" ry="2" />
<text  x="754.87" y="287.5" ></text>
</g>
<g >
<title>xhci_queue_isoc_tx (1 samples, 0.03%)</title><rect x="412.8" y="101" width="0.4" height="15.0" fill="rgb(250,165,10)" rx="2" ry="2" />
<text  x="415.82" y="111.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;int, int, std::allocator&lt;int&gt;, std::__detail::_Identity, std::equal_to&lt;int&gt;, std::hash&lt;int&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, true, true&gt; &gt;::~_Hashtable (226 samples, 7.27%)</title><rect x="420.0" y="341" width="85.8" height="15.0" fill="rgb(218,169,51)" rx="2" ry="2" />
<text  x="423.04" y="351.5" >std::_Hash..</text>
</g>
<g >
<title>do_exit (1 samples, 0.03%)</title><rect x="1188.1" y="517" width="0.4" height="15.0" fill="rgb(227,33,52)" rx="2" ry="2" />
<text  x="1191.10" y="527.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;int, int, std::allocator&lt;int&gt;, std::__detail::_Identity, std::equal_to&lt;int&gt;, std::hash&lt;int&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, true, true&gt; &gt;::find (8 samples, 0.26%)</title><rect x="64.3" y="501" width="3.0" height="15.0" fill="rgb(238,134,53)" rx="2" ry="2" />
<text  x="67.29" y="511.5" ></text>
</g>
<g >
<title>std::__detail::_Mod_range_hashing::operator (5 samples, 0.16%)</title><rect x="1044.6" y="405" width="1.9" height="15.0" fill="rgb(250,85,51)" rx="2" ry="2" />
<text  x="1047.59" y="415.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;int, std::pair&lt;int const, int*&gt;, std::allocator&lt;std::pair&lt;int const, int*&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;int&gt;, std::hash&lt;int&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_assign&lt;std::_Hashtable&lt;int, std::pair&lt;int const, int*&gt;, std::allocator&lt;std::pair&lt;int const, int*&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;int&gt;, std::hash&lt;int&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt; const&amp;, std::__detail::_AllocNode&lt;std::allocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;int const, int*&gt;, false&gt; &gt; &gt; &gt; (55 samples, 1.77%)</title><rect x="953.8" y="469" width="20.9" height="15.0" fill="rgb(245,113,53)" rx="2" ry="2" />
<text  x="956.85" y="479.5" ></text>
</g>
<g >
<title>com::github::coderodde::pathfinders::util::cleanPriorityQueue&lt;int, double&gt; (73 samples, 2.35%)</title><rect x="547.2" y="501" width="27.7" height="15.0" fill="rgb(208,13,27)" rx="2" ry="2" />
<text  x="550.23" y="511.5" >c..</text>
</g>
<g >
<title>std::_Hashtable&lt;int, std::pair&lt;int const, double&gt;, std::allocator&lt;std::pair&lt;int const, double&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;int&gt;, std::hash&lt;int&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_Scoped_node::_Scoped_node&lt;std::piecewise_construct_t const&amp;, std::tuple&lt;int const&amp;&gt;, std::tuple&lt;&gt; &gt; (1 samples, 0.03%)</title><rect x="48.0" y="549" width="0.3" height="15.0" fill="rgb(249,0,33)" rx="2" ry="2" />
<text  x="50.97" y="559.5" ></text>
</g>
<g >
<title>asm_exc_page_fault (1 samples, 0.03%)</title><rect x="67.7" y="341" width="0.4" height="15.0" fill="rgb(228,69,43)" rx="2" ry="2" />
<text  x="70.71" y="351.5" ></text>
</g>
<g >
<title>std::__detail::_Mod_range_hashing::operator (4 samples, 0.13%)</title><rect x="182.7" y="277" width="1.6" height="15.0" fill="rgb(206,211,11)" rx="2" ry="2" />
<text  x="185.75" y="287.5" ></text>
</g>
<g >
<title>malloc_consolidate (11 samples, 0.35%)</title><rect x="425.0" y="213" width="4.2" height="15.0" fill="rgb(210,65,36)" rx="2" ry="2" />
<text  x="427.97" y="223.5" ></text>
</g>
<g >
<title>handle_edge_irq (2 samples, 0.06%)</title><rect x="751.9" y="373" width="0.7" height="15.0" fill="rgb(236,202,1)" rx="2" ry="2" />
<text  x="754.87" y="383.5" ></text>
</g>
<g >
<title>__sched_text_start (4 samples, 0.13%)</title><rect x="59.7" y="197" width="1.6" height="15.0" fill="rgb(230,179,24)" rx="2" ry="2" />
<text  x="62.74" y="207.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;int, std::pair&lt;int const, int*&gt;, std::allocator&lt;std::pair&lt;int const, int*&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;int&gt;, std::hash&lt;int&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_bucket_index (2 samples, 0.06%)</title><rect x="893.5" y="437" width="0.7" height="15.0" fill="rgb(240,55,0)" rx="2" ry="2" />
<text  x="896.48" y="447.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;int, int, std::allocator&lt;int&gt;, std::__detail::_Identity, std::equal_to&lt;int&gt;, std::hash&lt;int&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, true, true&gt; &gt;::_M_deallocate_buckets (24 samples, 0.77%)</title><rect x="420.0" y="325" width="9.2" height="15.0" fill="rgb(245,59,46)" rx="2" ry="2" />
<text  x="423.04" y="335.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;int, std::pair&lt;int const, int*&gt;, std::allocator&lt;std::pair&lt;int const, int*&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;int&gt;, std::hash&lt;int&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_Hashtable (55 samples, 1.77%)</title><rect x="953.8" y="485" width="20.9" height="15.0" fill="rgb(230,154,42)" rx="2" ry="2" />
<text  x="956.85" y="495.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;int, std::pair&lt;int const, std::unordered_map&lt;int, double, std::hash&lt;int&gt;, std::equal_to&lt;int&gt;, std::allocator&lt;std::pair&lt;int const, double&gt; &gt; &gt; &gt;, std::allocator&lt;std::pair&lt;int const, std::unordered_map&lt;int, double, std::hash&lt;int&gt;, std::equal_to&lt;int&gt;, std::allocator&lt;std::pair&lt;int const, double&gt; &gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;int&gt;, std::hash&lt;int&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::clear (1 samples, 0.03%)</title><rect x="82.5" y="469" width="0.4" height="15.0" fill="rgb(243,63,46)" rx="2" ry="2" />
<text  x="85.52" y="479.5" ></text>
</g>
<g >
<title>std::__detail::_AllocNode&lt;std::allocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;int const, std::unordered_set&lt;int, std::hash&lt;int&gt;, std::equal_to&lt;int&gt;, std::allocator&lt;int&gt; &gt; &gt;, false&gt; &gt; &gt;::operator (455 samples, 14.64%)</title><rect x="95.4" y="437" width="172.8" height="15.0" fill="rgb(224,77,32)" rx="2" ry="2" />
<text  x="98.42" y="447.5" >std::__detail::_AllocN..</text>
</g>
<g >
<title>_int_free (21 samples, 0.68%)</title><rect x="1090.5" y="373" width="8.0" height="15.0" fill="rgb(229,52,19)" rx="2" ry="2" />
<text  x="1093.53" y="383.5" ></text>
</g>
<g >
<title>handle_irq_event (1 samples, 0.03%)</title><rect x="139.8" y="245" width="0.4" height="15.0" fill="rgb(219,111,54)" rx="2" ry="2" />
<text  x="142.85" y="255.5" ></text>
</g>
<g >
<title>std::vector&lt;std::chrono::duration&lt;long, std::ratio&lt;1l, 1000000000l&gt; &gt;, std::allocator&lt;std::chrono::duration&lt;long, std::ratio&lt;1l, 1000000000l&gt; &gt; &gt; &gt;::reserve (13 samples, 0.42%)</title><rect x="1182.8" y="533" width="4.9" height="15.0" fill="rgb(248,147,37)" rx="2" ry="2" />
<text  x="1185.79" y="543.5" ></text>
</g>
<g >
<title>std::__detail::_Hashtable_alloc&lt;std::allocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;int const, std::unordered_set&lt;int, std::hash&lt;int&gt;, std::equal_to&lt;int&gt;, std::allocator&lt;int&gt; &gt; &gt;, false&gt; &gt; &gt;::_M_deallocate_node_ptr (2 samples, 0.06%)</title><rect x="44.2" y="517" width="0.7" height="15.0" fill="rgb(240,52,21)" rx="2" ry="2" />
<text  x="47.17" y="527.5" ></text>
</g>
<g >
<title>std::__detail::_AllocNode&lt;std::allocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;int const, std::unordered_set&lt;int, std::hash&lt;int&gt;, std::equal_to&lt;int&gt;, std::allocator&lt;int&gt; &gt; &gt;, false&gt; &gt; &gt;::operator (9 samples, 0.29%)</title><rect x="59.7" y="469" width="3.5" height="15.0" fill="rgb(252,173,44)" rx="2" ry="2" />
<text  x="62.74" y="479.5" ></text>
</g>
<g >
<title>__gnu_cxx::new_allocator&lt;std::__detail::_Hash_node_base*&gt;::allocate (33 samples, 1.06%)</title><rect x="800.1" y="357" width="12.5" height="15.0" fill="rgb(242,156,1)" rx="2" ry="2" />
<text  x="803.08" y="367.5" ></text>
</g>
<g >
<title>operator new (1 samples, 0.03%)</title><rect x="68.1" y="389" width="0.4" height="15.0" fill="rgb(244,43,43)" rx="2" ry="2" />
<text  x="71.09" y="399.5" ></text>
</g>
<g >
<title>pipe_release (1 samples, 0.03%)</title><rect x="1187.7" y="453" width="0.4" height="15.0" fill="rgb(254,164,37)" rx="2" ry="2" />
<text  x="1190.72" y="463.5" ></text>
</g>
<g >
<title>retire_capture_urb (1 samples, 0.03%)</title><rect x="419.7" y="181" width="0.3" height="15.0" fill="rgb(226,59,40)" rx="2" ry="2" />
<text  x="422.66" y="191.5" ></text>
</g>
<g >
<title>std::allocator&lt;std::__detail::_Hash_node_base*&gt;::deallocate (21 samples, 0.68%)</title><rect x="1090.5" y="405" width="8.0" height="15.0" fill="rgb(244,99,37)" rx="2" ry="2" />
<text  x="1093.53" y="415.5" ></text>
</g>
<g >
<title>x86_pmu_enable (4 samples, 0.13%)</title><rect x="59.7" y="133" width="1.6" height="15.0" fill="rgb(214,191,17)" rx="2" ry="2" />
<text  x="62.74" y="143.5" ></text>
</g>
<g >
<title>handle_irq_event (1 samples, 0.03%)</title><rect x="1182.0" y="149" width="0.4" height="15.0" fill="rgb(219,111,24)" rx="2" ry="2" />
<text  x="1185.03" y="159.5" ></text>
</g>
<g >
<title>std::allocator_traits&lt;std::allocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;int const, std::unordered_map&lt;int, double, std::hash&lt;int&gt;, std::equal_to&lt;int&gt;, std::allocator&lt;std::pair&lt;int const, double&gt; &gt; &gt; &gt;, false&gt; &gt; &gt;::construct&lt;std::pair&lt;int const, std::unordered_map&lt;int, double, std::hash&lt;int&gt;, std::equal_to&lt;int&gt;, std::allocator&lt;std::pair&lt;int const, double&gt; &gt; &gt; &gt;, std::pair&lt;int const, std::unordered_map&lt;int, double, std::hash&lt;int&gt;, std::equal_to&lt;int&gt;, std::allocator&lt;std::pair&lt;int const, double&gt; &gt; &gt; &gt; const&amp;&gt; (1 samples, 0.03%)</title><rect x="47.6" y="549" width="0.4" height="15.0" fill="rgb(253,129,24)" rx="2" ry="2" />
<text  x="50.59" y="559.5" ></text>
</g>
<g >
<title>operator new (1 samples, 0.03%)</title><rect x="68.5" y="261" width="0.3" height="15.0" fill="rgb(245,204,26)" rx="2" ry="2" />
<text  x="71.47" y="271.5" ></text>
</g>
<g >
<title>snd_complete_urb (1 samples, 0.03%)</title><rect x="419.7" y="197" width="0.3" height="15.0" fill="rgb(212,144,27)" rx="2" ry="2" />
<text  x="422.66" y="207.5" ></text>
</g>
<g >
<title>std::__detail::_Hashtable_alloc&lt;std::allocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;int const, double&gt;, false&gt; &gt; &gt;::_M_deallocate_node (8 samples, 0.26%)</title><rect x="855.1" y="437" width="3.1" height="15.0" fill="rgb(215,137,46)" rx="2" ry="2" />
<text  x="858.14" y="447.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;int, std::pair&lt;int const, double&gt;, std::allocator&lt;std::pair&lt;int const, double&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;int&gt;, std::hash&lt;int&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_find_node (15 samples, 0.48%)</title><rect x="516.9" y="453" width="5.6" height="15.0" fill="rgb(233,229,50)" rx="2" ry="2" />
<text  x="519.85" y="463.5" ></text>
</g>
<g >
<title>[demo] (1 samples, 0.03%)</title><rect x="604.6" y="197" width="0.3" height="15.0" fill="rgb(244,27,37)" rx="2" ry="2" />
<text  x="607.56" y="207.5" ></text>
</g>
<g >
<title>__GI___libc_malloc (38 samples, 1.22%)</title><rect x="758.7" y="341" width="14.4" height="15.0" fill="rgb(205,91,48)" rx="2" ry="2" />
<text  x="761.70" y="351.5" ></text>
</g>
<g >
<title>usb_submit_urb (1 samples, 0.03%)</title><rect x="958.4" y="245" width="0.4" height="15.0" fill="rgb(251,1,21)" rx="2" ry="2" />
<text  x="961.40" y="255.5" ></text>
</g>
<g >
<title>std::allocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;int const, double&gt;, false&gt; &gt;::deallocate (34 samples, 1.09%)</title><rect x="1169.9" y="261" width="12.9" height="15.0" fill="rgb(247,160,43)" rx="2" ry="2" />
<text  x="1172.88" y="271.5" ></text>
</g>
<g >
<title>_int_free (5 samples, 0.16%)</title><rect x="1159.6" y="245" width="1.9" height="15.0" fill="rgb(225,228,47)" rx="2" ry="2" />
<text  x="1162.63" y="255.5" ></text>
</g>
<g >
<title>unlink_chunk (1 samples, 0.03%)</title><rect x="590.9" y="277" width="0.4" height="15.0" fill="rgb(230,38,8)" rx="2" ry="2" />
<text  x="593.89" y="287.5" ></text>
</g>
<g >
<title>std::__detail::_AllocNode&lt;std::allocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;int const, std::unordered_map&lt;int, double, std::hash&lt;int&gt;, std::equal_to&lt;int&gt;, std::allocator&lt;std::pair&lt;int const, double&gt; &gt; &gt; &gt;, false&gt; &gt; &gt;::operator (5 samples, 0.16%)</title><rect x="68.1" y="469" width="1.9" height="15.0" fill="rgb(208,3,54)" rx="2" ry="2" />
<text  x="71.09" y="479.5" ></text>
</g>
<g >
<title>perf_event_task_tick (1 samples, 0.03%)</title><rect x="579.9" y="261" width="0.4" height="15.0" fill="rgb(239,205,34)" rx="2" ry="2" />
<text  x="582.88" y="271.5" ></text>
</g>
<g >
<title>__softirqentry_text_start (1 samples, 0.03%)</title><rect x="772.7" y="261" width="0.4" height="15.0" fill="rgb(221,83,45)" rx="2" ry="2" />
<text  x="775.75" y="271.5" ></text>
</g>
<g >
<title>asm_common_interrupt (2 samples, 0.06%)</title><rect x="840.3" y="341" width="0.8" height="15.0" fill="rgb(221,217,0)" rx="2" ry="2" />
<text  x="843.33" y="351.5" ></text>
</g>
<g >
<title>usb_submit_urb (1 samples, 0.03%)</title><rect x="1187.3" y="213" width="0.4" height="15.0" fill="rgb(218,38,54)" rx="2" ry="2" />
<text  x="1190.34" y="223.5" ></text>
</g>
<g >
<title>com::github::coderodde::directed_graph::DirectedGraphWeightFunction&lt;int, double&gt;::DirectedGraphWeightFunction (141 samples, 4.54%)</title><rect x="574.9" y="469" width="53.6" height="15.0" fill="rgb(241,152,26)" rx="2" ry="2" />
<text  x="577.94" y="479.5" >com::..</text>
</g>
<g >
<title>handle_irq_event (1 samples, 0.03%)</title><rect x="858.2" y="357" width="0.4" height="15.0" fill="rgb(218,195,4)" rx="2" ry="2" />
<text  x="861.17" y="367.5" ></text>
</g>
<g >
<title>_int_malloc (18 samples, 0.58%)</title><rect x="594.3" y="165" width="6.8" height="15.0" fill="rgb(248,148,48)" rx="2" ry="2" />
<text  x="597.31" y="175.5" ></text>
</g>
<g >
<title>std::allocator&lt;std::__detail::_Hash_node_base*&gt;::deallocate (113 samples, 3.64%)</title><rect x="1111.0" y="405" width="42.9" height="15.0" fill="rgb(218,160,9)" rx="2" ry="2" />
<text  x="1114.03" y="415.5" >std:..</text>
</g>
<g >
<title>__GI___libc_free (2 samples, 0.06%)</title><rect x="1012.7" y="357" width="0.8" height="15.0" fill="rgb(234,198,41)" rx="2" ry="2" />
<text  x="1015.70" y="367.5" ></text>
</g>
<g >
<title>_int_malloc (1 samples, 0.03%)</title><rect x="68.5" y="229" width="0.3" height="15.0" fill="rgb(211,218,43)" rx="2" ry="2" />
<text  x="71.47" y="239.5" ></text>
</g>
<g >
<title>get_max_fast (1 samples, 0.03%)</title><rect x="626.6" y="149" width="0.4" height="15.0" fill="rgb(219,56,15)" rx="2" ry="2" />
<text  x="629.58" y="159.5" ></text>
</g>
<g >
<title>operator delete (1 samples, 0.03%)</title><rect x="505.1" y="213" width="0.4" height="15.0" fill="rgb(232,138,2)" rx="2" ry="2" />
<text  x="508.08" y="223.5" ></text>
</g>
<g >
<title>std::unordered_set&lt;int, std::hash&lt;int&gt;, std::equal_to&lt;int&gt;, std::allocator&lt;int&gt; &gt;::contains (2 samples, 0.06%)</title><rect x="38.1" y="549" width="0.8" height="15.0" fill="rgb(228,219,12)" rx="2" ry="2" />
<text  x="41.10" y="559.5" ></text>
</g>
<g >
<title>usb_submit_urb (1 samples, 0.03%)</title><rect x="526.3" y="261" width="0.4" height="15.0" fill="rgb(217,201,37)" rx="2" ry="2" />
<text  x="529.34" y="271.5" ></text>
</g>
<g >
<title>std::__detail::_Map_base&lt;int, std::pair&lt;int const, double&gt;, std::allocator&lt;std::pair&lt;int const, double&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;int&gt;, std::hash&lt;int&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt;, true&gt;::operator[] (3 samples, 0.10%)</title><rect x="522.5" y="469" width="1.2" height="15.0" fill="rgb(225,108,50)" rx="2" ry="2" />
<text  x="525.55" y="479.5" ></text>
</g>
<g >
<title>__GI___libc_malloc (1 samples, 0.03%)</title><rect x="67.7" y="373" width="0.4" height="15.0" fill="rgb(227,34,13)" rx="2" ry="2" />
<text  x="70.71" y="383.5" ></text>
</g>
<g >
<title>std::_Vector_base&lt;std::chrono::duration&lt;long, std::ratio&lt;1l, 1000000000l&gt; &gt;, std::allocator&lt;std::chrono::duration&lt;long, std::ratio&lt;1l, 1000000000l&gt; &gt; &gt; &gt;::_M_allocate (13 samples, 0.42%)</title><rect x="1182.8" y="517" width="4.9" height="15.0" fill="rgb(217,193,24)" rx="2" ry="2" />
<text  x="1185.79" y="527.5" ></text>
</g>
<g >
<title>std::__detail::_AllocNode&lt;std::allocator&lt;std::__detail::_Hash_node&lt;int, false&gt; &gt; &gt;::operator (2 samples, 0.06%)</title><rect x="26.7" y="549" width="0.8" height="15.0" fill="rgb(251,29,7)" rx="2" ry="2" />
<text  x="29.71" y="559.5" ></text>
</g>
<g >
<title>__memset_avx2_erms (1 samples, 0.03%)</title><rect x="1153.9" y="453" width="0.4" height="15.0" fill="rgb(254,135,25)" rx="2" ry="2" />
<text  x="1156.93" y="463.5" ></text>
</g>
<g >
<title>__GI___libc_malloc (13 samples, 0.42%)</title><rect x="89.4" y="341" width="4.9" height="15.0" fill="rgb(240,47,16)" rx="2" ry="2" />
<text  x="92.35" y="351.5" ></text>
</g>
<g >
<title>____fput (1 samples, 0.03%)</title><rect x="1187.7" y="485" width="0.4" height="15.0" fill="rgb(219,229,46)" rx="2" ry="2" />
<text  x="1190.72" y="495.5" ></text>
</g>
<g >
<title>std::__detail::_Hashtable_alloc&lt;std::allocator&lt;std::__detail::_Hash_node&lt;int, false&gt; &gt; &gt;::_M_deallocate_node (8 samples, 0.26%)</title><rect x="511.2" y="421" width="3.0" height="15.0" fill="rgb(223,166,0)" rx="2" ry="2" />
<text  x="514.16" y="431.5" ></text>
</g>
<g >
<title>scheduler_tick (1 samples, 0.03%)</title><rect x="579.9" y="277" width="0.4" height="15.0" fill="rgb(241,0,13)" rx="2" ry="2" />
<text  x="582.88" y="287.5" ></text>
</g>
<g >
<title>std::allocator&lt;std::__detail::_Hash_node&lt;int, false&gt; &gt;::deallocate (8 samples, 0.26%)</title><rect x="511.2" y="373" width="3.0" height="15.0" fill="rgb(225,54,13)" rx="2" ry="2" />
<text  x="514.16" y="383.5" ></text>
</g>
<g >
<title>std::__detail::_AllocNode&lt;std::allocator&lt;std::__detail::_Hash_node&lt;int, false&gt; &gt; &gt;::operator (5 samples, 0.16%)</title><rect x="61.3" y="341" width="1.9" height="15.0" fill="rgb(244,95,31)" rx="2" ry="2" />
<text  x="64.25" y="351.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_code_base&lt;int, int, std::__detail::_Identity, std::hash&lt;int&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, false&gt;::_M_bucket_index (4 samples, 0.13%)</title><rect x="59.7" y="325" width="1.6" height="15.0" fill="rgb(233,65,19)" rx="2" ry="2" />
<text  x="62.74" y="335.5" ></text>
</g>
<g >
<title>xhci_urb_enqueue (1 samples, 0.03%)</title><rect x="799.7" y="245" width="0.4" height="15.0" fill="rgb(240,96,26)" rx="2" ry="2" />
<text  x="802.70" y="255.5" ></text>
</g>
<g >
<title>std::__detail::_Hashtable_alloc&lt;std::allocator&lt;std::__detail::_Hash_node&lt;int, false&gt; &gt; &gt;::_M_deallocate_buckets (9 samples, 0.29%)</title><rect x="505.8" y="421" width="3.5" height="15.0" fill="rgb(207,50,24)" rx="2" ry="2" />
<text  x="508.84" y="431.5" ></text>
</g>
<g >
<title>std::__detail::_AllocNode&lt;std::allocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;int const, int*&gt;, false&gt; &gt; &gt;::operator (44 samples, 1.42%)</title><rect x="958.0" y="453" width="16.7" height="15.0" fill="rgb(226,106,34)" rx="2" ry="2" />
<text  x="961.02" y="463.5" ></text>
</g>
<g >
<title>unlink_chunk (8 samples, 0.26%)</title><rect x="950.8" y="341" width="3.0" height="15.0" fill="rgb(228,37,24)" rx="2" ry="2" />
<text  x="953.81" y="351.5" ></text>
</g>
<g >
<title>asm_common_interrupt (2 samples, 0.06%)</title><rect x="751.9" y="421" width="0.7" height="15.0" fill="rgb(208,3,3)" rx="2" ry="2" />
<text  x="754.87" y="431.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_code_base&lt;int, std::pair&lt;int const, int*&gt;, std::__detail::_Select1st, std::hash&lt;int&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, false&gt;::_M_bucket_index (2 samples, 0.06%)</title><rect x="893.5" y="421" width="0.7" height="15.0" fill="rgb(209,104,41)" rx="2" ry="2" />
<text  x="896.48" y="431.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;int, std::pair&lt;int const, double&gt;, std::allocator&lt;std::pair&lt;int const, double&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;int&gt;, std::hash&lt;int&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_allocate_buckets (21 samples, 0.68%)</title><rect x="593.5" y="277" width="8.0" height="15.0" fill="rgb(253,122,24)" rx="2" ry="2" />
<text  x="596.55" y="287.5" ></text>
</g>
<g >
<title>operator new (20 samples, 0.64%)</title><rect x="593.9" y="197" width="7.6" height="15.0" fill="rgb(210,21,30)" rx="2" ry="2" />
<text  x="596.93" y="207.5" ></text>
</g>
<g >
<title>irq_exit_rcu (1 samples, 0.03%)</title><rect x="1187.3" y="325" width="0.4" height="15.0" fill="rgb(213,178,27)" rx="2" ry="2" />
<text  x="1190.34" y="335.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;int, std::pair&lt;int const, std::unordered_set&lt;int, std::hash&lt;int&gt;, std::equal_to&lt;int&gt;, std::allocator&lt;int&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;int const, std::unordered_set&lt;int, std::hash&lt;int&gt;, std::equal_to&lt;int&gt;, std::allocator&lt;int&gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;int&gt;, std::hash&lt;int&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_Hashtable (1 samples, 0.03%)</title><rect x="59.4" y="485" width="0.3" height="15.0" fill="rgb(207,82,10)" rx="2" ry="2" />
<text  x="62.36" y="495.5" ></text>
</g>
<g >
<title>handle_irq_event (1 samples, 0.03%)</title><rect x="1046.1" y="325" width="0.4" height="15.0" fill="rgb(246,105,27)" rx="2" ry="2" />
<text  x="1049.11" y="335.5" ></text>
</g>
<g >
<title>irq_exit_rcu (2 samples, 0.06%)</title><rect x="260.2" y="149" width="0.8" height="15.0" fill="rgb(208,7,31)" rx="2" ry="2" />
<text  x="263.20" y="159.5" ></text>
</g>
<g >
<title>xhci_queue_isoc_tx (1 samples, 0.03%)</title><rect x="1046.5" y="213" width="0.4" height="15.0" fill="rgb(219,112,50)" rx="2" ry="2" />
<text  x="1049.49" y="223.5" ></text>
</g>
<g >
<title>xhci_msi_irq (1 samples, 0.03%)</title><rect x="1046.1" y="277" width="0.4" height="15.0" fill="rgb(251,203,23)" rx="2" ry="2" />
<text  x="1049.11" y="287.5" ></text>
</g>
<g >
<title>snd_complete_urb (1 samples, 0.03%)</title><rect x="1187.3" y="229" width="0.4" height="15.0" fill="rgb(230,164,6)" rx="2" ry="2" />
<text  x="1190.34" y="239.5" ></text>
</g>
<g >
<title>std::unordered_map&lt;int, double, std::hash&lt;int&gt;, std::equal_to&lt;int&gt;, std::allocator&lt;std::pair&lt;int const, double&gt; &gt; &gt;::unordered_map (1 samples, 0.03%)</title><rect x="47.6" y="501" width="0.4" height="15.0" fill="rgb(248,11,16)" rx="2" ry="2" />
<text  x="50.59" y="511.5" ></text>
</g>
<g >
<title>common_interrupt (1 samples, 0.03%)</title><rect x="829.7" y="325" width="0.4" height="15.0" fill="rgb(225,177,13)" rx="2" ry="2" />
<text  x="832.70" y="335.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;int, std::pair&lt;int const, std::unordered_set&lt;int, std::hash&lt;int&gt;, std::equal_to&lt;int&gt;, std::allocator&lt;int&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;int const, std::unordered_set&lt;int, std::hash&lt;int&gt;, std::equal_to&lt;int&gt;, std::allocator&lt;int&gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;int&gt;, std::hash&lt;int&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_find_node (3 samples, 0.10%)</title><rect x="63.2" y="485" width="1.1" height="15.0" fill="rgb(244,181,2)" rx="2" ry="2" />
<text  x="66.15" y="495.5" ></text>
</g>
<g >
<title>std::__detail::_Hashtable_alloc&lt;std::allocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;int const, std::unordered_map&lt;int, double, std::hash&lt;int&gt;, std::equal_to&lt;int&gt;, std::allocator&lt;std::pair&lt;int const, double&gt; &gt; &gt; &gt;, false&gt; &gt; &gt;::_M_deallocate_buckets (1 samples, 0.03%)</title><rect x="82.1" y="437" width="0.4" height="15.0" fill="rgb(242,140,33)" rx="2" ry="2" />
<text  x="85.14" y="447.5" ></text>
</g>
<g >
<title>std::__detail::_Insert_base&lt;int, int, std::allocator&lt;int&gt;, std::__detail::_Identity, std::equal_to&lt;int&gt;, std::hash&lt;int&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, true, true&gt; &gt;::insert (47 samples, 1.51%)</title><rect x="1072.7" y="485" width="17.8" height="15.0" fill="rgb(253,137,6)" rx="2" ry="2" />
<text  x="1075.68" y="495.5" ></text>
</g>
<g >
<title>__mod_lruvec_page_state (1 samples, 0.03%)</title><rect x="1188.1" y="389" width="0.4" height="15.0" fill="rgb(228,104,45)" rx="2" ry="2" />
<text  x="1191.10" y="399.5" ></text>
</g>
<g >
<title>std::__detail::_Hashtable_alloc&lt;std::allocator&lt;std::__detail::_Hash_node&lt;int, false&gt; &gt; &gt;::_M_deallocate_nodes (6 samples, 0.19%)</title><rect x="44.9" y="421" width="2.3" height="15.0" fill="rgb(223,175,54)" rx="2" ry="2" />
<text  x="47.93" y="431.5" ></text>
</g>
<g >
<title>std::allocator&lt;std::__detail::_Hash_node&lt;int, false&gt; &gt;::allocate (1 samples, 0.03%)</title><rect x="59.4" y="277" width="0.3" height="15.0" fill="rgb(217,61,11)" rx="2" ry="2" />
<text  x="62.36" y="287.5" ></text>
</g>
<g >
<title>std::allocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;int const, std::unordered_set&lt;int, std::hash&lt;int&gt;, std::equal_to&lt;int&gt;, std::allocator&lt;int&gt; &gt; &gt;, false&gt; &gt;::deallocate (16 samples, 0.51%)</title><rect x="414.0" y="373" width="6.0" height="15.0" fill="rgb(220,85,25)" rx="2" ry="2" />
<text  x="416.96" y="383.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;int, int, std::allocator&lt;int&gt;, std::__detail::_Identity, std::equal_to&lt;int&gt;, std::hash&lt;int&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, true, true&gt; &gt;::_M_assign&lt;std::_Hashtable&lt;int, int, std::allocator&lt;int&gt;, std::__detail::_Identity, std::equal_to&lt;int&gt;, std::hash&lt;int&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, true, true&gt; &gt; const&amp;, std::__detail::_AllocNode&lt;std::allocator&lt;std::__detail::_Hash_node&lt;int, false&gt; &gt; &gt; &gt; (38 samples, 1.22%)</title><rect x="268.2" y="453" width="14.4" height="15.0" fill="rgb(228,2,52)" rx="2" ry="2" />
<text  x="271.17" y="463.5" ></text>
</g>
<g >
<title>__usb_hcd_giveback_urb (2 samples, 0.06%)</title><rect x="392.3" y="213" width="0.8" height="15.0" fill="rgb(253,23,16)" rx="2" ry="2" />
<text  x="395.32" y="223.5" ></text>
</g>
<g >
<title>__softirqentry_text_start (1 samples, 0.03%)</title><rect x="956.9" y="405" width="0.4" height="15.0" fill="rgb(224,221,54)" rx="2" ry="2" />
<text  x="959.89" y="415.5" ></text>
</g>
<g >
<title>asm_common_interrupt (1 samples, 0.03%)</title><rect x="1182.0" y="213" width="0.4" height="15.0" fill="rgb(237,132,16)" rx="2" ry="2" />
<text  x="1185.03" y="223.5" ></text>
</g>
<g >
<title>xhci_queue_isoc_tx (1 samples, 0.03%)</title><rect x="799.7" y="213" width="0.4" height="15.0" fill="rgb(222,134,16)" rx="2" ry="2" />
<text  x="802.70" y="223.5" ></text>
</g>
<g >
<title>__common_interrupt (1 samples, 0.03%)</title><rect x="892.7" y="373" width="0.4" height="15.0" fill="rgb(233,194,28)" rx="2" ry="2" />
<text  x="895.72" y="383.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;int, int, std::allocator&lt;int&gt;, std::__detail::_Identity, std::equal_to&lt;int&gt;, std::hash&lt;int&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, true, true&gt; &gt;::_M_allocate_buckets (21 samples, 0.68%)</title><rect x="1077.2" y="405" width="8.0" height="15.0" fill="rgb(219,168,52)" rx="2" ry="2" />
<text  x="1080.24" y="415.5" ></text>
</g>
<g >
<title>std::pair&lt;int const, std::unordered_set&lt;int, std::hash&lt;int&gt;, std::equal_to&lt;int&gt;, std::allocator&lt;int&gt; &gt; &gt;::pair (1 samples, 0.03%)</title><rect x="59.4" y="389" width="0.3" height="15.0" fill="rgb(221,199,7)" rx="2" ry="2" />
<text  x="62.36" y="399.5" ></text>
</g>
<g >
<title>std::unordered_set&lt;int, std::hash&lt;int&gt;, std::equal_to&lt;int&gt;, std::allocator&lt;int&gt; &gt;::unordered_set (1 samples, 0.03%)</title><rect x="59.4" y="373" width="0.3" height="15.0" fill="rgb(224,67,34)" rx="2" ry="2" />
<text  x="62.36" y="383.5" ></text>
</g>
<g >
<title>__gnu_cxx::new_allocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;int const, double&gt;, false&gt; &gt;::allocate (1 samples, 0.03%)</title><rect x="48.0" y="485" width="0.3" height="15.0" fill="rgb(205,174,48)" rx="2" ry="2" />
<text  x="50.97" y="495.5" ></text>
</g>
<g >
<title>entry_SYSCALL_64_after_hwframe (1 samples, 0.03%)</title><rect x="1188.1" y="581" width="0.4" height="15.0" fill="rgb(212,49,5)" rx="2" ry="2" />
<text  x="1191.10" y="591.5" ></text>
</g>
<g >
<title>irq_exit_rcu (1 samples, 0.03%)</title><rect x="526.3" y="373" width="0.4" height="15.0" fill="rgb(251,123,17)" rx="2" ry="2" />
<text  x="529.34" y="383.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;int, std::pair&lt;int const, std::unordered_map&lt;int, double, std::hash&lt;int&gt;, std::equal_to&lt;int&gt;, std::allocator&lt;std::pair&lt;int const, double&gt; &gt; &gt; &gt;, std::allocator&lt;std::pair&lt;int const, std::unordered_map&lt;int, double, std::hash&lt;int&gt;, std::equal_to&lt;int&gt;, std::allocator&lt;std::pair&lt;int const, double&gt; &gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;int&gt;, std::hash&lt;int&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_bucket_index (1 samples, 0.03%)</title><rect x="523.7" y="453" width="0.4" height="15.0" fill="rgb(215,118,37)" rx="2" ry="2" />
<text  x="526.69" y="463.5" ></text>
</g>
<g >
<title>std::allocator_traits&lt;std::allocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;int const, int*&gt;, false&gt; &gt; &gt;::construct&lt;std::pair&lt;int const, int*&gt;, std::pair&lt;int const, int*&gt; const&amp;&gt; (30 samples, 0.97%)</title><rect x="963.3" y="421" width="11.4" height="15.0" fill="rgb(248,32,12)" rx="2" ry="2" />
<text  x="966.34" y="431.5" ></text>
</g>
<g >
<title>std::allocator_traits&lt;std::allocator&lt;std::__detail::_Hash_node&lt;int, false&gt; &gt; &gt;::allocate (2 samples, 0.06%)</title><rect x="1089.8" y="421" width="0.7" height="15.0" fill="rgb(217,203,46)" rx="2" ry="2" />
<text  x="1092.77" y="431.5" ></text>
</g>
<g >
<title>tasklet_hi_action (2 samples, 0.06%)</title><rect x="392.3" y="261" width="0.8" height="15.0" fill="rgb(243,54,14)" rx="2" ry="2" />
<text  x="395.32" y="271.5" ></text>
</g>
<g >
<title>std::__detail::_Mod_range_hashing::operator (10 samples, 0.32%)</title><rect x="1017.3" y="437" width="3.7" height="15.0" fill="rgb(231,34,21)" rx="2" ry="2" />
<text  x="1020.25" y="447.5" ></text>
</g>
<g >
<title>usb_giveback_urb_bh (2 samples, 0.06%)</title><rect x="840.3" y="245" width="0.8" height="15.0" fill="rgb(237,66,6)" rx="2" ry="2" />
<text  x="843.33" y="255.5" ></text>
</g>
<g >
<title>__gnu_cxx::new_allocator&lt;std::__detail::_Hash_node&lt;int, false&gt; &gt;::deallocate (7 samples, 0.23%)</title><rect x="1108.4" y="373" width="2.6" height="15.0" fill="rgb(237,220,48)" rx="2" ry="2" />
<text  x="1111.37" y="383.5" ></text>
</g>
<g >
<title>xhci_queue_isoc_tx_prepare (1 samples, 0.03%)</title><rect x="772.7" y="117" width="0.4" height="15.0" fill="rgb(248,32,19)" rx="2" ry="2" />
<text  x="775.75" y="127.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;int, std::pair&lt;int const, std::unordered_map&lt;int, double, std::hash&lt;int&gt;, std::equal_to&lt;int&gt;, std::allocator&lt;std::pair&lt;int const, double&gt; &gt; &gt; &gt;, std::allocator&lt;std::pair&lt;int const, std::unordered_map&lt;int, double, std::hash&lt;int&gt;, std::equal_to&lt;int&gt;, std::allocator&lt;std::pair&lt;int const, double&gt; &gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;int&gt;, std::hash&lt;int&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_bucket_index (1 samples, 0.03%)</title><rect x="70.0" y="485" width="0.4" height="15.0" fill="rgb(249,84,6)" rx="2" ry="2" />
<text  x="72.99" y="495.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;int, std::pair&lt;int const, double&gt;, std::allocator&lt;std::pair&lt;int const, double&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;int&gt;, std::hash&lt;int&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_deallocate_buckets (9 samples, 0.29%)</title><rect x="1158.1" y="341" width="3.4" height="15.0" fill="rgb(238,60,37)" rx="2" ry="2" />
<text  x="1161.11" y="351.5" ></text>
</g>
<g >
<title>xhci_msi_irq (1 samples, 0.03%)</title><rect x="1182.0" y="101" width="0.4" height="15.0" fill="rgb(247,124,29)" rx="2" ry="2" />
<text  x="1185.03" y="111.5" ></text>
</g>
<g >
<title>com::github::coderodde::directed_graph::DirectedGraphWeightFunction&lt;int, double&gt;::~DirectedGraphWeightFunction (189 samples, 6.08%)</title><rect x="1111.0" y="517" width="71.8" height="15.0" fill="rgb(227,209,40)" rx="2" ry="2" />
<text  x="1114.03" y="527.5" >com::git..</text>
</g>
<g >
<title>std::unordered_map&lt;int, double, std::hash&lt;int&gt;, std::equal_to&lt;int&gt;, std::allocator&lt;std::pair&lt;int const, double&gt; &gt; &gt;::operator[] (156 samples, 5.02%)</title><rect x="773.1" y="501" width="59.3" height="15.0" fill="rgb(208,17,38)" rx="2" ry="2" />
<text  x="776.13" y="511.5" >std::u..</text>
</g>
<g >
<title>hrtimer_interrupt (1 samples, 0.03%)</title><rect x="579.9" y="357" width="0.4" height="15.0" fill="rgb(240,52,54)" rx="2" ry="2" />
<text  x="582.88" y="367.5" ></text>
</g>
<g >
<title>com::github::coderodde::pathfinders::util::HeapNodeComparator&lt;int, double&gt;::operator (1 samples, 0.03%)</title><rect x="753.8" y="405" width="0.3" height="15.0" fill="rgb(225,104,47)" rx="2" ry="2" />
<text  x="756.76" y="415.5" ></text>
</g>
<g >
<title>do_syscall_64 (4 samples, 0.13%)</title><rect x="1188.5" y="565" width="1.5" height="15.0" fill="rgb(222,57,5)" rx="2" ry="2" />
<text  x="1191.48" y="575.5" ></text>
</g>
<g >
<title>std::__detail::_Hashtable_alloc&lt;std::allocator&lt;std::__detail::_Hash_node&lt;int, false&gt; &gt; &gt;::_M_deallocate_node (72 samples, 2.32%)</title><rect x="478.5" y="293" width="27.3" height="15.0" fill="rgb(243,213,32)" rx="2" ry="2" />
<text  x="481.51" y="303.5" >s..</text>
</g>
<g >
<title>std::__detail::_Hashtable_alloc&lt;std::allocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;int const, std::unordered_set&lt;int, std::hash&lt;int&gt;, std::equal_to&lt;int&gt;, std::allocator&lt;int&gt; &gt; &gt;, false&gt; &gt; &gt;::_M_deallocate_nodes (244 samples, 7.85%)</title><rect x="413.2" y="437" width="92.6" height="15.0" fill="rgb(246,115,10)" rx="2" ry="2" />
<text  x="416.20" y="447.5" >std::__deta..</text>
</g>
<g >
<title>[unknown] (85 samples, 2.73%)</title><rect x="49.5" y="581" width="32.3" height="15.0" fill="rgb(254,208,4)" rx="2" ry="2" />
<text  x="52.49" y="591.5" >[u..</text>
</g>
<g >
<title>__softirqentry_text_start (1 samples, 0.03%)</title><rect x="134.2" y="261" width="0.3" height="15.0" fill="rgb(232,89,34)" rx="2" ry="2" />
<text  x="137.15" y="271.5" ></text>
</g>
<g >
<title>std::unordered_map&lt;int, int*, std::hash&lt;int&gt;, std::equal_to&lt;int&gt;, std::allocator&lt;std::pair&lt;int const, int*&gt; &gt; &gt;::clear (7 samples, 0.23%)</title><rect x="544.6" y="485" width="2.6" height="15.0" fill="rgb(235,32,18)" rx="2" ry="2" />
<text  x="547.57" y="495.5" ></text>
</g>
<g >
<title>__handle_irq_event_percpu (1 samples, 0.03%)</title><rect x="858.2" y="325" width="0.4" height="15.0" fill="rgb(207,13,31)" rx="2" ry="2" />
<text  x="861.17" y="335.5" ></text>
</g>
<g >
<title>do_syscall_64 (1 samples, 0.03%)</title><rect x="1187.7" y="549" width="0.4" height="15.0" fill="rgb(250,129,20)" rx="2" ry="2" />
<text  x="1190.72" y="559.5" ></text>
</g>
<g >
<title>std::allocator&lt;std::chrono::duration&lt;long, std::ratio&lt;1l, 1000000000l&gt; &gt; &gt;::allocate (13 samples, 0.42%)</title><rect x="1182.8" y="469" width="4.9" height="15.0" fill="rgb(236,100,51)" rx="2" ry="2" />
<text  x="1185.79" y="479.5" ></text>
</g>
<g >
<title>lru_cache_add (1 samples, 0.03%)</title><rect x="67.7" y="229" width="0.4" height="15.0" fill="rgb(239,78,26)" rx="2" ry="2" />
<text  x="70.71" y="239.5" ></text>
</g>
<g >
<title>xhci_urb_enqueue (1 samples, 0.03%)</title><rect x="1046.5" y="245" width="0.4" height="15.0" fill="rgb(236,181,19)" rx="2" ry="2" />
<text  x="1049.49" y="255.5" ></text>
</g>
<g >
<title>_int_malloc (101 samples, 3.25%)</title><rect x="629.6" y="469" width="38.4" height="15.0" fill="rgb(246,16,3)" rx="2" ry="2" />
<text  x="632.61" y="479.5" >_in..</text>
</g>
<g >
<title>__libc_start_main (2,913 samples, 93.73%)</title><rect x="81.8" y="565" width="1105.9" height="15.0" fill="rgb(244,102,50)" rx="2" ry="2" />
<text  x="84.76" y="575.5" >__libc_start_main</text>
</g>
<g >
<title>tasklet_action_common.isra.0 (2 samples, 0.06%)</title><rect x="260.2" y="101" width="0.8" height="15.0" fill="rgb(238,139,9)" rx="2" ry="2" />
<text  x="263.20" y="111.5" ></text>
</g>
<g >
<title>tasklet_action_common.isra.0 (2 samples, 0.06%)</title><rect x="392.3" y="245" width="0.8" height="15.0" fill="rgb(254,131,40)" rx="2" ry="2" />
<text  x="395.32" y="255.5" ></text>
</g>
<g >
<title>usb_giveback_urb_bh (1 samples, 0.03%)</title><rect x="1187.3" y="261" width="0.4" height="15.0" fill="rgb(211,178,24)" rx="2" ry="2" />
<text  x="1190.34" y="271.5" ></text>
</g>
<g >
<title>_int_free (2 samples, 0.06%)</title><rect x="548.0" y="485" width="0.7" height="15.0" fill="rgb(252,229,46)" rx="2" ry="2" />
<text  x="550.99" y="495.5" ></text>
</g>
<g >
<title>__GI___libc_free (6 samples, 0.19%)</title><rect x="1171.4" y="229" width="2.3" height="15.0" fill="rgb(239,121,50)" rx="2" ry="2" />
<text  x="1174.40" y="239.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;int, int, std::allocator&lt;int&gt;, std::__detail::_Identity, std::equal_to&lt;int&gt;, std::hash&lt;int&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, true, true&gt; &gt;::_M_update_bbegin (1 samples, 0.03%)</title><rect x="184.3" y="309" width="0.3" height="15.0" fill="rgb(241,11,39)" rx="2" ry="2" />
<text  x="187.27" y="319.5" ></text>
</g>
<g >
<title>__gnu_cxx::new_allocator&lt;std::__detail::_Hash_node&lt;int, false&gt; &gt;::allocate (2 samples, 0.06%)</title><rect x="1089.8" y="389" width="0.7" height="15.0" fill="rgb(251,4,52)" rx="2" ry="2" />
<text  x="1092.77" y="399.5" ></text>
</g>
<g >
<title>com::github::coderodde::pathfinders::api::Algorithm_1_Selector&lt;int, double&gt;::usingDijkstra (2,707 samples, 87.10%)</title><rect x="83.3" y="533" width="1027.7" height="15.0" fill="rgb(228,126,11)" rx="2" ry="2" />
<text  x="86.28" y="543.5" >com::github::coderodde::pathfinders::api::Algorithm_1_Selector&lt;int, double&gt;::usingDijkstra</text>
</g>
<g >
<title>std::__detail::_Hash_node&lt;int, false&gt;::_M_next (10 samples, 0.32%)</title><rect x="1086.0" y="405" width="3.8" height="15.0" fill="rgb(234,174,44)" rx="2" ry="2" />
<text  x="1088.97" y="415.5" ></text>
</g>
<g >
<title>xhci_get_frame (1 samples, 0.03%)</title><rect x="829.7" y="149" width="0.4" height="15.0" fill="rgb(212,175,27)" rx="2" ry="2" />
<text  x="832.70" y="159.5" ></text>
</g>
<g >
<title>_raw_spin_lock (1 samples, 0.03%)</title><rect x="892.7" y="341" width="0.4" height="15.0" fill="rgb(238,105,54)" rx="2" ry="2" />
<text  x="895.72" y="351.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;int, std::pair&lt;int const, std::unordered_set&lt;int, std::hash&lt;int&gt;, std::equal_to&lt;int&gt;, std::allocator&lt;int&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;int const, std::unordered_set&lt;int, std::hash&lt;int&gt;, std::equal_to&lt;int&gt;, std::allocator&lt;int&gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;int&gt;, std::hash&lt;int&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::~_Hashtable (502 samples, 16.15%)</title><rect x="315.3" y="469" width="190.5" height="15.0" fill="rgb(241,31,11)" rx="2" ry="2" />
<text  x="318.25" y="479.5" >std::_Hashtable&lt;int, std..</text>
</g>
<g >
<title>__common_interrupt (1 samples, 0.03%)</title><rect x="1046.1" y="357" width="0.4" height="15.0" fill="rgb(216,188,26)" rx="2" ry="2" />
<text  x="1049.11" y="367.5" ></text>
</g>
<g >
<title>std::__detail::_Hashtable_alloc&lt;std::allocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;int const, int*&gt;, false&gt; &gt; &gt;::_M_deallocate_node_ptr (7 samples, 0.23%)</title><rect x="544.6" y="421" width="2.6" height="15.0" fill="rgb(238,217,3)" rx="2" ry="2" />
<text  x="547.57" y="431.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_code_base&lt;int, std::pair&lt;int const, std::unordered_set&lt;int, std::hash&lt;int&gt;, std::equal_to&lt;int&gt;, std::allocator&lt;int&gt; &gt; &gt;, std::__detail::_Select1st, std::hash&lt;int&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, false&gt;::_M_bucket_index (3 samples, 0.10%)</title><rect x="94.3" y="421" width="1.1" height="15.0" fill="rgb(222,150,9)" rx="2" ry="2" />
<text  x="97.29" y="431.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;int, std::pair&lt;int const, std::unordered_map&lt;int, double, std::hash&lt;int&gt;, std::equal_to&lt;int&gt;, std::allocator&lt;std::pair&lt;int const, double&gt; &gt; &gt; &gt;, std::allocator&lt;std::pair&lt;int const, std::unordered_map&lt;int, double, std::hash&lt;int&gt;, std::equal_to&lt;int&gt;, std::allocator&lt;std::pair&lt;int const, double&gt; &gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;int&gt;, std::hash&lt;int&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_assign&lt;std::_Hashtable&lt;int, std::pair&lt;int const, std::unordered_map&lt;int, double, std::hash&lt;int&gt;, std::equal_to&lt;int&gt;, std::allocator&lt;std::pair&lt;int const, double&gt; &gt; &gt; &gt;, std::allocator&lt;std::pair&lt;int const, std::unordered_map&lt;int, double, std::hash&lt;int&gt;, std::equal_to&lt;int&gt;, std::allocator&lt;std::pair&lt;int const, double&gt; &gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;int&gt;, std::hash&lt;int&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt; const&amp;, std::__detail::_AllocNode&lt;std::allocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;int const, std::unordered_map&lt;int, double, std::hash&lt;int&gt;, std::equal_to&lt;int&gt;, std::allocator&lt;std::pair&lt;int const, double&gt; &gt; &gt; &gt;, false&gt; &gt; &gt; &gt; (1 samples, 0.03%)</title><rect x="42.7" y="549" width="0.3" height="15.0" fill="rgb(252,25,43)" rx="2" ry="2" />
<text  x="45.65" y="559.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;int, std::pair&lt;int const, std::unordered_set&lt;int, std::hash&lt;int&gt;, std::equal_to&lt;int&gt;, std::allocator&lt;int&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;int const, std::unordered_set&lt;int, std::hash&lt;int&gt;, std::equal_to&lt;int&gt;, std::allocator&lt;int&gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;int&gt;, std::hash&lt;int&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_find_node (86 samples, 2.77%)</title><rect x="282.6" y="453" width="32.7" height="15.0" fill="rgb(221,174,30)" rx="2" ry="2" />
<text  x="285.60" y="463.5" >st..</text>
</g>
<g >
<title>std::__push_heap&lt;__gnu_cxx::__normal_iterator&lt;com::github::coderodde::pathfinders::util::HeapNode&lt;int, double&gt;**, std::vector&lt;com::github::coderodde::pathfinders::util::HeapNode&lt;int, double&gt;*, std::allocator&lt;com::github::coderodde::pathfinders::util::HeapNode&lt;int, double&gt;*&gt; &gt; &gt;, long, com::github::coderodde::pathfinders::util::HeapNode&lt;int, double&gt;*, __gnu_cxx::__ops::_Iter_comp_val&lt;com::github::coderodde::pathfinders::util::HeapNodeComparator&lt;int, double&gt; &gt; &gt; (12 samples, 0.39%)</title><rect x="754.1" y="469" width="4.6" height="15.0" fill="rgb(206,214,5)" rx="2" ry="2" />
<text  x="757.14" y="479.5" ></text>
</g>
<g >
<title>std::construct_at&lt;std::pair&lt;int const, std::unordered_set&lt;int, std::hash&lt;int&gt;, std::equal_to&lt;int&gt;, std::allocator&lt;int&gt; &gt; &gt;, std::pair&lt;int const, std::unordered_set&lt;int, std::hash&lt;int&gt;, std::equal_to&lt;int&gt;, std::allocator&lt;int&gt; &gt; &gt; const&amp;&gt; (9 samples, 0.29%)</title><rect x="59.7" y="421" width="3.5" height="15.0" fill="rgb(216,191,0)" rx="2" ry="2" />
<text  x="62.74" y="431.5" ></text>
</g>
<g >
<title>[libstdc++.so.6.0.29] (1 samples, 0.03%)</title><rect x="185.4" y="213" width="0.4" height="15.0" fill="rgb(217,56,33)" rx="2" ry="2" />
<text  x="188.41" y="223.5" ></text>
</g>
<g >
<title>__GI___libc_malloc (6 samples, 0.19%)</title><rect x="49.5" y="565" width="2.3" height="15.0" fill="rgb(234,86,10)" rx="2" ry="2" />
<text  x="52.49" y="575.5" ></text>
</g>
<g >
<title>std::pair&lt;int const, std::unordered_map&lt;int, double, std::hash&lt;int&gt;, std::equal_to&lt;int&gt;, std::allocator&lt;std::pair&lt;int const, double&gt; &gt; &gt; &gt;::~pair (1 samples, 0.03%)</title><rect x="82.5" y="389" width="0.4" height="15.0" fill="rgb(241,173,17)" rx="2" ry="2" />
<text  x="85.52" y="399.5" ></text>
</g>
<g >
<title>x86_pmu_enable (1 samples, 0.03%)</title><rect x="579.9" y="229" width="0.4" height="15.0" fill="rgb(243,41,27)" rx="2" ry="2" />
<text  x="582.88" y="239.5" ></text>
</g>
<g >
<title>std::allocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;int const, std::unordered_map&lt;int, double, std::hash&lt;int&gt;, std::equal_to&lt;int&gt;, std::allocator&lt;std::pair&lt;int const, double&gt; &gt; &gt; &gt;, false&gt; &gt;::allocate (1 samples, 0.03%)</title><rect x="68.1" y="421" width="0.4" height="15.0" fill="rgb(219,6,28)" rx="2" ry="2" />
<text  x="71.09" y="431.5" ></text>
</g>
<g >
<title>std::allocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;int const, std::unordered_set&lt;int, std::hash&lt;int&gt;, std::equal_to&lt;int&gt;, std::allocator&lt;int&gt; &gt; &gt;, false&gt; &gt;::allocate (109 samples, 3.51%)</title><rect x="95.4" y="389" width="41.4" height="15.0" fill="rgb(206,153,16)" rx="2" ry="2" />
<text  x="98.42" y="399.5" >std..</text>
</g>
<g >
<title>handle_edge_irq (1 samples, 0.03%)</title><rect x="892.7" y="357" width="0.4" height="15.0" fill="rgb(212,208,31)" rx="2" ry="2" />
<text  x="895.72" y="367.5" ></text>
</g>
<g >
<title>_int_free (3 samples, 0.10%)</title><rect x="1157.0" y="357" width="1.1" height="15.0" fill="rgb(236,180,11)" rx="2" ry="2" />
<text  x="1159.97" y="367.5" ></text>
</g>
<g >
<title>std::allocator_traits&lt;std::allocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;int const, int*&gt;, false&gt; &gt; &gt;::allocate (47 samples, 1.51%)</title><rect x="936.0" y="437" width="17.8" height="15.0" fill="rgb(241,220,37)" rx="2" ry="2" />
<text  x="939.00" y="447.5" ></text>
</g>
<g >
<title>std::__detail::_Hashtable_alloc&lt;std::allocator&lt;std::__detail::_Hash_node&lt;int, false&gt; &gt; &gt;::_M_allocate_buckets (21 samples, 0.68%)</title><rect x="1077.2" y="389" width="8.0" height="15.0" fill="rgb(209,176,23)" rx="2" ry="2" />
<text  x="1080.24" y="399.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_node&lt;int, false&gt;::_M_next (120 samples, 3.86%)</title><rect x="432.9" y="293" width="45.6" height="15.0" fill="rgb(225,16,12)" rx="2" ry="2" />
<text  x="435.95" y="303.5" >std:..</text>
</g>
<g >
<title>std::allocator_traits&lt;std::allocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;int const, std::unordered_set&lt;int, std::hash&lt;int&gt;, std::equal_to&lt;int&gt;, std::allocator&lt;int&gt; &gt; &gt;, false&gt; &gt; &gt;::destroy&lt;std::pair&lt;int const, std::unordered_set&lt;int, std::hash&lt;int&gt;, std::equal_to&lt;int&gt;, std::allocator&lt;int&gt; &gt; &gt; &gt; (226 samples, 7.27%)</title><rect x="420.0" y="405" width="85.8" height="15.0" fill="rgb(240,128,36)" rx="2" ry="2" />
<text  x="423.04" y="415.5" >std::alloc..</text>
</g>
<g >
<title>usb_submit_urb (2 samples, 0.06%)</title><rect x="840.3" y="197" width="0.8" height="15.0" fill="rgb(242,70,20)" rx="2" ry="2" />
<text  x="843.33" y="207.5" ></text>
</g>
<g >
<title>xhci_queue_isoc_tx_prepare (1 samples, 0.03%)</title><rect x="412.8" y="117" width="0.4" height="15.0" fill="rgb(252,205,32)" rx="2" ry="2" />
<text  x="415.82" y="127.5" ></text>
</g>
<g >
<title>free_perturb (2 samples, 0.06%)</title><rect x="1160.8" y="229" width="0.7" height="15.0" fill="rgb(236,35,49)" rx="2" ry="2" />
<text  x="1163.77" y="239.5" ></text>
</g>
<g >
<title>page_remove_rmap (1 samples, 0.03%)</title><rect x="1188.1" y="405" width="0.4" height="15.0" fill="rgb(239,224,25)" rx="2" ry="2" />
<text  x="1191.10" y="415.5" ></text>
</g>
<g >
<title>_int_free (9 samples, 0.29%)</title><rect x="505.8" y="357" width="3.5" height="15.0" fill="rgb(253,158,37)" rx="2" ry="2" />
<text  x="508.84" y="367.5" ></text>
</g>
<g >
<title>__GI___libc_malloc (12 samples, 0.39%)</title><rect x="958.8" y="357" width="4.5" height="15.0" fill="rgb(233,217,15)" rx="2" ry="2" />
<text  x="961.78" y="367.5" ></text>
</g>
<g >
<title>malloc_consolidate (71 samples, 2.28%)</title><rect x="975.5" y="357" width="26.9" height="15.0" fill="rgb(207,59,42)" rx="2" ry="2" />
<text  x="978.49" y="367.5" >m..</text>
</g>
<g >
<title>ctx_resched (4 samples, 0.13%)</title><rect x="1188.5" y="437" width="1.5" height="15.0" fill="rgb(229,179,19)" rx="2" ry="2" />
<text  x="1191.48" y="447.5" ></text>
</g>
<g >
<title>tasklet_action_common.isra.0 (1 samples, 0.03%)</title><rect x="1187.3" y="277" width="0.4" height="15.0" fill="rgb(207,68,28)" rx="2" ry="2" />
<text  x="1190.34" y="287.5" ></text>
</g>
<g >
<title>std::allocator&lt;std::__detail::_Hash_node&lt;int, false&gt; &gt;::allocate (37 samples, 1.19%)</title><rect x="268.6" y="389" width="14.0" height="15.0" fill="rgb(207,127,32)" rx="2" ry="2" />
<text  x="271.55" y="399.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;int, std::pair&lt;int const, int*&gt;, std::allocator&lt;std::pair&lt;int const, int*&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;int&gt;, std::hash&lt;int&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_find_node (91 samples, 2.93%)</title><rect x="858.6" y="469" width="34.5" height="15.0" fill="rgb(251,76,21)" rx="2" ry="2" />
<text  x="861.55" y="479.5" >st..</text>
</g>
<g >
<title>asm_common_interrupt (1 samples, 0.03%)</title><rect x="956.9" y="453" width="0.4" height="15.0" fill="rgb(205,143,53)" rx="2" ry="2" />
<text  x="959.89" y="463.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_code_base&lt;int, int, std::__detail::_Identity, std::hash&lt;int&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, false&gt;::_M_bucket_index (1 samples, 0.03%)</title><rect x="184.3" y="261" width="0.3" height="15.0" fill="rgb(247,25,16)" rx="2" ry="2" />
<text  x="187.27" y="271.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_code_base&lt;int, int, std::__detail::_Identity, std::hash&lt;int&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, false&gt;::_M_bucket_index (27 samples, 0.87%)</title><rect x="1036.2" y="421" width="10.3" height="15.0" fill="rgb(224,93,30)" rx="2" ry="2" />
<text  x="1039.24" y="431.5" ></text>
</g>
<g >
<title>std::unordered_set&lt;int, std::hash&lt;int&gt;, std::equal_to&lt;int&gt;, std::allocator&lt;int&gt; &gt;::~unordered_set (22 samples, 0.71%)</title><rect x="505.8" y="485" width="8.4" height="15.0" fill="rgb(240,198,18)" rx="2" ry="2" />
<text  x="508.84" y="495.5" ></text>
</g>
<g >
<title>asm_sysvec_reschedule_ipi (4 samples, 0.13%)</title><rect x="59.7" y="293" width="1.6" height="15.0" fill="rgb(241,54,51)" rx="2" ry="2" />
<text  x="62.74" y="303.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;int, std::pair&lt;int const, std::unordered_set&lt;int, std::hash&lt;int&gt;, std::equal_to&lt;int&gt;, std::allocator&lt;int&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;int const, std::unordered_set&lt;int, std::hash&lt;int&gt;, std::equal_to&lt;int&gt;, std::allocator&lt;int&gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;int&gt;, std::hash&lt;int&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_Hashtable (9 samples, 0.29%)</title><rect x="59.7" y="501" width="3.5" height="15.0" fill="rgb(221,59,23)" rx="2" ry="2" />
<text  x="62.74" y="511.5" ></text>
</g>
<g >
<title>finish_task_switch (4 samples, 0.13%)</title><rect x="59.7" y="181" width="1.6" height="15.0" fill="rgb(239,213,49)" rx="2" ry="2" />
<text  x="62.74" y="191.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_node&lt;int, false&gt;::_M_next (1 samples, 0.03%)</title><rect x="67.3" y="421" width="0.4" height="15.0" fill="rgb(216,22,36)" rx="2" ry="2" />
<text  x="70.33" y="431.5" ></text>
</g>
<g >
<title>asm_common_interrupt (1 samples, 0.03%)</title><rect x="526.3" y="405" width="0.4" height="15.0" fill="rgb(254,204,41)" rx="2" ry="2" />
<text  x="529.34" y="415.5" ></text>
</g>
<g >
<title>__gnu_cxx::new_allocator&lt;std::__detail::_Hash_node_base*&gt;::allocate (13 samples, 0.42%)</title><rect x="89.4" y="373" width="4.9" height="15.0" fill="rgb(235,4,50)" rx="2" ry="2" />
<text  x="92.35" y="383.5" ></text>
</g>
<g >
<title>operator new (1 samples, 0.03%)</title><rect x="67.7" y="389" width="0.4" height="15.0" fill="rgb(206,165,45)" rx="2" ry="2" />
<text  x="70.71" y="399.5" ></text>
</g>
<g >
<title>__GI___libc_malloc (21 samples, 0.68%)</title><rect x="1077.2" y="309" width="8.0" height="15.0" fill="rgb(237,213,29)" rx="2" ry="2" />
<text  x="1080.24" y="319.5" ></text>
</g>
<g >
<title>std::__detail::_Hashtable_alloc&lt;std::allocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;int const, double&gt;, false&gt; &gt; &gt;::_M_allocate_node&lt;std::pair&lt;int const, double&gt; const&amp;&gt; (62 samples, 1.99%)</title><rect x="604.6" y="261" width="23.5" height="15.0" fill="rgb(231,156,25)" rx="2" ry="2" />
<text  x="607.56" y="271.5" >s..</text>
</g>
<g >
<title>std::__detail::_Hashtable_alloc&lt;std::allocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;int const, double&gt;, false&gt; &gt; &gt;::_M_deallocate_nodes (39 samples, 1.25%)</title><rect x="843.4" y="453" width="14.8" height="15.0" fill="rgb(229,176,48)" rx="2" ry="2" />
<text  x="846.37" y="463.5" ></text>
</g>
<g >
<title>std::allocator_traits&lt;std::allocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;int const, std::unordered_map&lt;int, double, std::hash&lt;int&gt;, std::equal_to&lt;int&gt;, std::allocator&lt;std::pair&lt;int const, double&gt; &gt; &gt; &gt;, false&gt; &gt; &gt;::deallocate (5 samples, 0.16%)</title><rect x="1156.2" y="405" width="1.9" height="15.0" fill="rgb(219,23,5)" rx="2" ry="2" />
<text  x="1159.21" y="415.5" ></text>
</g>
<g >
<title>std::allocator&lt;std::__detail::_Hash_node_base*&gt;::allocate (111 samples, 3.57%)</title><rect x="140.6" y="261" width="42.1" height="15.0" fill="rgb(229,36,8)" rx="2" ry="2" />
<text  x="143.60" y="271.5" >std..</text>
</g>
<g >
<title>operator new (59 samples, 1.90%)</title><rect x="604.9" y="197" width="22.4" height="15.0" fill="rgb(242,178,2)" rx="2" ry="2" />
<text  x="607.94" y="207.5" >o..</text>
</g>
<g >
<title>common_interrupt (1 samples, 0.03%)</title><rect x="892.7" y="389" width="0.4" height="15.0" fill="rgb(225,147,51)" rx="2" ry="2" />
<text  x="895.72" y="399.5" ></text>
</g>
<g >
<title>std::__detail::_Hashtable_alloc&lt;std::allocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;int const, std::unordered_set&lt;int, std::hash&lt;int&gt;, std::equal_to&lt;int&gt;, std::allocator&lt;int&gt; &gt; &gt;, false&gt; &gt; &gt;::_M_deallocate_node (242 samples, 7.79%)</title><rect x="414.0" y="421" width="91.8" height="15.0" fill="rgb(242,222,8)" rx="2" ry="2" />
<text  x="416.96" y="431.5" >std::__det..</text>
</g>
<g >
<title>exc_page_fault (1 samples, 0.03%)</title><rect x="68.1" y="325" width="0.4" height="15.0" fill="rgb(207,210,12)" rx="2" ry="2" />
<text  x="71.09" y="335.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;int, std::pair&lt;int const, std::unordered_set&lt;int, std::hash&lt;int&gt;, std::equal_to&lt;int&gt;, std::allocator&lt;int&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;int const, std::unordered_set&lt;int, std::hash&lt;int&gt;, std::equal_to&lt;int&gt;, std::allocator&lt;int&gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;int&gt;, std::hash&lt;int&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::clear (244 samples, 7.85%)</title><rect x="413.2" y="453" width="92.6" height="15.0" fill="rgb(241,21,36)" rx="2" ry="2" />
<text  x="416.20" y="463.5" >std::_Hasht..</text>
</g>
<g >
<title>mmput (1 samples, 0.03%)</title><rect x="1188.1" y="501" width="0.4" height="15.0" fill="rgb(225,134,31)" rx="2" ry="2" />
<text  x="1191.10" y="511.5" ></text>
</g>
<g >
<title>handle_irq_event_percpu (1 samples, 0.03%)</title><rect x="1046.1" y="309" width="0.4" height="15.0" fill="rgb(227,69,13)" rx="2" ry="2" />
<text  x="1049.11" y="319.5" ></text>
</g>
<g >
<title>std::equal_to&lt;int&gt;::operator (1 samples, 0.03%)</title><rect x="534.3" y="405" width="0.4" height="15.0" fill="rgb(235,86,34)" rx="2" ry="2" />
<text  x="537.32" y="415.5" ></text>
</g>
<g >
<title>std::allocator_traits&lt;std::allocator&lt;std::__detail::_Hash_node&lt;int, false&gt; &gt; &gt;::allocate (213 samples, 6.85%)</title><rect x="184.6" y="277" width="80.9" height="15.0" fill="rgb(211,76,21)" rx="2" ry="2" />
<text  x="187.65" y="287.5" >std::allo..</text>
</g>
<g >
<title>__gnu_cxx::new_allocator&lt;std::__detail::_Hash_node&lt;int, false&gt; &gt;::allocate (1 samples, 0.03%)</title><rect x="67.7" y="405" width="0.4" height="15.0" fill="rgb(209,117,21)" rx="2" ry="2" />
<text  x="70.71" y="415.5" ></text>
</g>
<g >
<title>std::allocator_traits&lt;std::allocator&lt;std::__detail::_Hash_node&lt;int, false&gt; &gt; &gt;::allocate (37 samples, 1.19%)</title><rect x="268.6" y="405" width="14.0" height="15.0" fill="rgb(231,170,14)" rx="2" ry="2" />
<text  x="271.55" y="415.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;int, int, std::allocator&lt;int&gt;, std::__detail::_Identity, std::equal_to&lt;int&gt;, std::hash&lt;int&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, true, true&gt; &gt;::_M_insert&lt;int const&amp;, std::__detail::_AllocNode&lt;std::allocator&lt;std::__detail::_Hash_node&lt;int, false&gt; &gt; &gt; &gt; (47 samples, 1.51%)</title><rect x="1072.7" y="469" width="17.8" height="15.0" fill="rgb(229,225,29)" rx="2" ry="2" />
<text  x="1075.68" y="479.5" ></text>
</g>
<g >
<title>__usb_hcd_giveback_urb (1 samples, 0.03%)</title><rect x="956.9" y="341" width="0.4" height="15.0" fill="rgb(254,228,6)" rx="2" ry="2" />
<text  x="959.89" y="351.5" ></text>
</g>
<g >
<title>sync_regs (1 samples, 0.03%)</title><rect x="513.8" y="325" width="0.4" height="15.0" fill="rgb(208,47,50)" rx="2" ry="2" />
<text  x="516.82" y="335.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;int, std::pair&lt;int const, double&gt;, std::allocator&lt;std::pair&lt;int const, double&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;int&gt;, std::hash&lt;int&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_assign&lt;std::_Hashtable&lt;int, std::pair&lt;int const, double&gt;, std::allocator&lt;std::pair&lt;int const, double&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;int&gt;, std::hash&lt;int&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt; const&amp;, std::__detail::_AllocNode&lt;std::allocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;int const, double&gt;, false&gt; &gt; &gt; &gt; (1 samples, 0.03%)</title><rect x="47.6" y="469" width="0.4" height="15.0" fill="rgb(209,6,36)" rx="2" ry="2" />
<text  x="50.59" y="479.5" ></text>
</g>
<g >
<title>std::__detail::_Map_base&lt;int, std::pair&lt;int const, double&gt;, std::allocator&lt;std::pair&lt;int const, double&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;int&gt;, std::hash&lt;int&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt;, true&gt;::operator[] (4 samples, 0.13%)</title><rect x="79.1" y="565" width="1.5" height="15.0" fill="rgb(212,44,36)" rx="2" ry="2" />
<text  x="82.10" y="575.5" ></text>
</g>
<g >
<title>xhci_queue_isoc_tx (1 samples, 0.03%)</title><rect x="958.4" y="181" width="0.4" height="15.0" fill="rgb(242,0,16)" rx="2" ry="2" />
<text  x="961.40" y="191.5" ></text>
</g>
<g >
<title>std::unordered_map&lt;int, double, std::hash&lt;int&gt;, std::equal_to&lt;int&gt;, std::allocator&lt;std::pair&lt;int const, double&gt; &gt; &gt;::~unordered_map (68 samples, 2.19%)</title><rect x="832.4" y="501" width="25.8" height="15.0" fill="rgb(230,92,36)" rx="2" ry="2" />
<text  x="835.36" y="511.5" >s..</text>
</g>
<g >
<title>xhci_get_frame (1 samples, 0.03%)</title><rect x="134.2" y="117" width="0.3" height="15.0" fill="rgb(248,57,24)" rx="2" ry="2" />
<text  x="137.15" y="127.5" ></text>
</g>
<g >
<title>std::allocator_traits&lt;std::allocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;int const, int*&gt;, false&gt; &gt; &gt;::deallocate (7 samples, 0.23%)</title><rect x="544.6" y="405" width="2.6" height="15.0" fill="rgb(215,164,4)" rx="2" ry="2" />
<text  x="547.57" y="415.5" ></text>
</g>
<g >
<title>[libstdc++.so.6.0.29] (1 samples, 0.03%)</title><rect x="511.5" y="341" width="0.4" height="15.0" fill="rgb(205,202,46)" rx="2" ry="2" />
<text  x="514.54" y="351.5" ></text>
</g>
<g >
<title>xhci_queue_isoc_tx (1 samples, 0.03%)</title><rect x="526.3" y="197" width="0.4" height="15.0" fill="rgb(219,121,40)" rx="2" ry="2" />
<text  x="529.34" y="207.5" ></text>
</g>
<g >
<title>_int_free (3 samples, 0.10%)</title><rect x="52.5" y="565" width="1.2" height="15.0" fill="rgb(233,37,50)" rx="2" ry="2" />
<text  x="55.52" y="575.5" ></text>
</g>
<g >
<title>handle_edge_irq (1 samples, 0.03%)</title><rect x="139.8" y="261" width="0.4" height="15.0" fill="rgb(237,226,1)" rx="2" ry="2" />
<text  x="142.85" y="271.5" ></text>
</g>
<g >
<title>__softirqentry_text_start (1 samples, 0.03%)</title><rect x="1187.3" y="309" width="0.4" height="15.0" fill="rgb(241,34,22)" rx="2" ry="2" />
<text  x="1190.34" y="319.5" ></text>
</g>
<g >
<title>std::unordered_map&lt;int, std::unordered_set&lt;int, std::hash&lt;int&gt;, std::equal_to&lt;int&gt;, std::allocator&lt;int&gt; &gt;, std::hash&lt;int&gt;, std::equal_to&lt;int&gt;, std::allocator&lt;std::pair&lt;int const, std::unordered_set&lt;int, std::hash&lt;int&gt;, std::equal_to&lt;int&gt;, std::allocator&lt;int&gt; &gt; &gt; &gt; &gt;::unordered_map (474 samples, 15.25%)</title><rect x="88.2" y="485" width="180.0" height="15.0" fill="rgb(211,213,8)" rx="2" ry="2" />
<text  x="91.21" y="495.5" >std::unordered_map&lt;int,..</text>
</g>
<g >
<title>std::_Hashtable&lt;int, int, std::allocator&lt;int&gt;, std::__detail::_Identity, std::equal_to&lt;int&gt;, std::hash&lt;int&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, true, true&gt; &gt;::_M_insert_bucket_begin (1 samples, 0.03%)</title><rect x="1073.4" y="437" width="0.4" height="15.0" fill="rgb(241,229,13)" rx="2" ry="2" />
<text  x="1076.44" y="447.5" ></text>
</g>
<g >
<title>snd_complete_urb (1 samples, 0.03%)</title><rect x="956.9" y="325" width="0.4" height="15.0" fill="rgb(225,187,21)" rx="2" ry="2" />
<text  x="959.89" y="335.5" ></text>
</g>
<g >
<title>operator new (111 samples, 3.57%)</title><rect x="140.6" y="229" width="42.1" height="15.0" fill="rgb(205,210,9)" rx="2" ry="2" />
<text  x="143.60" y="239.5" >ope..</text>
</g>
<g >
<title>__common_interrupt (1 samples, 0.03%)</title><rect x="139.8" y="277" width="0.4" height="15.0" fill="rgb(250,125,1)" rx="2" ry="2" />
<text  x="142.85" y="287.5" ></text>
</g>
<g >
<title>std::__detail::_Hashtable_alloc&lt;std::allocator&lt;std::__detail::_Hash_node&lt;int, false&gt; &gt; &gt;::_M_deallocate_nodes (195 samples, 6.27%)</title><rect x="431.8" y="309" width="74.0" height="15.0" fill="rgb(244,124,49)" rx="2" ry="2" />
<text  x="434.81" y="319.5" >std::__d..</text>
</g>
<g >
<title>__gnu_cxx::new_allocator&lt;std::__detail::_Hash_node&lt;int, false&gt; &gt;::deallocate (6 samples, 0.19%)</title><rect x="44.9" y="341" width="2.3" height="15.0" fill="rgb(228,204,51)" rx="2" ry="2" />
<text  x="47.93" y="351.5" ></text>
</g>
<g >
<title>__gnu_cxx::__normal_iterator&lt;com::github::coderodde::pathfinders::util::HeapNode&lt;int, double&gt;**, std::vector&lt;com::github::coderodde::pathfinders::util::HeapNode&lt;int, double&gt;*, std::allocator&lt;com::github::coderodde::pathfinders::util::HeapNode&lt;int, double&gt;*&gt; &gt; &gt;::operator+ (2 samples, 0.06%)</title><rect x="568.1" y="421" width="0.8" height="15.0" fill="rgb(207,208,14)" rx="2" ry="2" />
<text  x="571.11" y="431.5" ></text>
</g>
<g >
<title>get_max_fast (1 samples, 0.03%)</title><rect x="180.8" y="181" width="0.4" height="15.0" fill="rgb(228,172,5)" rx="2" ry="2" />
<text  x="183.85" y="191.5" ></text>
</g>
<g >
<title>_int_free (28 samples, 0.90%)</title><rect x="832.7" y="373" width="10.7" height="15.0" fill="rgb(244,15,24)" rx="2" ry="2" />
<text  x="835.73" y="383.5" ></text>
</g>
<g >
<title>[libstdc++.so.6.0.29] (5 samples, 0.16%)</title><rect x="478.9" y="213" width="1.9" height="15.0" fill="rgb(250,222,42)" rx="2" ry="2" />
<text  x="481.89" y="223.5" ></text>
</g>
<g >
<title>malloc_consolidate (113 samples, 3.64%)</title><rect x="1111.0" y="357" width="42.9" height="15.0" fill="rgb(225,22,15)" rx="2" ry="2" />
<text  x="1114.03" y="367.5" >mall..</text>
</g>
<g >
<title>std::_Hashtable&lt;int, std::pair&lt;int const, double&gt;, std::allocator&lt;std::pair&lt;int const, double&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;int&gt;, std::hash&lt;int&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_bucket_index (7 samples, 0.23%)</title><rect x="601.5" y="277" width="2.7" height="15.0" fill="rgb(250,17,42)" rx="2" ry="2" />
<text  x="604.52" y="287.5" ></text>
</g>
<g >
<title>std::unordered_map&lt;int, std::unordered_set&lt;int, std::hash&lt;int&gt;, std::equal_to&lt;int&gt;, std::allocator&lt;int&gt; &gt;, std::hash&lt;int&gt;, std::equal_to&lt;int&gt;, std::allocator&lt;std::pair&lt;int const, std::unordered_set&lt;int, std::hash&lt;int&gt;, std::equal_to&lt;int&gt;, std::allocator&lt;int&gt; &gt; &gt; &gt; &gt;::~unordered_map (502 samples, 16.15%)</title><rect x="315.3" y="485" width="190.5" height="15.0" fill="rgb(238,56,43)" rx="2" ry="2" />
<text  x="318.25" y="495.5" >std::unordered_map&lt;int, ..</text>
</g>
<g >
<title>load_elf_binary (4 samples, 0.13%)</title><rect x="1188.5" y="485" width="1.5" height="15.0" fill="rgb(253,77,34)" rx="2" ry="2" />
<text  x="1191.48" y="495.5" ></text>
</g>
<g >
<title>__usb_hcd_giveback_urb (2 samples, 0.06%)</title><rect x="840.3" y="229" width="0.8" height="15.0" fill="rgb(243,217,29)" rx="2" ry="2" />
<text  x="843.33" y="239.5" ></text>
</g>
<g >
<title>sysvec_apic_timer_interrupt (1 samples, 0.03%)</title><rect x="579.9" y="389" width="0.4" height="15.0" fill="rgb(205,68,21)" rx="2" ry="2" />
<text  x="582.88" y="399.5" ></text>
</g>
<g >
<title>tasklet_hi_action (1 samples, 0.03%)</title><rect x="1046.5" y="357" width="0.4" height="15.0" fill="rgb(236,148,40)" rx="2" ry="2" />
<text  x="1049.49" y="367.5" ></text>
</g>
<g >
<title>std::__detail::_Hashtable_alloc&lt;std::allocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;int const, double&gt;, false&gt; &gt; &gt;::_M_deallocate_node (1 samples, 0.03%)</title><rect x="82.5" y="309" width="0.4" height="15.0" fill="rgb(230,21,21)" rx="2" ry="2" />
<text  x="85.52" y="319.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;int, int, std::allocator&lt;int&gt;, std::__detail::_Identity, std::equal_to&lt;int&gt;, std::hash&lt;int&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, true, true&gt; &gt;::_M_rehash (1 samples, 0.03%)</title><rect x="67.3" y="453" width="0.4" height="15.0" fill="rgb(207,19,2)" rx="2" ry="2" />
<text  x="70.33" y="463.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;int, std::pair&lt;int const, int*&gt;, std::allocator&lt;std::pair&lt;int const, int*&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;int&gt;, std::hash&lt;int&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_find_before_node (91 samples, 2.93%)</title><rect x="858.6" y="453" width="34.5" height="15.0" fill="rgb(242,5,38)" rx="2" ry="2" />
<text  x="861.55" y="463.5" >st..</text>
</g>
<g >
<title>com::github::coderodde::pathfinders::runDijkstrasAlgorithm&lt;int, double&gt; (2,707 samples, 87.10%)</title><rect x="83.3" y="517" width="1027.7" height="15.0" fill="rgb(241,191,26)" rx="2" ry="2" />
<text  x="86.28" y="527.5" >com::github::coderodde::pathfinders::runDijkstrasAlgorithm&lt;int, double&gt;</text>
</g>
<g >
<title>native_write_msr (4 samples, 0.13%)</title><rect x="1188.5" y="373" width="1.5" height="15.0" fill="rgb(232,221,27)" rx="2" ry="2" />
<text  x="1191.48" y="383.5" ></text>
</g>
<g >
<title>std::unordered_map&lt;int, std::unordered_map&lt;int, double, std::hash&lt;int&gt;, std::equal_to&lt;int&gt;, std::allocator&lt;std::pair&lt;int const, double&gt; &gt; &gt;, std::hash&lt;int&gt;, std::equal_to&lt;int&gt;, std::allocator&lt;std::pair&lt;int const, std::unordered_map&lt;int, double, std::hash&lt;int&gt;, std::equal_to&lt;int&gt;, std::allocator&lt;std::pair&lt;int const, double&gt; &gt; &gt; &gt; &gt; &gt;::unordered_map (141 samples, 4.54%)</title><rect x="574.9" y="453" width="53.6" height="15.0" fill="rgb(209,15,4)" rx="2" ry="2" />
<text  x="577.94" y="463.5" >std::..</text>
</g>
<g >
<title>operator new (108 samples, 3.47%)</title><rect x="95.8" y="357" width="41.0" height="15.0" fill="rgb(236,44,41)" rx="2" ry="2" />
<text  x="98.80" y="367.5" >ope..</text>
</g>
<g >
<title>std::__detail::_Hash_node&lt;std::pair&lt;int const, int*&gt;, false&gt;::_M_next (26 samples, 0.84%)</title><rect x="1002.4" y="437" width="9.9" height="15.0" fill="rgb(214,142,41)" rx="2" ry="2" />
<text  x="1005.45" y="447.5" ></text>
</g>
<g >
<title>__gnu_cxx::new_allocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;int const, double&gt;, false&gt; &gt;::deallocate (1 samples, 0.03%)</title><rect x="82.5" y="245" width="0.4" height="15.0" fill="rgb(246,67,16)" rx="2" ry="2" />
<text  x="85.52" y="255.5" ></text>
</g>
<g >
<title>usb_giveback_urb_bh (1 samples, 0.03%)</title><rect x="1046.5" y="325" width="0.4" height="15.0" fill="rgb(213,216,25)" rx="2" ry="2" />
<text  x="1049.49" y="335.5" ></text>
</g>
<g >
<title>irq_exit_rcu (2 samples, 0.06%)</title><rect x="840.3" y="309" width="0.8" height="15.0" fill="rgb(225,154,43)" rx="2" ry="2" />
<text  x="843.33" y="319.5" ></text>
</g>
<g >
<title>std::allocator_traits&lt;std::allocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;int const, double&gt;, false&gt; &gt; &gt;::allocate (1 samples, 0.03%)</title><rect x="68.8" y="309" width="0.4" height="15.0" fill="rgb(240,50,29)" rx="2" ry="2" />
<text  x="71.85" y="319.5" ></text>
</g>
<g >
<title>common_interrupt (1 samples, 0.03%)</title><rect x="799.7" y="405" width="0.4" height="15.0" fill="rgb(229,147,6)" rx="2" ry="2" />
<text  x="802.70" y="415.5" ></text>
</g>
<g >
<title>entry_SYSCALL_64_after_hwframe (1 samples, 0.03%)</title><rect x="1187.7" y="565" width="0.4" height="15.0" fill="rgb(247,24,11)" rx="2" ry="2" />
<text  x="1190.72" y="575.5" ></text>
</g>
<g >
<title>std::allocator_traits&lt;std::allocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;int const, std::unordered_map&lt;int, double, std::hash&lt;int&gt;, std::equal_to&lt;int&gt;, std::allocator&lt;std::pair&lt;int const, double&gt; &gt; &gt; &gt;, false&gt; &gt; &gt;::destroy&lt;std::pair&lt;int const, std::unordered_map&lt;int, double, std::hash&lt;int&gt;, std::equal_to&lt;int&gt;, std::allocator&lt;std::pair&lt;int const, double&gt; &gt; &gt; &gt; &gt; (65 samples, 2.09%)</title><rect x="1158.1" y="421" width="24.7" height="15.0" fill="rgb(229,128,53)" rx="2" ry="2" />
<text  x="1161.11" y="431.5" >s..</text>
</g>
<g >
<title>__gnu_cxx::new_allocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;int const, double&gt;, false&gt; &gt;::allocate (1 samples, 0.03%)</title><rect x="68.8" y="277" width="0.4" height="15.0" fill="rgb(248,103,51)" rx="2" ry="2" />
<text  x="71.85" y="287.5" ></text>
</g>
<g >
<title>std::__detail::_Hashtable_alloc&lt;std::allocator&lt;std::__detail::_Hash_node&lt;int, false&gt; &gt; &gt;::_M_deallocate_nodes (33 samples, 1.06%)</title><rect x="1098.5" y="453" width="12.5" height="15.0" fill="rgb(224,31,36)" rx="2" ry="2" />
<text  x="1101.50" y="463.5" ></text>
</g>
<g >
<title>std::allocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;int const, double&gt;, false&gt; &gt;::allocate (24 samples, 0.77%)</title><rect x="823.2" y="421" width="9.2" height="15.0" fill="rgb(217,36,43)" rx="2" ry="2" />
<text  x="826.24" y="431.5" ></text>
</g>
<g >
<title>std::__detail::_Hashtable_alloc&lt;std::allocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;int const, std::unordered_map&lt;int, double, std::hash&lt;int&gt;, std::equal_to&lt;int&gt;, std::allocator&lt;std::pair&lt;int const, double&gt; &gt; &gt; &gt;, false&gt; &gt; &gt;::_M_allocate_node&lt;std::pair&lt;int const, std::unordered_map&lt;int, double, std::hash&lt;int&gt;, std::equal_to&lt;int&gt;, std::allocator&lt;std::pair&lt;int const, double&gt; &gt; &gt; &gt; const&amp;&gt; (5 samples, 0.16%)</title><rect x="68.1" y="453" width="1.9" height="15.0" fill="rgb(235,208,35)" rx="2" ry="2" />
<text  x="71.09" y="463.5" ></text>
</g>
<g >
<title>std::__detail::_Insert_base&lt;int, int, std::allocator&lt;int&gt;, std::__detail::_Identity, std::equal_to&lt;int&gt;, std::hash&lt;int&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, true, true&gt; &gt;::insert (2 samples, 0.06%)</title><rect x="67.3" y="501" width="0.8" height="15.0" fill="rgb(211,123,1)" rx="2" ry="2" />
<text  x="70.33" y="511.5" ></text>
</g>
<g >
<title>checked_request2size (3 samples, 0.10%)</title><rect x="135.7" y="325" width="1.1" height="15.0" fill="rgb(246,72,11)" rx="2" ry="2" />
<text  x="138.67" y="335.5" ></text>
</g>
<g >
<title>_int_free (1 samples, 0.03%)</title><rect x="82.5" y="229" width="0.4" height="15.0" fill="rgb(209,42,1)" rx="2" ry="2" />
<text  x="85.52" y="239.5" ></text>
</g>
<g >
<title>usb_submit_urb (1 samples, 0.03%)</title><rect x="412.8" y="165" width="0.4" height="15.0" fill="rgb(234,118,12)" rx="2" ry="2" />
<text  x="415.82" y="175.5" ></text>
</g>
<g >
<title>operator new (13 samples, 0.42%)</title><rect x="1182.8" y="437" width="4.9" height="15.0" fill="rgb(241,84,3)" rx="2" ry="2" />
<text  x="1185.79" y="447.5" ></text>
</g>
<g >
<title>xhci_msi_irq (1 samples, 0.03%)</title><rect x="139.8" y="197" width="0.4" height="15.0" fill="rgb(219,136,32)" rx="2" ry="2" />
<text  x="142.85" y="207.5" ></text>
</g>
<g >
<title>xhci_queue_isoc_tx_prepare (1 samples, 0.03%)</title><rect x="956.9" y="261" width="0.4" height="15.0" fill="rgb(219,179,45)" rx="2" ry="2" />
<text  x="959.89" y="271.5" ></text>
</g>
<g >
<title>std::allocator_traits&lt;std::allocator&lt;std::__detail::_Hash_node_base*&gt; &gt;::deallocate (28 samples, 0.90%)</title><rect x="832.7" y="421" width="10.7" height="15.0" fill="rgb(242,65,29)" rx="2" ry="2" />
<text  x="835.73" y="431.5" ></text>
</g>
<g >
<title>std::__detail::_Hashtable_alloc&lt;std::allocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;int const, double&gt;, false&gt; &gt; &gt;::_M_deallocate_buckets (28 samples, 0.90%)</title><rect x="832.7" y="437" width="10.7" height="15.0" fill="rgb(212,120,44)" rx="2" ry="2" />
<text  x="835.73" y="447.5" ></text>
</g>
<g >
<title>[demo] (1 samples, 0.03%)</title><rect x="1158.1" y="245" width="0.4" height="15.0" fill="rgb(248,177,8)" rx="2" ry="2" />
<text  x="1161.11" y="255.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_node&lt;std::pair&lt;int const, double&gt;, false&gt;::_M_next (24 samples, 0.77%)</title><rect x="814.1" y="421" width="9.1" height="15.0" fill="rgb(226,21,23)" rx="2" ry="2" />
<text  x="817.13" y="431.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;int, std::pair&lt;int const, int*&gt;, std::allocator&lt;std::pair&lt;int const, int*&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;int&gt;, std::hash&lt;int&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_deallocate_buckets (71 samples, 2.28%)</title><rect x="975.5" y="469" width="26.9" height="15.0" fill="rgb(206,31,32)" rx="2" ry="2" />
<text  x="978.49" y="479.5" >s..</text>
</g>
<g >
<title>__pagevec_lru_add (1 samples, 0.03%)</title><rect x="67.7" y="213" width="0.4" height="15.0" fill="rgb(239,229,40)" rx="2" ry="2" />
<text  x="70.71" y="223.5" ></text>
</g>
<g >
<title>__GI___libc_free (3 samples, 0.10%)</title><rect x="416.2" y="341" width="1.2" height="15.0" fill="rgb(237,148,18)" rx="2" ry="2" />
<text  x="419.24" y="351.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_code_base&lt;int, std::pair&lt;int const, int*&gt;, std::__detail::_Select1st, std::hash&lt;int&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, false&gt;::_M_bucket_index (2 samples, 0.06%)</title><rect x="957.3" y="437" width="0.7" height="15.0" fill="rgb(226,138,38)" rx="2" ry="2" />
<text  x="960.27" y="447.5" ></text>
</g>
<g >
<title>__GI___libc_malloc (1 samples, 0.03%)</title><rect x="68.8" y="245" width="0.4" height="15.0" fill="rgb(245,39,40)" rx="2" ry="2" />
<text  x="71.85" y="255.5" ></text>
</g>
<g >
<title>unmap_page_range (1 samples, 0.03%)</title><rect x="1188.1" y="437" width="0.4" height="15.0" fill="rgb(223,58,36)" rx="2" ry="2" />
<text  x="1191.10" y="447.5" ></text>
</g>
<g >
<title>irq_chip_ack_parent (1 samples, 0.03%)</title><rect x="752.2" y="357" width="0.4" height="15.0" fill="rgb(247,206,11)" rx="2" ry="2" />
<text  x="755.25" y="367.5" ></text>
</g>
<g >
<title>std::allocator_traits&lt;std::allocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;int const, std::unordered_set&lt;int, std::hash&lt;int&gt;, std::equal_to&lt;int&gt;, std::allocator&lt;int&gt; &gt; &gt;, false&gt; &gt; &gt;::construct&lt;std::pair&lt;int const, std::unordered_set&lt;int, std::hash&lt;int&gt;, std::equal_to&lt;int&gt;, std::allocator&lt;int&gt; &gt; &gt;, std::pair&lt;int const, std::unordered_set&lt;int, std::hash&lt;int&gt;, std::equal_to&lt;int&gt;, std::allocator&lt;int&gt; &gt; &gt; const&amp;&gt; (1 samples, 0.03%)</title><rect x="59.4" y="421" width="0.3" height="15.0" fill="rgb(214,73,38)" rx="2" ry="2" />
<text  x="62.36" y="431.5" ></text>
</g>
<g >
<title>std::__detail::_Hashtable_alloc&lt;std::allocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;int const, double&gt;, false&gt; &gt; &gt;::_M_deallocate_buckets (9 samples, 0.29%)</title><rect x="1158.1" y="309" width="3.4" height="15.0" fill="rgb(224,43,37)" rx="2" ry="2" />
<text  x="1161.11" y="319.5" ></text>
</g>
<g >
<title>com::github::coderodde::directed_graph::DirectedGraph&lt;int&gt;::addArc (13 samples, 0.42%)</title><rect x="63.2" y="533" width="4.9" height="15.0" fill="rgb(240,12,40)" rx="2" ry="2" />
<text  x="66.15" y="543.5" ></text>
</g>
<g >
<title>std::vector&lt;com::github::coderodde::pathfinders::util::HeapNode&lt;int, double&gt;*, std::allocator&lt;com::github::coderodde::pathfinders::util::HeapNode&lt;int, double&gt;*&gt; &gt;::emplace_back&lt;com::github::coderodde::pathfinders::util::HeapNode&lt;int, double&gt;*&gt; (38 samples, 1.22%)</title><rect x="758.7" y="469" width="14.4" height="15.0" fill="rgb(220,151,7)" rx="2" ry="2" />
<text  x="761.70" y="479.5" ></text>
</g>
<g >
<title>perf_pmu_enable.part.0 (4 samples, 0.13%)</title><rect x="59.7" y="149" width="1.6" height="15.0" fill="rgb(218,20,10)" rx="2" ry="2" />
<text  x="62.74" y="159.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;int, int, std::allocator&lt;int&gt;, std::__detail::_Identity, std::equal_to&lt;int&gt;, std::hash&lt;int&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, true, true&gt; &gt;::_M_assign&lt;std::_Hashtable&lt;int, int, std::allocator&lt;int&gt;, std::__detail::_Identity, std::equal_to&lt;int&gt;, std::hash&lt;int&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, true, true&gt; &gt; const&amp;, std::__detail::_AllocNode&lt;std::allocator&lt;std::__detail::_Hash_node&lt;int, false&gt; &gt; &gt; &gt; (2 samples, 0.06%)</title><rect x="26.7" y="565" width="0.8" height="15.0" fill="rgb(233,221,39)" rx="2" ry="2" />
<text  x="29.71" y="575.5" ></text>
</g>
<g >
<title>std::allocator_traits&lt;std::allocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;int const, std::unordered_set&lt;int, std::hash&lt;int&gt;, std::equal_to&lt;int&gt;, std::allocator&lt;int&gt; &gt; &gt;, false&gt; &gt; &gt;::allocate (1 samples, 0.03%)</title><rect x="27.5" y="549" width="0.3" height="15.0" fill="rgb(206,217,13)" rx="2" ry="2" />
<text  x="30.46" y="559.5" ></text>
</g>
<g >
<title>__alloc_pages (1 samples, 0.03%)</title><rect x="68.1" y="229" width="0.4" height="15.0" fill="rgb(230,202,32)" rx="2" ry="2" />
<text  x="71.09" y="239.5" ></text>
</g>
<g >
<title>_int_malloc (13 samples, 0.42%)</title><rect x="89.4" y="325" width="4.9" height="15.0" fill="rgb(230,40,1)" rx="2" ry="2" />
<text  x="92.35" y="335.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;int, std::pair&lt;int const, std::unordered_set&lt;int, std::hash&lt;int&gt;, std::equal_to&lt;int&gt;, std::allocator&lt;int&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;int const, std::unordered_set&lt;int, std::hash&lt;int&gt;, std::equal_to&lt;int&gt;, std::allocator&lt;int&gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;int&gt;, std::hash&lt;int&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_assign&lt;std::_Hashtable&lt;int, std::pair&lt;int const, std::unordered_set&lt;int, std::hash&lt;int&gt;, std::equal_to&lt;int&gt;, std::allocator&lt;int&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;int const, std::unordered_set&lt;int, std::hash&lt;int&gt;, std::equal_to&lt;int&gt;, std::allocator&lt;int&gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;int&gt;, std::hash&lt;int&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt; const&amp;, std::__detail::_AllocNode&lt;std::allocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;int const, std::unordered_set&lt;int, std::hash&lt;int&gt;, std::equal_to&lt;int&gt;, std::allocator&lt;int&gt; &gt; &gt;, false&gt; &gt; &gt; &gt; (474 samples, 15.25%)</title><rect x="88.2" y="453" width="180.0" height="15.0" fill="rgb(215,212,31)" rx="2" ry="2" />
<text  x="91.21" y="463.5" >std::_Hashtable&lt;int, st..</text>
</g>
<g >
<title>std::unordered_set&lt;int, std::hash&lt;int&gt;, std::equal_to&lt;int&gt;, std::allocator&lt;int&gt; &gt;::insert (47 samples, 1.51%)</title><rect x="1072.7" y="501" width="17.8" height="15.0" fill="rgb(235,115,26)" rx="2" ry="2" />
<text  x="1075.68" y="511.5" ></text>
</g>
<g >
<title>std::__detail::_Mod_range_hashing::operator (1 samples, 0.03%)</title><rect x="70.0" y="453" width="0.4" height="15.0" fill="rgb(235,203,37)" rx="2" ry="2" />
<text  x="72.99" y="463.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;int, int, std::allocator&lt;int&gt;, std::__detail::_Identity, std::equal_to&lt;int&gt;, std::hash&lt;int&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, true, true&gt; &gt;::find (3 samples, 0.10%)</title><rect x="78.0" y="565" width="1.1" height="15.0" fill="rgb(221,222,37)" rx="2" ry="2" />
<text  x="80.96" y="575.5" ></text>
</g>
<g >
<title>usb_hcd_submit_urb (1 samples, 0.03%)</title><rect x="1046.5" y="261" width="0.4" height="15.0" fill="rgb(239,0,22)" rx="2" ry="2" />
<text  x="1049.49" y="271.5" ></text>
</g>
<g >
<title>put_pipe_info (1 samples, 0.03%)</title><rect x="1187.7" y="437" width="0.4" height="15.0" fill="rgb(205,125,2)" rx="2" ry="2" />
<text  x="1190.72" y="447.5" ></text>
</g>
<g >
<title>unmap_single_vma (1 samples, 0.03%)</title><rect x="1188.1" y="453" width="0.4" height="15.0" fill="rgb(218,125,6)" rx="2" ry="2" />
<text  x="1191.10" y="463.5" ></text>
</g>
<g >
<title>std::pair&lt;int const, std::unordered_map&lt;int, double, std::hash&lt;int&gt;, std::equal_to&lt;int&gt;, std::allocator&lt;std::pair&lt;int const, double&gt; &gt; &gt; &gt;::pair (1 samples, 0.03%)</title><rect x="47.6" y="517" width="0.4" height="15.0" fill="rgb(213,103,20)" rx="2" ry="2" />
<text  x="50.59" y="527.5" ></text>
</g>
<g >
<title>tick_sched_timer (1 samples, 0.03%)</title><rect x="180.5" y="101" width="0.3" height="15.0" fill="rgb(251,20,35)" rx="2" ry="2" />
<text  x="183.47" y="111.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;int, int, std::allocator&lt;int&gt;, std::__detail::_Identity, std::equal_to&lt;int&gt;, std::hash&lt;int&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, true, true&gt; &gt;::_M_find_node (8 samples, 0.26%)</title><rect x="64.3" y="485" width="3.0" height="15.0" fill="rgb(208,183,47)" rx="2" ry="2" />
<text  x="67.29" y="495.5" ></text>
</g>
<g >
<title>tasklet_hi_action (1 samples, 0.03%)</title><rect x="958.4" y="325" width="0.4" height="15.0" fill="rgb(239,185,34)" rx="2" ry="2" />
<text  x="961.40" y="335.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_code_base&lt;int, std::pair&lt;int const, std::unordered_map&lt;int, double, std::hash&lt;int&gt;, std::equal_to&lt;int&gt;, std::allocator&lt;std::pair&lt;int const, double&gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::hash&lt;int&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, false&gt;::_M_bucket_index (1 samples, 0.03%)</title><rect x="532.4" y="437" width="0.4" height="15.0" fill="rgb(228,90,3)" rx="2" ry="2" />
<text  x="535.42" y="447.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;int, int, std::allocator&lt;int&gt;, std::__detail::_Identity, std::equal_to&lt;int&gt;, std::hash&lt;int&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, true, true&gt; &gt;::_M_rehash (42 samples, 1.35%)</title><rect x="1073.8" y="437" width="16.0" height="15.0" fill="rgb(215,42,11)" rx="2" ry="2" />
<text  x="1076.82" y="447.5" ></text>
</g>
<g >
<title>__GI___libc_malloc (210 samples, 6.76%)</title><rect x="185.8" y="213" width="79.7" height="15.0" fill="rgb(233,97,43)" rx="2" ry="2" />
<text  x="188.79" y="223.5" >__GI___li..</text>
</g>
<g >
<title>sysvec_reschedule_ipi (4 samples, 0.13%)</title><rect x="59.7" y="277" width="1.6" height="15.0" fill="rgb(250,120,38)" rx="2" ry="2" />
<text  x="62.74" y="287.5" ></text>
</g>
<g >
<title>tasklet_hi_action (1 samples, 0.03%)</title><rect x="526.3" y="341" width="0.4" height="15.0" fill="rgb(210,228,34)" rx="2" ry="2" />
<text  x="529.34" y="351.5" ></text>
</g>
<g >
<title>irq_exit_rcu (1 samples, 0.03%)</title><rect x="829.7" y="309" width="0.4" height="15.0" fill="rgb(208,69,15)" rx="2" ry="2" />
<text  x="832.70" y="319.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;int, std::pair&lt;int const, std::unordered_map&lt;int, double, std::hash&lt;int&gt;, std::equal_to&lt;int&gt;, std::allocator&lt;std::pair&lt;int const, double&gt; &gt; &gt; &gt;, std::allocator&lt;std::pair&lt;int const, std::unordered_map&lt;int, double, std::hash&lt;int&gt;, std::equal_to&lt;int&gt;, std::allocator&lt;std::pair&lt;int const, double&gt; &gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;int&gt;, std::hash&lt;int&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_deallocate_buckets (113 samples, 3.64%)</title><rect x="1111.0" y="453" width="42.9" height="15.0" fill="rgb(216,60,9)" rx="2" ry="2" />
<text  x="1114.03" y="463.5" >std:..</text>
</g>
<g >
<title>std::__detail::_Mod_range_hashing::operator (1 samples, 0.03%)</title><rect x="858.2" y="437" width="0.4" height="15.0" fill="rgb(209,190,30)" rx="2" ry="2" />
<text  x="861.17" y="447.5" ></text>
</g>
<g >
<title>common_interrupt (2 samples, 0.06%)</title><rect x="958.0" y="373" width="0.8" height="15.0" fill="rgb(212,13,45)" rx="2" ry="2" />
<text  x="961.02" y="383.5" ></text>
</g>
<g >
<title>__fput (1 samples, 0.03%)</title><rect x="1187.7" y="469" width="0.4" height="15.0" fill="rgb(207,214,2)" rx="2" ry="2" />
<text  x="1190.72" y="479.5" ></text>
</g>
<g >
<title>__gnu_cxx::new_allocator&lt;std::__detail::_Hash_node&lt;int, false&gt; &gt;::allocate (1 samples, 0.03%)</title><rect x="59.4" y="261" width="0.3" height="15.0" fill="rgb(236,8,36)" rx="2" ry="2" />
<text  x="62.36" y="271.5" ></text>
</g>
<g >
<title>tasklet_action_common.isra.0 (1 samples, 0.03%)</title><rect x="412.8" y="229" width="0.4" height="15.0" fill="rgb(225,12,1)" rx="2" ry="2" />
<text  x="415.82" y="239.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;int, int, std::allocator&lt;int&gt;, std::__detail::_Identity, std::equal_to&lt;int&gt;, std::hash&lt;int&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, true, true&gt; &gt;::_M_bucket_index (27 samples, 0.87%)</title><rect x="1036.2" y="437" width="10.3" height="15.0" fill="rgb(232,225,4)" rx="2" ry="2" />
<text  x="1039.24" y="447.5" ></text>
</g>
<g >
<title>std::__detail::_Map_base&lt;int, std::pair&lt;int const, EuclideanCoordinates&gt;, std::allocator&lt;std::pair&lt;int const, EuclideanCoordinates&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;int&gt;, std::hash&lt;int&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt;, true&gt;::operator[] (5 samples, 0.16%)</title><rect x="71.5" y="517" width="1.9" height="15.0" fill="rgb(220,173,25)" rx="2" ry="2" />
<text  x="74.51" y="527.5" ></text>
</g>
<g >
<title>irqentry_exit_to_user_mode (4 samples, 0.13%)</title><rect x="59.7" y="245" width="1.6" height="15.0" fill="rgb(215,121,23)" rx="2" ry="2" />
<text  x="62.74" y="255.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;int, std::pair&lt;int const, std::unordered_set&lt;int, std::hash&lt;int&gt;, std::equal_to&lt;int&gt;, std::allocator&lt;int&gt; &gt; &gt;, std::allocator&lt;std::pair&lt;int const, std::unordered_set&lt;int, std::hash&lt;int&gt;, std::equal_to&lt;int&gt;, std::allocator&lt;int&gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;int&gt;, std::hash&lt;int&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_Hashtable (474 samples, 15.25%)</title><rect x="88.2" y="469" width="180.0" height="15.0" fill="rgb(242,151,18)" rx="2" ry="2" />
<text  x="91.21" y="479.5" >std::_Hashtable&lt;int, st..</text>
</g>
<g >
<title>std::_Hashtable&lt;int, std::pair&lt;int const, double&gt;, std::allocator&lt;std::pair&lt;int const, double&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;int&gt;, std::hash&lt;int&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::~_Hashtable (2 samples, 0.06%)</title><rect x="48.7" y="453" width="0.8" height="15.0" fill="rgb(253,147,30)" rx="2" ry="2" />
<text  x="51.73" y="463.5" ></text>
</g>
<g >
<title>std::allocator_traits&lt;std::allocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;int const, std::unordered_set&lt;int, std::hash&lt;int&gt;, std::equal_to&lt;int&gt;, std::allocator&lt;int&gt; &gt; &gt;, false&gt; &gt; &gt;::construct&lt;std::pair&lt;int const, std::unordered_set&lt;int, std::hash&lt;int&gt;, std::equal_to&lt;int&gt;, std::allocator&lt;int&gt; &gt; &gt;, std::pair&lt;int const, std::unordered_set&lt;int, std::hash&lt;int&gt;, std::equal_to&lt;int&gt;, std::allocator&lt;int&gt; &gt; &gt; const&amp;&gt; (9 samples, 0.29%)</title><rect x="59.7" y="437" width="3.5" height="15.0" fill="rgb(229,142,34)" rx="2" ry="2" />
<text  x="62.74" y="447.5" ></text>
</g>
<g >
<title>perf_event_exec (4 samples, 0.13%)</title><rect x="1188.5" y="453" width="1.5" height="15.0" fill="rgb(214,212,39)" rx="2" ry="2" />
<text  x="1191.48" y="463.5" ></text>
</g>
<g >
<title>std::allocator_traits&lt;std::allocator&lt;std::chrono::duration&lt;long, std::ratio&lt;1l, 1000000000l&gt; &gt; &gt; &gt;::allocate (38 samples, 1.22%)</title><rect x="758.7" y="405" width="14.4" height="15.0" fill="rgb(246,17,14)" rx="2" ry="2" />
<text  x="761.70" y="415.5" ></text>
</g>
<g >
<title>__common_interrupt (1 samples, 0.03%)</title><rect x="1182.0" y="181" width="0.4" height="15.0" fill="rgb(250,152,20)" rx="2" ry="2" />
<text  x="1185.03" y="191.5" ></text>
</g>
<g >
<title>__gnu_cxx::new_allocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;int const, int*&gt;, false&gt; &gt;::deallocate (12 samples, 0.39%)</title><rect x="1012.3" y="373" width="4.6" height="15.0" fill="rgb(217,11,43)" rx="2" ry="2" />
<text  x="1015.32" y="383.5" ></text>
</g>
<g >
<title>std::__detail::_Hashtable_base&lt;int, std::pair&lt;int const, int*&gt;, std::__detail::_Select1st, std::equal_to&lt;int&gt;, std::hash&lt;int&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_equals (38 samples, 1.22%)</title><rect x="878.7" y="437" width="14.4" height="15.0" fill="rgb(235,38,28)" rx="2" ry="2" />
<text  x="881.67" y="447.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;int, std::pair&lt;int const, std::unordered_map&lt;int, double, std::hash&lt;int&gt;, std::equal_to&lt;int&gt;, std::allocator&lt;std::pair&lt;int const, double&gt; &gt; &gt; &gt;, std::allocator&lt;std::pair&lt;int const, std::unordered_map&lt;int, double, std::hash&lt;int&gt;, std::equal_to&lt;int&gt;, std::allocator&lt;std::pair&lt;int const, double&gt; &gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;int&gt;, std::hash&lt;int&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_allocate_buckets (13 samples, 0.42%)</title><rect x="580.3" y="405" width="4.9" height="15.0" fill="rgb(240,195,28)" rx="2" ry="2" />
<text  x="583.26" y="415.5" ></text>
</g>
<g >
<title>std::allocator_traits&lt;std::allocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;int const, std::unordered_map&lt;int, double, std::hash&lt;int&gt;, std::equal_to&lt;int&gt;, std::allocator&lt;std::pair&lt;int const, double&gt; &gt; &gt; &gt;, false&gt; &gt; &gt;::allocate (1 samples, 0.03%)</title><rect x="68.1" y="437" width="0.4" height="15.0" fill="rgb(227,182,41)" rx="2" ry="2" />
<text  x="71.09" y="447.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;int, std::pair&lt;int const, double&gt;, std::allocator&lt;std::pair&lt;int const, double&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;int&gt;, std::hash&lt;int&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_bucket_index (1 samples, 0.03%)</title><rect x="604.2" y="245" width="0.4" height="15.0" fill="rgb(205,211,33)" rx="2" ry="2" />
<text  x="607.18" y="255.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;int, int, std::allocator&lt;int&gt;, std::__detail::_Identity, std::equal_to&lt;int&gt;, std::hash&lt;int&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, true, true&gt; &gt;::_M_deallocate_buckets (21 samples, 0.68%)</title><rect x="1090.5" y="469" width="8.0" height="15.0" fill="rgb(228,114,40)" rx="2" ry="2" />
<text  x="1093.53" y="479.5" ></text>
</g>
<g >
<title>update_process_times (1 samples, 0.03%)</title><rect x="180.5" y="69" width="0.3" height="15.0" fill="rgb(253,225,21)" rx="2" ry="2" />
<text  x="183.47" y="79.5" ></text>
</g>
<g >
<title>std::__detail::_Hashtable_alloc&lt;std::allocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;int const, double&gt;, false&gt; &gt; &gt;::_M_allocate_buckets (1 samples, 0.03%)</title><rect x="68.5" y="325" width="0.3" height="15.0" fill="rgb(235,209,34)" rx="2" ry="2" />
<text  x="71.47" y="335.5" ></text>
</g>
<g >
<title>std::__detail::_Hashtable_alloc&lt;std::allocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;int const, int*&gt;, false&gt; &gt; &gt;::_M_allocate_node&lt;std::pair&lt;int const, int*&gt; const&amp;&gt; (44 samples, 1.42%)</title><rect x="958.0" y="437" width="16.7" height="15.0" fill="rgb(242,182,47)" rx="2" ry="2" />
<text  x="961.02" y="447.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_node&lt;int, false&gt;::_M_next (5 samples, 0.16%)</title><rect x="509.3" y="421" width="1.9" height="15.0" fill="rgb(212,34,36)" rx="2" ry="2" />
<text  x="512.26" y="431.5" ></text>
</g>
<g >
<title>std::push_heap&lt;__gnu_cxx::__normal_iterator&lt;com::github::coderodde::pathfinders::util::HeapNode&lt;int, double&gt;**, std::vector&lt;com::github::coderodde::pathfinders::util::HeapNode&lt;int, double&gt;*, std::allocator&lt;com::github::coderodde::pathfinders::util::HeapNode&lt;int, double&gt;*&gt; &gt; &gt;, com::github::coderodde::pathfinders::util::HeapNodeComparator&lt;int, double&gt; &gt; (12 samples, 0.39%)</title><rect x="754.1" y="485" width="4.6" height="15.0" fill="rgb(240,65,13)" rx="2" ry="2" />
<text  x="757.14" y="495.5" ></text>
</g>
<g >
<title>__gnu_cxx::new_allocator&lt;std::__detail::_Hash_node&lt;int, false&gt; &gt;::deallocate (72 samples, 2.32%)</title><rect x="478.5" y="229" width="27.3" height="15.0" fill="rgb(218,1,30)" rx="2" ry="2" />
<text  x="481.51" y="239.5" >_..</text>
</g>
<g >
<title>handle_edge_irq (1 samples, 0.03%)</title><rect x="1182.0" y="165" width="0.4" height="15.0" fill="rgb(245,33,36)" rx="2" ry="2" />
<text  x="1185.03" y="175.5" ></text>
</g>
<g >
<title>common_interrupt (2 samples, 0.06%)</title><rect x="840.3" y="325" width="0.8" height="15.0" fill="rgb(225,64,17)" rx="2" ry="2" />
<text  x="843.33" y="335.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;int, int, std::allocator&lt;int&gt;, std::__detail::_Identity, std::equal_to&lt;int&gt;, std::hash&lt;int&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, true, true&gt; &gt;::_M_insert_unique_node (44 samples, 1.42%)</title><rect x="1073.1" y="453" width="16.7" height="15.0" fill="rgb(219,127,34)" rx="2" ry="2" />
<text  x="1076.06" y="463.5" ></text>
</g>
<g >
<title>std::__detail::_AllocNode&lt;std::allocator&lt;std::__detail::_Hash_node&lt;int, false&gt; &gt; &gt;::operator (217 samples, 6.98%)</title><rect x="184.6" y="309" width="82.4" height="15.0" fill="rgb(220,65,5)" rx="2" ry="2" />
<text  x="187.65" y="319.5" >std::__de..</text>
</g>
<g >
<title>std::_Hashtable&lt;int, std::pair&lt;int const, std::unordered_map&lt;int, double, std::hash&lt;int&gt;, std::equal_to&lt;int&gt;, std::allocator&lt;std::pair&lt;int const, double&gt; &gt; &gt; &gt;, std::allocator&lt;std::pair&lt;int const, std::unordered_map&lt;int, double, std::hash&lt;int&gt;, std::equal_to&lt;int&gt;, std::allocator&lt;std::pair&lt;int const, double&gt; &gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;int&gt;, std::hash&lt;int&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::clear (2 samples, 0.06%)</title><rect x="48.7" y="565" width="0.8" height="15.0" fill="rgb(229,88,46)" rx="2" ry="2" />
<text  x="51.73" y="575.5" ></text>
</g>
<g >
<title>__gnu_cxx::new_allocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;int const, std::unordered_map&lt;int, double, std::hash&lt;int&gt;, std::equal_to&lt;int&gt;, std::allocator&lt;std::pair&lt;int const, double&gt; &gt; &gt; &gt;, false&gt; &gt;::allocate (16 samples, 0.51%)</title><rect x="585.6" y="341" width="6.0" height="15.0" fill="rgb(205,159,8)" rx="2" ry="2" />
<text  x="588.57" y="351.5" ></text>
</g>
<g >
<title>_int_malloc (15 samples, 0.48%)</title><rect x="585.6" y="293" width="5.7" height="15.0" fill="rgb(205,227,35)" rx="2" ry="2" />
<text  x="588.57" y="303.5" ></text>
</g>
<g >
<title>std::allocator_traits&lt;std::allocator&lt;std::__detail::_Hash_node_base*&gt; &gt;::allocate (30 samples, 0.97%)</title><rect x="904.9" y="389" width="11.4" height="15.0" fill="rgb(205,159,28)" rx="2" ry="2" />
<text  x="907.87" y="399.5" ></text>
</g>
<g >
<title>_int_malloc (30 samples, 0.97%)</title><rect x="904.9" y="309" width="11.4" height="15.0" fill="rgb(254,183,3)" rx="2" ry="2" />
<text  x="907.87" y="319.5" ></text>
</g>
<g >
<title>usb_hcd_submit_urb (1 samples, 0.03%)</title><rect x="1187.3" y="197" width="0.4" height="15.0" fill="rgb(220,14,44)" rx="2" ry="2" />
<text  x="1190.34" y="207.5" ></text>
</g>
<g >
<title>std::__detail::_Hashtable_alloc&lt;std::allocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;int const, int*&gt;, false&gt; &gt; &gt;::_M_allocate_buckets (33 samples, 1.06%)</title><rect x="903.7" y="405" width="12.6" height="15.0" fill="rgb(234,196,14)" rx="2" ry="2" />
<text  x="906.73" y="415.5" ></text>
</g>
<g >
<title>std::allocator_traits&lt;std::allocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;int const, double&gt;, false&gt; &gt; &gt;::construct&lt;std::pair&lt;int const, double&gt;, std::pair&lt;int const, double&gt; const&amp;&gt; (2 samples, 0.06%)</title><rect x="69.2" y="309" width="0.8" height="15.0" fill="rgb(231,173,13)" rx="2" ry="2" />
<text  x="72.23" y="319.5" ></text>
</g>
<g >
<title>__GI___libc_malloc (1 samples, 0.03%)</title><rect x="68.1" y="373" width="0.4" height="15.0" fill="rgb(230,26,9)" rx="2" ry="2" />
<text  x="71.09" y="383.5" ></text>
</g>
<g >
<title>std::allocator_traits&lt;std::allocator&lt;std::__detail::_Hash_node_base*&gt; &gt;::allocate (21 samples, 0.68%)</title><rect x="1077.2" y="373" width="8.0" height="15.0" fill="rgb(226,34,48)" rx="2" ry="2" />
<text  x="1080.24" y="383.5" ></text>
</g>
<g >
<title>operator new (37 samples, 1.19%)</title><rect x="268.6" y="357" width="14.0" height="15.0" fill="rgb(225,82,34)" rx="2" ry="2" />
<text  x="271.55" y="367.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_node_base::_Hash_node_base (2 samples, 0.06%)</title><rect x="958.0" y="405" width="0.8" height="15.0" fill="rgb(231,33,14)" rx="2" ry="2" />
<text  x="961.02" y="415.5" ></text>
</g>
<g >
<title>operator new (12 samples, 0.39%)</title><rect x="958.8" y="373" width="4.5" height="15.0" fill="rgb(238,37,48)" rx="2" ry="2" />
<text  x="961.78" y="383.5" ></text>
</g>
<g >
<title>std::allocator_traits&lt;std::allocator&lt;std::__detail::_Hash_node&lt;int, false&gt; &gt; &gt;::deallocate (6 samples, 0.19%)</title><rect x="44.9" y="373" width="2.3" height="15.0" fill="rgb(241,81,45)" rx="2" ry="2" />
<text  x="47.93" y="383.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_code_base&lt;int, std::pair&lt;int const, double&gt;, std::__detail::_Select1st, std::hash&lt;int&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, false&gt;::_M_bucket_index (1 samples, 0.03%)</title><rect x="604.2" y="229" width="0.4" height="15.0" fill="rgb(210,67,24)" rx="2" ry="2" />
<text  x="607.18" y="239.5" ></text>
</g>
<g >
<title>asm_common_interrupt (1 samples, 0.03%)</title><rect x="412.8" y="309" width="0.4" height="15.0" fill="rgb(247,24,42)" rx="2" ry="2" />
<text  x="415.82" y="319.5" ></text>
</g>
<g >
<title>std::priority_queue&lt;com::github::coderodde::pathfinders::util::HeapNode&lt;int, double&gt;*, std::vector&lt;com::github::coderodde::pathfinders::util::HeapNode&lt;int, double&gt;*, std::allocator&lt;com::github::coderodde::pathfinders::util::HeapNode&lt;int, double&gt;*&gt; &gt;, com::github::coderodde::pathfinders::util::HeapNodeComparator&lt;int, double&gt; &gt;::empty (1 samples, 0.03%)</title><rect x="548.7" y="485" width="0.4" height="15.0" fill="rgb(219,105,43)" rx="2" ry="2" />
<text  x="551.75" y="495.5" ></text>
</g>
<g >
<title>handle_irq_event (1 samples, 0.03%)</title><rect x="958.0" y="325" width="0.4" height="15.0" fill="rgb(213,84,9)" rx="2" ry="2" />
<text  x="961.02" y="335.5" ></text>
</g>
<g >
<title>std::__detail::_Hashtable_alloc&lt;std::allocator&lt;std::__detail::_Hash_node&lt;int, false&gt; &gt; &gt;::_M_deallocate_buckets (24 samples, 0.77%)</title><rect x="420.0" y="293" width="9.2" height="15.0" fill="rgb(228,213,38)" rx="2" ry="2" />
<text  x="423.04" y="303.5" ></text>
</g>
<g >
<title>tasklet_hi_action (1 samples, 0.03%)</title><rect x="772.7" y="245" width="0.4" height="15.0" fill="rgb(215,55,20)" rx="2" ry="2" />
<text  x="775.75" y="255.5" ></text>
</g>
<g >
<title>std::vector&lt;com::github::coderodde::pathfinders::util::HeapNode&lt;int, double&gt;*, std::allocator&lt;com::github::coderodde::pathfinders::util::HeapNode&lt;int, double&gt;*&gt; &gt;::push_back (38 samples, 1.22%)</title><rect x="758.7" y="485" width="14.4" height="15.0" fill="rgb(211,190,39)" rx="2" ry="2" />
<text  x="761.70" y="495.5" ></text>
</g>
<g >
<title>xhci_queue_isoc_tx (2 samples, 0.06%)</title><rect x="392.3" y="117" width="0.8" height="15.0" fill="rgb(253,217,6)" rx="2" ry="2" />
<text  x="395.32" y="127.5" ></text>
</g>
<g >
<title>usb_hcd_submit_urb (1 samples, 0.03%)</title><rect x="799.7" y="261" width="0.4" height="15.0" fill="rgb(238,214,15)" rx="2" ry="2" />
<text  x="802.70" y="271.5" ></text>
</g>
<g >
<title>malloc_consolidate (2 samples, 0.06%)</title><rect x="974.7" y="453" width="0.8" height="15.0" fill="rgb(240,113,50)" rx="2" ry="2" />
<text  x="977.73" y="463.5" ></text>
</g>
<g >
<title>com::github::coderodde::pathfinders::util::Path&lt;int, double&gt;::~Path (189 samples, 6.08%)</title><rect x="1111.0" y="533" width="71.8" height="15.0" fill="rgb(252,27,27)" rx="2" ry="2" />
<text  x="1114.03" y="543.5" >com::git..</text>
</g>
<g >
<title>std::allocator_traits&lt;std::allocator&lt;std::__detail::_Hash_node_base*&gt; &gt;::deallocate (258 samples, 8.30%)</title><rect x="315.3" y="405" width="97.9" height="15.0" fill="rgb(254,142,54)" rx="2" ry="2" />
<text  x="318.25" y="415.5" >std::alloca..</text>
</g>
<g >
<title>std::pair&lt;int const, std::unordered_map&lt;int, double, std::hash&lt;int&gt;, std::equal_to&lt;int&gt;, std::allocator&lt;std::pair&lt;int const, double&gt; &gt; &gt; &gt;::~pair (2 samples, 0.06%)</title><rect x="48.7" y="485" width="0.8" height="15.0" fill="rgb(237,10,16)" rx="2" ry="2" />
<text  x="51.73" y="495.5" ></text>
</g>
<g >
<title>std::allocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;int const, std::unordered_set&lt;int, std::hash&lt;int&gt;, std::equal_to&lt;int&gt;, std::allocator&lt;int&gt; &gt; &gt;, false&gt; &gt;::deallocate (2 samples, 0.06%)</title><rect x="44.2" y="485" width="0.7" height="15.0" fill="rgb(207,63,12)" rx="2" ry="2" />
<text  x="47.17" y="495.5" ></text>
</g>
<g >
<title>std::__detail::_AllocNode&lt;std::allocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;int const, double&gt;, false&gt; &gt; &gt;::operator (1 samples, 0.03%)</title><rect x="47.6" y="453" width="0.4" height="15.0" fill="rgb(240,141,20)" rx="2" ry="2" />
<text  x="50.59" y="463.5" ></text>
</g>
<g >
<title>operator new (1 samples, 0.03%)</title><rect x="59.4" y="245" width="0.3" height="15.0" fill="rgb(242,2,32)" rx="2" ry="2" />
<text  x="62.36" y="255.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;int, std::pair&lt;int const, std::unordered_map&lt;int, double, std::hash&lt;int&gt;, std::equal_to&lt;int&gt;, std::allocator&lt;std::pair&lt;int const, double&gt; &gt; &gt; &gt;, std::allocator&lt;std::pair&lt;int const, std::unordered_map&lt;int, double, std::hash&lt;int&gt;, std::equal_to&lt;int&gt;, std::allocator&lt;std::pair&lt;int const, double&gt; &gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;int&gt;, std::hash&lt;int&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_assign&lt;std::_Hashtable&lt;int, std::pair&lt;int const, std::unordered_map&lt;int, double, std::hash&lt;int&gt;, std::equal_to&lt;int&gt;, std::allocator&lt;std::pair&lt;int const, double&gt; &gt; &gt; &gt;, std::allocator&lt;std::pair&lt;int const, std::unordered_map&lt;int, double, std::hash&lt;int&gt;, std::equal_to&lt;int&gt;, std::allocator&lt;std::pair&lt;int const, double&gt; &gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;int&gt;, std::hash&lt;int&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt; const&amp;, std::__detail::_AllocNode&lt;std::allocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;int const, std::unordered_map&lt;int, double, std::hash&lt;int&gt;, std::equal_to&lt;int&gt;, std::allocator&lt;std::pair&lt;int const, double&gt; &gt; &gt; &gt;, false&gt; &gt; &gt; &gt; (5 samples, 0.16%)</title><rect x="68.1" y="485" width="1.9" height="15.0" fill="rgb(214,229,23)" rx="2" ry="2" />
<text  x="71.09" y="495.5" ></text>
</g>
<g >
<title>[libstdc++.so.6.0.29] (1 samples, 0.03%)</title><rect x="1156.2" y="357" width="0.4" height="15.0" fill="rgb(221,152,14)" rx="2" ry="2" />
<text  x="1159.21" y="367.5" ></text>
</g>
<g >
<title>_int_malloc (8 samples, 0.26%)</title><rect x="33.5" y="565" width="3.1" height="15.0" fill="rgb(242,3,34)" rx="2" ry="2" />
<text  x="36.54" y="575.5" ></text>
</g>
<g >
<title>_int_free (5 samples, 0.16%)</title><rect x="18.7" y="565" width="1.9" height="15.0" fill="rgb(209,149,1)" rx="2" ry="2" />
<text  x="21.73" y="575.5" ></text>
</g>
<g >
<title>com::github::coderodde::directed_graph::DirectedGraph&lt;int&gt;::DirectedGraph (512 samples, 16.47%)</title><rect x="88.2" y="501" width="194.4" height="15.0" fill="rgb(211,21,12)" rx="2" ry="2" />
<text  x="91.21" y="511.5" >com::github::coderodde::d..</text>
</g>
<g >
<title>common_interrupt (1 samples, 0.03%)</title><rect x="134.2" y="293" width="0.3" height="15.0" fill="rgb(250,141,34)" rx="2" ry="2" />
<text  x="137.15" y="303.5" ></text>
</g>
<g >
<title>__hrtimer_run_queues (1 samples, 0.03%)</title><rect x="180.5" y="117" width="0.3" height="15.0" fill="rgb(213,72,29)" rx="2" ry="2" />
<text  x="183.47" y="127.5" ></text>
</g>
<g >
<title>std::pair&lt;int const, std::unordered_set&lt;int, std::hash&lt;int&gt;, std::equal_to&lt;int&gt;, std::allocator&lt;int&gt; &gt; &gt;::~pair (226 samples, 7.27%)</title><rect x="420.0" y="373" width="85.8" height="15.0" fill="rgb(245,79,9)" rx="2" ry="2" />
<text  x="423.04" y="383.5" >std::pair&lt;..</text>
</g>
<g >
<title>usb_hcd_get_frame_number (1 samples, 0.03%)</title><rect x="419.7" y="149" width="0.3" height="15.0" fill="rgb(221,132,22)" rx="2" ry="2" />
<text  x="422.66" y="159.5" ></text>
</g>
<g >
<title>__gnu_cxx::new_allocator&lt;std::__detail::_Hash_node_base*&gt;::deallocate (71 samples, 2.28%)</title><rect x="975.5" y="389" width="26.9" height="15.0" fill="rgb(210,26,29)" rx="2" ry="2" />
<text  x="978.49" y="399.5" >_..</text>
</g>
<g >
<title>std::allocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;int const, std::unordered_set&lt;int, std::hash&lt;int&gt;, std::equal_to&lt;int&gt;, std::allocator&lt;int&gt; &gt; &gt;, false&gt; &gt;::allocate (1 samples, 0.03%)</title><rect x="27.5" y="533" width="0.3" height="15.0" fill="rgb(226,10,41)" rx="2" ry="2" />
<text  x="30.46" y="543.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_node&lt;std::pair&lt;int const, std::unordered_map&lt;int, double, std::hash&lt;int&gt;, std::equal_to&lt;int&gt;, std::allocator&lt;std::pair&lt;int const, double&gt; &gt; &gt; &gt;, false&gt;::_M_next (4 samples, 0.13%)</title><rect x="1154.7" y="437" width="1.5" height="15.0" fill="rgb(236,199,31)" rx="2" ry="2" />
<text  x="1157.69" y="447.5" ></text>
</g>
<g >
<title>__hrtimer_run_queues (1 samples, 0.03%)</title><rect x="579.9" y="341" width="0.4" height="15.0" fill="rgb(237,180,44)" rx="2" ry="2" />
<text  x="582.88" y="351.5" ></text>
</g>
<g >
<title>__GI___libc_free (1 samples, 0.03%)</title><rect x="511.9" y="341" width="0.4" height="15.0" fill="rgb(206,165,23)" rx="2" ry="2" />
<text  x="514.92" y="351.5" ></text>
</g>
<g >
<title>__GI___libc_malloc (47 samples, 1.51%)</title><rect x="936.0" y="373" width="17.8" height="15.0" fill="rgb(226,56,6)" rx="2" ry="2" />
<text  x="939.00" y="383.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;int, std::pair&lt;int const, double&gt;, std::allocator&lt;std::pair&lt;int const, double&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;int&gt;, std::hash&lt;int&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_bucket_index (7 samples, 0.23%)</title><rect x="514.2" y="453" width="2.7" height="15.0" fill="rgb(252,141,12)" rx="2" ry="2" />
<text  x="517.20" y="463.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;int, std::pair&lt;int const, std::unordered_map&lt;int, double, std::hash&lt;int&gt;, std::equal_to&lt;int&gt;, std::allocator&lt;std::pair&lt;int const, double&gt; &gt; &gt; &gt;, std::allocator&lt;std::pair&lt;int const, std::unordered_map&lt;int, double, std::hash&lt;int&gt;, std::equal_to&lt;int&gt;, std::allocator&lt;std::pair&lt;int const, double&gt; &gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;int&gt;, std::hash&lt;int&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_bucket_index (1 samples, 0.03%)</title><rect x="532.4" y="453" width="0.4" height="15.0" fill="rgb(213,34,24)" rx="2" ry="2" />
<text  x="535.42" y="463.5" ></text>
</g>
<g >
<title>get_page_from_freelist (1 samples, 0.03%)</title><rect x="68.1" y="213" width="0.4" height="15.0" fill="rgb(220,143,33)" rx="2" ry="2" />
<text  x="71.09" y="223.5" ></text>
</g>
<g >
<title>usb_hcd_submit_urb (1 samples, 0.03%)</title><rect x="958.4" y="229" width="0.4" height="15.0" fill="rgb(234,14,31)" rx="2" ry="2" />
<text  x="961.40" y="239.5" ></text>
</g>
<g >
<title>std::unordered_set&lt;int, std::hash&lt;int&gt;, std::equal_to&lt;int&gt;, std::allocator&lt;int&gt; &gt;::contains (147 samples, 4.73%)</title><rect x="1016.9" y="501" width="55.8" height="15.0" fill="rgb(223,147,45)" rx="2" ry="2" />
<text  x="1019.87" y="511.5" >std::..</text>
</g>
<g >
<title>irq_exit_rcu (1 samples, 0.03%)</title><rect x="419.7" y="293" width="0.3" height="15.0" fill="rgb(223,148,50)" rx="2" ry="2" />
<text  x="422.66" y="303.5" ></text>
</g>
<g >
<title>common_interrupt (3 samples, 0.10%)</title><rect x="391.9" y="309" width="1.2" height="15.0" fill="rgb(218,106,13)" rx="2" ry="2" />
<text  x="394.94" y="319.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;int, std::pair&lt;int const, std::unordered_map&lt;int, double, std::hash&lt;int&gt;, std::equal_to&lt;int&gt;, std::allocator&lt;std::pair&lt;int const, double&gt; &gt; &gt; &gt;, std::allocator&lt;std::pair&lt;int const, std::unordered_map&lt;int, double, std::hash&lt;int&gt;, std::equal_to&lt;int&gt;, std::allocator&lt;std::pair&lt;int const, double&gt; &gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;int&gt;, std::hash&lt;int&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_find_before_node (22 samples, 0.71%)</title><rect x="524.1" y="437" width="8.3" height="15.0" fill="rgb(221,108,47)" rx="2" ry="2" />
<text  x="527.07" y="447.5" ></text>
</g>
<g >
<title>_int_free (1 samples, 0.03%)</title><rect x="82.9" y="533" width="0.4" height="15.0" fill="rgb(233,74,6)" rx="2" ry="2" />
<text  x="85.90" y="543.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_node&lt;std::pair&lt;int const, double&gt;, false&gt;::_M_next (1 samples, 0.03%)</title><rect x="628.1" y="277" width="0.4" height="15.0" fill="rgb(235,205,14)" rx="2" ry="2" />
<text  x="631.10" y="287.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;int, std::pair&lt;int const, double&gt;, std::allocator&lt;std::pair&lt;int const, double&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;int&gt;, std::hash&lt;int&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_find_before_node (41 samples, 1.32%)</title><rect x="774.6" y="453" width="15.6" height="15.0" fill="rgb(246,113,8)" rx="2" ry="2" />
<text  x="777.65" y="463.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;int, std::pair&lt;int const, double&gt;, std::allocator&lt;std::pair&lt;int const, double&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;int&gt;, std::hash&lt;int&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::~_Hashtable (68 samples, 2.19%)</title><rect x="832.4" y="485" width="25.8" height="15.0" fill="rgb(251,3,19)" rx="2" ry="2" />
<text  x="835.36" y="495.5" >s..</text>
</g>
<g >
<title>std::allocator_traits&lt;std::allocator&lt;std::__detail::_Hash_node&lt;int, false&gt; &gt; &gt;::deallocate (72 samples, 2.32%)</title><rect x="478.5" y="261" width="27.3" height="15.0" fill="rgb(233,20,33)" rx="2" ry="2" />
<text  x="481.51" y="271.5" >s..</text>
</g>
<g >
<title>xhci_msi_irq (1 samples, 0.03%)</title><rect x="751.9" y="309" width="0.3" height="15.0" fill="rgb(243,39,28)" rx="2" ry="2" />
<text  x="754.87" y="319.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_node_base::_Hash_node_base (1 samples, 0.03%)</title><rect x="935.6" y="421" width="0.4" height="15.0" fill="rgb(212,163,5)" rx="2" ry="2" />
<text  x="938.62" y="431.5" ></text>
</g>
<g >
<title>com::github::coderodde::pathfinders::util::cleanParentMap&lt;int&gt; (1 samples, 0.03%)</title><rect x="37.7" y="549" width="0.4" height="15.0" fill="rgb(207,224,50)" rx="2" ry="2" />
<text  x="40.72" y="559.5" ></text>
</g>
<g >
<title>_int_free (7 samples, 0.23%)</title><rect x="417.4" y="341" width="2.6" height="15.0" fill="rgb(242,32,12)" rx="2" ry="2" />
<text  x="420.38" y="351.5" ></text>
</g>
<g >
<title>__gnu_cxx::new_allocator&lt;std::__detail::_Hash_node&lt;int, false&gt; &gt;::allocate (213 samples, 6.85%)</title><rect x="184.6" y="245" width="80.9" height="15.0" fill="rgb(207,179,50)" rx="2" ry="2" />
<text  x="187.65" y="255.5" >__gnu_cxx..</text>
</g>
<g >
<title>xhci_queue_isoc_tx (1 samples, 0.03%)</title><rect x="1187.3" y="149" width="0.4" height="15.0" fill="rgb(213,58,33)" rx="2" ry="2" />
<text  x="1190.34" y="159.5" ></text>
</g>
<g >
<title>__softirqentry_text_start (1 samples, 0.03%)</title><rect x="1046.5" y="373" width="0.4" height="15.0" fill="rgb(221,176,34)" rx="2" ry="2" />
<text  x="1049.49" y="383.5" ></text>
</g>
<g >
<title>all (3,108 samples, 100%)</title><rect x="10.0" y="613" width="1180.0" height="15.0" fill="rgb(226,27,6)" rx="2" ry="2" />
<text  x="13.00" y="623.5" ></text>
</g>
<g >
<title>std::__detail::_Hash_node&lt;std::pair&lt;int const, EuclideanCoordinates&gt;, false&gt;::_M_next (1 samples, 0.03%)</title><rect x="73.0" y="453" width="0.4" height="15.0" fill="rgb(210,40,4)" rx="2" ry="2" />
<text  x="76.02" y="463.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;int, std::pair&lt;int const, int*&gt;, std::allocator&lt;std::pair&lt;int const, int*&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;int&gt;, std::hash&lt;int&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_insert_unique_node (109 samples, 3.51%)</title><rect x="894.2" y="469" width="41.4" height="15.0" fill="rgb(224,183,5)" rx="2" ry="2" />
<text  x="897.24" y="479.5" >std..</text>
</g>
<g >
<title>std::_Hashtable&lt;int, std::pair&lt;int const, int*&gt;, std::allocator&lt;std::pair&lt;int const, int*&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;int&gt;, std::hash&lt;int&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::clear (7 samples, 0.23%)</title><rect x="544.6" y="469" width="2.6" height="15.0" fill="rgb(226,14,14)" rx="2" ry="2" />
<text  x="547.57" y="479.5" ></text>
</g>
<g >
<title>scheduler_tick (1 samples, 0.03%)</title><rect x="180.5" y="53" width="0.3" height="15.0" fill="rgb(237,211,50)" rx="2" ry="2" />
<text  x="183.47" y="63.5" ></text>
</g>
<g >
<title>__GI___libc_malloc (36 samples, 1.16%)</title><rect x="268.9" y="341" width="13.7" height="15.0" fill="rgb(222,66,34)" rx="2" ry="2" />
<text  x="271.93" y="351.5" ></text>
</g>
<g >
<title>std::allocator_traits&lt;std::allocator&lt;std::__detail::_Hash_node&lt;int, false&gt; &gt; &gt;::construct&lt;int, int const&amp;&gt; (4 samples, 0.13%)</title><rect x="265.5" y="277" width="1.5" height="15.0" fill="rgb(241,163,14)" rx="2" ry="2" />
<text  x="268.51" y="287.5" ></text>
</g>
<g >
<title>__GI___libc_malloc (1 samples, 0.03%)</title><rect x="68.5" y="245" width="0.3" height="15.0" fill="rgb(234,139,0)" rx="2" ry="2" />
<text  x="71.47" y="255.5" ></text>
</g>
<g >
<title>std::__detail::_Hashtable_alloc&lt;std::allocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;int const, double&gt;, false&gt; &gt; &gt;::_M_deallocate_node_ptr (1 samples, 0.03%)</title><rect x="82.5" y="293" width="0.4" height="15.0" fill="rgb(207,174,42)" rx="2" ry="2" />
<text  x="85.52" y="303.5" ></text>
</g>
<g >
<title>__usb_hcd_giveback_urb (1 samples, 0.03%)</title><rect x="772.7" y="197" width="0.4" height="15.0" fill="rgb(230,130,49)" rx="2" ry="2" />
<text  x="775.75" y="207.5" ></text>
</g>
<g >
<title>std::unordered_map&lt;int, double, std::hash&lt;int&gt;, std::equal_to&lt;int&gt;, std::allocator&lt;std::pair&lt;int const, double&gt; &gt; &gt;::~unordered_map (2 samples, 0.06%)</title><rect x="48.7" y="469" width="0.8" height="15.0" fill="rgb(216,145,25)" rx="2" ry="2" />
<text  x="51.73" y="479.5" ></text>
</g>
<g >
<title>std::__detail::_Map_base&lt;int, std::pair&lt;int const, double&gt;, std::allocator&lt;std::pair&lt;int const, double&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;int&gt;, std::hash&lt;int&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt;, true&gt;::operator[] (155 samples, 4.99%)</title><rect x="773.5" y="485" width="58.9" height="15.0" fill="rgb(218,102,34)" rx="2" ry="2" />
<text  x="776.51" y="495.5" >std::_..</text>
</g>
<g >
<title>snd_complete_urb (1 samples, 0.03%)</title><rect x="526.3" y="277" width="0.4" height="15.0" fill="rgb(215,22,21)" rx="2" ry="2" />
<text  x="529.34" y="287.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;int, std::pair&lt;int const, double&gt;, std::allocator&lt;std::pair&lt;int const, double&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;int&gt;, std::hash&lt;int&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_Hashtable (1 samples, 0.03%)</title><rect x="47.6" y="485" width="0.4" height="15.0" fill="rgb(244,12,51)" rx="2" ry="2" />
<text  x="50.59" y="495.5" ></text>
</g>
<g >
<title>std::allocator_traits&lt;std::allocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;int const, std::unordered_map&lt;int, double, std::hash&lt;int&gt;, std::equal_to&lt;int&gt;, std::allocator&lt;std::pair&lt;int const, double&gt; &gt; &gt; &gt;, false&gt; &gt; &gt;::allocate (16 samples, 0.51%)</title><rect x="585.6" y="373" width="6.0" height="15.0" fill="rgb(213,149,9)" rx="2" ry="2" />
<text  x="588.57" y="383.5" ></text>
</g>
<g >
<title>operator new (16 samples, 0.51%)</title><rect x="585.6" y="325" width="6.0" height="15.0" fill="rgb(242,211,8)" rx="2" ry="2" />
<text  x="588.57" y="335.5" ></text>
</g>
<g >
<title>native_write_msr (4 samples, 0.13%)</title><rect x="59.7" y="101" width="1.6" height="15.0" fill="rgb(247,183,24)" rx="2" ry="2" />
<text  x="62.74" y="111.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;int, std::pair&lt;int const, double&gt;, std::allocator&lt;std::pair&lt;int const, double&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;int&gt;, std::hash&lt;int&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::~_Hashtable (65 samples, 2.09%)</title><rect x="1158.1" y="357" width="24.7" height="15.0" fill="rgb(234,96,9)" rx="2" ry="2" />
<text  x="1161.11" y="367.5" >s..</text>
</g>
<g >
<title>__GI___libc_malloc (59 samples, 1.90%)</title><rect x="604.9" y="181" width="22.4" height="15.0" fill="rgb(215,32,50)" rx="2" ry="2" />
<text  x="607.94" y="191.5" >_..</text>
</g>
<g >
<title>std::__detail::_Hash_code_base&lt;int, std::pair&lt;int const, std::unordered_map&lt;int, double, std::hash&lt;int&gt;, std::equal_to&lt;int&gt;, std::allocator&lt;std::pair&lt;int const, double&gt; &gt; &gt; &gt;, std::__detail::_Select1st, std::hash&lt;int&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, false&gt;::_M_bucket_index (1 samples, 0.03%)</title><rect x="523.7" y="437" width="0.4" height="15.0" fill="rgb(240,109,14)" rx="2" ry="2" />
<text  x="526.69" y="447.5" ></text>
</g>
<g >
<title>__GI___libc_free (3 samples, 0.10%)</title><rect x="1108.4" y="357" width="1.1" height="15.0" fill="rgb(251,180,19)" rx="2" ry="2" />
<text  x="1111.37" y="367.5" ></text>
</g>
<g >
<title>std::allocator&lt;std::__detail::_Hash_node&lt;int, false&gt; &gt;::allocate (213 samples, 6.85%)</title><rect x="184.6" y="261" width="80.9" height="15.0" fill="rgb(254,224,34)" rx="2" ry="2" />
<text  x="187.65" y="271.5" >std::allo..</text>
</g>
<g >
<title>__memset_avx2_unaligned_erms (2 samples, 0.06%)</title><rect x="51.8" y="565" width="0.7" height="15.0" fill="rgb(222,13,49)" rx="2" ry="2" />
<text  x="54.76" y="575.5" ></text>
</g>
<g >
<title>__GI___libc_malloc (108 samples, 3.47%)</title><rect x="141.7" y="213" width="41.0" height="15.0" fill="rgb(217,208,38)" rx="2" ry="2" />
<text  x="144.74" y="223.5" >__G..</text>
</g>
<g >
<title>std::allocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;int const, int*&gt;, false&gt; &gt;::allocate (12 samples, 0.39%)</title><rect x="958.8" y="405" width="4.5" height="15.0" fill="rgb(213,172,0)" rx="2" ry="2" />
<text  x="961.78" y="415.5" ></text>
</g>
<g >
<title>std::priority_queue&lt;com::github::coderodde::pathfinders::util::HeapNode&lt;int, double&gt;*, std::vector&lt;com::github::coderodde::pathfinders::util::HeapNode&lt;int, double&gt;*, std::allocator&lt;com::github::coderodde::pathfinders::util::HeapNode&lt;int, double&gt;*&gt; &gt;, com::github::coderodde::pathfinders::util::HeapNodeComparator&lt;int, double&gt; &gt;::pop (68 samples, 2.19%)</title><rect x="549.1" y="485" width="25.8" height="15.0" fill="rgb(208,49,47)" rx="2" ry="2" />
<text  x="552.12" y="495.5" >s..</text>
</g>
</g>
</svg>
